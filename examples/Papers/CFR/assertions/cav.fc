{
	vars: [x, y, flag],
	initnode: init,
	nodes: {
		exit_assert: { asserts: [[[x <= 102, y <= 51]]] },
	    if1: {    },
	    if2: {    },
	    if3: {    },
	    init: {    },
	    while: {    }
    },
	transitions: [
		{
			name: t0,
			source: init,
			target: while,
			constraints: [x' = 0, y' = 0, flag' = 0]
		},{
			name: t1,
			source:while,
			target: exit_assert,
			constraints: [flag >= 1, x' = x, y' = y, flag' = flag]
		},{
			name: t2,
			source: while,
			target: if1,
			constraints: [flag < 1, x' = x, y' = y, flag' = flag]
		},{
			name: t3,
			source: if1,
			target: if2,
			constraints: [x < 50, x' = x, y' = y + 1, flag' = flag]
		},{
			name: t4,
			source: if1,
			target: if2,
			constraints: [x >= 50, x' = x, y' = y - 1, flag' = flag]
		},{
			name: t5,
			source: if2,
			target: if3,
			constraints: [y < 0, x' = x, y' = y, flag' = 1]
		},{
			name: t6,
			source: if2,
			target: if3,
			constraints: [y >= 0, x' = x, y' = y, flag' = flag]
		},{
			name: t7,
			source: if3,
			target: while,
			constraints: [flag < 1, x' = x + 1, y' = y, flag' = flag]
		},{
			name: t8,
			source: if3,
			target: while,
			constraints: [flag >= 1, x' = x, y' = y, flag' = flag]
		}
	],
	c_source: "#include \"assert.h\"

	void foo(){
	int x, y, flag;
		   x=0;
		   y=0;
		   flag=0;
		   while (flag < 1) {
			       if (x<=50)
			               y=y+1;
			       else
			               y=y-1;
			       
			       if (y<0) {
			               flag=1;
			       }
			       if (flag < 1) {
			               x=x+1;
			       }
		   }

		asssert(x<=102);
		assert(y<=51);
	}"
}
