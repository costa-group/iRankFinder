{
	vars: [w, x, y, z],
	initnode: init,
	nodes: {
		endif1: {    },
		exit: {    },
		if1: {    },
		if2: {    },
		if3: {    },
		if4: {    },
		if5: {    },
		if5_assert1: { asserts: [[[y > 2]]] },
		init: {   },
		while: {    }
    },
	transitions: [
		{
			name: t0,
			source: init,
			target: while,
			constraints: [w' = 0, x' = 0, y' = 0, z' = 0]
		},{
			name: t1,
			source: while,
			target: if1,
			constraints: [w' = w, x' = x, y' = y, z' = z]
		},{
			name: t2,
			source: if1,
			target: endif1,
			constraints: [w' = w, x' = x + 1, y' = y + 100, z' = z]
		},{
			name: t3,
			source: if1,
			target: if2,
			constraints: [w' = w, x' = x, y' = y, z' = z]
		},{
			name: t4,
			source: if2,
			target: if3,
			constraints: [w' = w, x' = x, y' = y, z' = z]
		},{
			name: t5,
			source: if3,
			target: endif1,
			constraints: [x >= 4, w' = w, x' = x + 1, y' = y + 1, z' = z]
		},{
			name: t6,
			source: if3,
			target: endif1,
			constraints: [x < 4, w' = w, x' = x, y' = y, z' = z]
		},{
			name: t7,
			source: if2,
			target: if4,
			constraints: [w' = w, x' = x, y' = y, z' = z]
		},{
			name: t8,
			source: if4,
			target: endif1,
			constraints: [y > 10 * w, z >= 100 * x, w' = w, x' = x, y' = - y, z' = z]
		},{
			name: t9,
			source: if4,
			target: endif1,
			constraints: [y <= 10 * w, w' = w, x' = x, y' = y, z' = z]
		},{
			name: t10,
			source: if4,
			target: endif1,
			constraints: [z < 100 * x, w' = w, x' = x, y' = y, z' = z]
		},{
			name: t11,
			source: endif1,
			target: while,
			constraints: [w' = w + 1, x' = x, y' = y, z' = z + 10]
		},{
			name: t12,
			source: while,
			target: if5,
			constraints: [w' = w, x' = x, y' = y, z' = z]
		},{
			name: t13,
			source: if5,
			target: if5_assert1,
			constraints: [x >= 4, w' = w, x' = x, y' = y, z' = z]
		},{
			name: t13b,
			source: if5_assert1,
			target: exit,
			constraints: [w' = w, x' = x, y' = y, z' = z]
		},{
			name: t14,
			source: if5,
			target: exit,
			constraints: [x < 4, w' = w, x' = x, y' = y, z' = z]
		}
	],
	c_source:"#include \"assert.h\"
	int __BLAST_NONDET;
	void foo(){
	int x, y, w, z;
	int arandom, brandom, crandom;
	x=0;y=0;w=0;z=0;

	while(__BLAST_NONDET) {
		   if(__BLAST_NONDET){
		           x=x+1;
		           y=y+100;
		}
		   else{
		            if(__BLAST_NONDET){
		                   if(x>=4){
		                           x=x+1;
		                           y=y+1;
		                   }
			}
		           else{
		                   if(y>10*w && z>=100*x){
		                           y=-y;
		                   }
		           }
		}
		   w=w+1;z=z+10;
	}
	if(x>=4)
	  assert(y>2);
	}"
}