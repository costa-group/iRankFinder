{
	vars: [x, y, z],
	initnode: init,
	nodes: {
		exit: { asserts: [[[z == 400, x == 100, y == 2]]] },
	    if1: {    },
	    if2: {    },
	    endif2: {    },
	    init: {    },
	    while: {    }
    },
	transitions: [
		{
			name: t0,
			source: init,
			target: while,
			constraints: [x' = 0, y' = 0, z' = 0]
		},{
			name: t1,
			source:while,
			target: exit,
			constraints: [x >= 100, x' = x, y' = y, z' = z]
		},{
			name: t2,
			source: while,
			target: if1,
			constraints: [x < 100, x' = x, y' = y, z' = z]
		},{
			name: t3,
			source: if1,
			target: if2,
			constraints: [x <= 50, x' = x, y' = y + 1, z' = z]
		},{
			name: t4,
			source: if1,
			target: if2,
			constraints: [x > 50, x' = x, y' = y - 1, z' = z]
		},{
			name: t5,
			source: if2,
			target: endif2,
			constraints: [x < 25, x' = x, y' = y, z' = z + 1]
		},{
			name: t6,
			source: if2,
			target: endif2,
			constraints: [x >= 25, x' = x, y' = y, z' = z + 5]
		},{
			name: t7,
			source: endif2,
			target: while,
			constraints: [x' = x + 1, y' = y, z' = z]
		}
	],
	c_source:"#include \"assert.h\"
	void foo(){
	int x, y, z;
	x=0;y=0;z=0;
	while (x<100) {
		   if(x<=50)
		           y=y+1;
		   else
		           y=y-1;
		   if(x<25)
		           z=z+1;
		   else
		           z=z+5;
		   x=x+1;
	}
	assert(z==400);
	assert(y==2);
	assert(x==100);
	}"
}