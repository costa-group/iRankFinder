(declare-sort Loc 0)
(declare-const eval Loc)
(declare-const start Loc)
(assert (distinct eval start))
(define-fun cfg_init ( (pc Loc) (src Loc) (rel Bool) ) Bool (and (= pc src) rel))
(define-fun cfg_trans2 ( (pc Loc) (src Loc) (pc1 Loc) (dst Loc) (rel Bool) ) Bool
                       (and (= pc src) (= pc1 dst) rel))
(define-fun cfg_trans3 ( (pc Loc) (exit Loc) (pc1 Loc) (call Loc) (pc2 Loc) (return Loc)
                         (rel Bool) ) Bool (and (= pc exit) (= pc1 call) (= pc2 return) rel))
(define-fun init_main ( (pc Loc) (A Int) (B Int) ) Bool (cfg_init pc start true))
(define-fun next_main ( (pc Loc) (A Int) (B Int) (pc1 Loc) (A' Int) (B' Int)) Bool (or
    (cfg_trans2 pc eval pc1 eval (and (and (and (and (= (+ B (* -1 B')) 0) (>= (+ (+ (+ -4 (* -1 A)) (* -1 B)) (* 3 A')) 0)) (>= (+ (+ (+ 2 A) B) (* -2 A')) 0)) (>= A 0)) (>= (+ (+ -1 (* -1 A)) B) 0)))
    (cfg_trans2 pc eval pc1 eval (and (and (and (and (= (+ A (* -1 A')) 0) (>= (+ (+ (+ -1 (* -1 B)) (* -1 A')) (* 3 B')) 0)) (>= (+ (+ B A') (* -2 B')) 0)) (>= A' 0)) (>= (+ (+ -1 B) (* -1 A')) 0)))
    (cfg_trans2 pc start pc1 eval (and (= (+ A (* -1 A')) 0) (= (+ B (* -1 B')) 0)))
  )
)
