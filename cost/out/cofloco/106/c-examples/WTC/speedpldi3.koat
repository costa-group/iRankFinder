WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_evalspeedpldi3bb2in___1/9,n_evalspeedpldi3bb2in___3/9,n_evalspeedpldi3bb5in___2/9,n_evalspeedpldi3bb5in___4/9]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [n_evalspeedpldi3stop___6/5]
3. non_recursive  : [n_evalspeedpldi3bb5in___4_loop_cont/6]
4. non_recursive  : [n_evalspeedpldi3bb2in___5/5]
5. non_recursive  : [n_evalspeedpldi3bb5in___7/5]
6. non_recursive  : [n_evalspeedpldi3entryin___8/5]
7. non_recursive  : [n_evalspeedpldi3start/5]
8. non_recursive  : [pyRinit/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_evalspeedpldi3bb5in___4/9
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_evalspeedpldi3bb5in___4_loop_cont/6
4. SCC is partially evaluated into n_evalspeedpldi3bb2in___5/5
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into n_evalspeedpldi3entryin___8/5
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into pyRinit/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalspeedpldi3bb5in___4/9 
* CE 9 is refined into CE [12] 
* CE 8 is refined into CE [13] 
* CE 6 is refined into CE [14] 
* CE 7 is refined into CE [15] 


### Cost equations --> "Loop" of n_evalspeedpldi3bb5in___4/9 
* CEs [14] --> Loop 12 
* CEs [15] --> Loop 13 
* CEs [12] --> Loop 14 
* CEs [13] --> Loop 15 

### Ranking functions of CR n_evalspeedpldi3bb5in___4(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR n_evalspeedpldi3bb5in___4(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [12,13]:
  - RF of loop [12:1]:
    A-C depends on loops [13:1] 
    B-C-1 depends on loops [13:1] 
  - RF of loop [13:1]:
    B-D-1


### Specialization of cost equations n_evalspeedpldi3bb5in___4_loop_cont/6 
* CE 11 is refined into CE [16] 
* CE 10 is refined into CE [17] 


### Cost equations --> "Loop" of n_evalspeedpldi3bb5in___4_loop_cont/6 
* CEs [16] --> Loop 16 
* CEs [17] --> Loop 17 

### Ranking functions of CR n_evalspeedpldi3bb5in___4_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalspeedpldi3bb5in___4_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations n_evalspeedpldi3bb2in___5/5 
* CE 5 is refined into CE [18,19] 


### Cost equations --> "Loop" of n_evalspeedpldi3bb2in___5/5 
* CEs [18,19] --> Loop 18 

### Ranking functions of CR n_evalspeedpldi3bb2in___5(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalspeedpldi3bb2in___5(A,B,C,D,E) 


### Specialization of cost equations n_evalspeedpldi3entryin___8/5 
* CE 4 is refined into CE [20] 
* CE 2 is refined into CE [21] 
* CE 3 is refined into CE [22] 


### Cost equations --> "Loop" of n_evalspeedpldi3entryin___8/5 
* CEs [20] --> Loop 19 
* CEs [21] --> Loop 20 
* CEs [22] --> Loop 21 

### Ranking functions of CR n_evalspeedpldi3entryin___8(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalspeedpldi3entryin___8(A,B,C,D,E) 


### Specialization of cost equations pyRinit/5 
* CE 1 is refined into CE [23,24,25] 


### Cost equations --> "Loop" of pyRinit/5 
* CEs [25] --> Loop 22 
* CEs [24] --> Loop 23 
* CEs [23] --> Loop 24 

### Ranking functions of CR pyRinit(A,B,C,D,E) 

#### Partial ranking functions of CR pyRinit(A,B,C,D,E) 


Computing Bounds
=====================================

#### Cost of chains of n_evalspeedpldi3bb5in___4(A,B,C,D,E,F,G,H,I):
* Chain [[12,13],15]: 2*it(12)+4*it(13)+3
  Such that:aux(9) =< B
it(13) =< B-D
aux(15) =< A-C
aux(1) =< it(13)*aux(9)
it(12) =< aux(1)+aux(15)

  with precondition: [E=2,C>=1,D>=0,B>=A+1,A>=C,B>=D+1,A+B>=C+D+2] 

* Chain [[12,13],14]: 2*it(12)+4*it(13)+0
  Such that:aux(9) =< B
it(13) =< B-D
aux(16) =< A-C
aux(1) =< it(13)*aux(9)
it(12) =< aux(1)+aux(16)

  with precondition: [E=3,C>=1,D>=0,B>=A+1,A>=C,B>=D+1,A+B>=C+D+2] 

* Chain [14]: 0
  with precondition: [E=3,C>=1,D>=0,B>=A+1,A>=C] 


#### Cost of chains of n_evalspeedpldi3bb5in___4_loop_cont(A,B,C,D,E,F):
* Chain [17]: 0
  with precondition: [A=2] 

* Chain [16]: 0
  with precondition: [A=3] 


#### Cost of chains of n_evalspeedpldi3bb2in___5(A,B,C,D,E):
* Chain [18]: 8*s(7)+4*s(10)+4
  Such that:aux(19) =< A
aux(20) =< B
s(7) =< aux(20)
s(9) =< s(7)*aux(20)
s(10) =< s(9)+aux(19)

  with precondition: [C=0,D=0,A>=1,B>=A+1] 


#### Cost of chains of n_evalspeedpldi3entryin___8(A,B,C,D,E):
* Chain [21]: 1
  with precondition: [0>=A] 

* Chain [20]: 8*s(18)+4*s(20)+6
  Such that:s(16) =< A
s(17) =< B
s(18) =< s(17)
s(19) =< s(18)*s(17)
s(20) =< s(19)+s(16)

  with precondition: [A>=1,B>=A+1] 

* Chain [19]: 1
  with precondition: [A>=B] 


#### Cost of chains of pyRinit(A,B,C,D,E):
* Chain [24]: 3
  with precondition: [0>=A] 

* Chain [23]: 8*s(23)+4*s(25)+8
  Such that:s(21) =< A
s(22) =< B
s(23) =< s(22)
s(24) =< s(23)*s(22)
s(25) =< s(24)+s(21)

  with precondition: [A>=1,B>=A+1] 

* Chain [22]: 3
  with precondition: [A>=B] 


Closed-form bounds of pyRinit(A,B,C,D,E): 
-------------------------------------
* Chain [24] with precondition: [0>=A] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [23] with precondition: [A>=1,B>=A+1] 
    - Upper bound: 4*A+8*B+8+4*B*B 
    - Complexity: n^2 
* Chain [22] with precondition: [A>=B] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of pyRinit(A,B,C,D,E): nat(A)*4+5+nat(B)*8+nat(B)*4*nat(B)+3 
Asymptotic class: n^2 
* Total analysis performed in 305 ms.


-- stats
realtime 0:00.35
usertime 0.34
systime 0.01

