WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_evalspeedFails4bb3in___1/9,n_evalspeedFails4bb6in___4/9]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [n_evalspeedFails4stop___2/5]
3. non_recursive  : [n_evalspeedFails4bb6in___4_loop_cont/6]
4. recursive  : [n_evalspeedFails4bb3in___3/9,n_evalspeedFails4bb6in___5/9]
5. non_recursive  : [n_evalspeedFails4bb6in___5_loop_cont/6]
6. non_recursive  : [n_evalspeedFails4entryin___6/5]
7. non_recursive  : [n_evalspeedFails4start/5]
8. non_recursive  : [pyRinit/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_evalspeedFails4bb6in___4/9
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_evalspeedFails4bb6in___4_loop_cont/6
4. SCC is partially evaluated into n_evalspeedFails4bb6in___5/9
5. SCC is partially evaluated into n_evalspeedFails4bb6in___5_loop_cont/6
6. SCC is partially evaluated into n_evalspeedFails4entryin___6/5
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into pyRinit/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalspeedFails4bb6in___4/9 
* CE 6 is refined into CE [14] 
* CE 5 is refined into CE [15] 
* CE 4 is refined into CE [16] 


### Cost equations --> "Loop" of n_evalspeedFails4bb6in___4/9 
* CEs [16] --> Loop 14 
* CEs [14] --> Loop 15 
* CEs [15] --> Loop 16 

### Ranking functions of CR n_evalspeedFails4bb6in___4(A,B,C,D,E,F,G,H,I) 
* RF of phase [14]: [B-D+1]

#### Partial ranking functions of CR n_evalspeedFails4bb6in___4(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    B-D+1


### Specialization of cost equations n_evalspeedFails4bb6in___4_loop_cont/6 
* CE 8 is refined into CE [17] 
* CE 7 is refined into CE [18] 


### Cost equations --> "Loop" of n_evalspeedFails4bb6in___4_loop_cont/6 
* CEs [17] --> Loop 17 
* CEs [18] --> Loop 18 

### Ranking functions of CR n_evalspeedFails4bb6in___4_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalspeedFails4bb6in___4_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations n_evalspeedFails4bb6in___5/9 
* CE 11 is refined into CE [19] 
* CE 10 is refined into CE [20] 
* CE 9 is refined into CE [21] 


### Cost equations --> "Loop" of n_evalspeedFails4bb6in___5/9 
* CEs [21] --> Loop 19 
* CEs [19] --> Loop 20 
* CEs [20] --> Loop 21 

### Ranking functions of CR n_evalspeedFails4bb6in___5(A,B,C,D,E,F,G,H,I) 
* RF of phase [19]: [B-D+1]

#### Partial ranking functions of CR n_evalspeedFails4bb6in___5(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    B-D+1


### Specialization of cost equations n_evalspeedFails4bb6in___5_loop_cont/6 
* CE 13 is refined into CE [22] 
* CE 12 is refined into CE [23] 


### Cost equations --> "Loop" of n_evalspeedFails4bb6in___5_loop_cont/6 
* CEs [22] --> Loop 22 
* CEs [23] --> Loop 23 

### Ranking functions of CR n_evalspeedFails4bb6in___5_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalspeedFails4bb6in___5_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations n_evalspeedFails4entryin___6/5 
* CE 3 is refined into CE [24,25,26] 
* CE 2 is refined into CE [27,28,29] 


### Cost equations --> "Loop" of n_evalspeedFails4entryin___6/5 
* CEs [24,25,26] --> Loop 24 
* CEs [27,28,29] --> Loop 25 

### Ranking functions of CR n_evalspeedFails4entryin___6(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalspeedFails4entryin___6(A,B,C,D,E) 


### Specialization of cost equations pyRinit/5 
* CE 1 is refined into CE [30,31] 


### Cost equations --> "Loop" of pyRinit/5 
* CEs [31] --> Loop 26 
* CEs [30] --> Loop 27 

### Ranking functions of CR pyRinit(A,B,C,D,E) 

#### Partial ranking functions of CR pyRinit(A,B,C,D,E) 


Computing Bounds
=====================================

#### Cost of chains of n_evalspeedFails4bb6in___4(A,B,C,D,E,F,G,H,I):
* Chain [[14],16]: 2*it(14)+1
  Such that:it(14) =< B-D+1

  with precondition: [A+1=0,E=2,0>=C,B>=D] 

* Chain [[14],15]: 2*it(14)+0
  Such that:it(14) =< B-D+1

  with precondition: [A+1=0,E=3,0>=C,B>=D] 

* Chain [16]: 1
  with precondition: [A+1=0,E=2,0>=C,D>=B+1] 

* Chain [15]: 0
  with precondition: [A+1=0,E=3,0>=C] 


#### Cost of chains of n_evalspeedFails4bb6in___4_loop_cont(A,B,C,D,E,F):
* Chain [18]: 0
  with precondition: [A=2] 

* Chain [17]: 0
  with precondition: [A=3] 


#### Cost of chains of n_evalspeedFails4bb6in___5(A,B,C,D,E,F,G,H,I):
* Chain [[19],21]: 2*it(19)+1
  Such that:it(19) =< B-D+1

  with precondition: [A=1,E=2,C>=1,B>=D] 

* Chain [[19],20]: 2*it(19)+0
  Such that:it(19) =< B-D+1

  with precondition: [A=1,E=3,C>=1,B>=D] 

* Chain [21]: 1
  with precondition: [A=1,E=2,C>=1,D>=B+1] 

* Chain [20]: 0
  with precondition: [A=1,E=3,C>=1] 


#### Cost of chains of n_evalspeedFails4bb6in___5_loop_cont(A,B,C,D,E,F):
* Chain [23]: 0
  with precondition: [A=2] 

* Chain [22]: 0
  with precondition: [A=3] 


#### Cost of chains of n_evalspeedFails4entryin___6(A,B,C,D,E):
* Chain [25]: 4*s(3)+2
  Such that:aux(1) =< -B+C+1
s(3) =< aux(1)

  with precondition: [0>=A] 

* Chain [24]: 4*s(5)+2
  Such that:aux(2) =< -B+C+1
s(5) =< aux(2)

  with precondition: [A>=1] 


#### Cost of chains of pyRinit(A,B,C,D,E):
* Chain [27]: 4*s(8)+4
  Such that:s(7) =< -B+C+1
s(8) =< s(7)

  with precondition: [0>=A] 

* Chain [26]: 4*s(10)+4
  Such that:s(9) =< -B+C+1
s(10) =< s(9)

  with precondition: [A>=1] 


Closed-form bounds of pyRinit(A,B,C,D,E): 
-------------------------------------
* Chain [27] with precondition: [0>=A] 
    - Upper bound: nat(-B+C+1)*4+4 
    - Complexity: n 
* Chain [26] with precondition: [A>=1] 
    - Upper bound: nat(-B+C+1)*4+4 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C,D,E): nat(-B+C+1)*4+4 
Asymptotic class: n 
* Total analysis performed in 208 ms.


-- stats
realtime 0:00.25
usertime 0.24
systime 0.01

