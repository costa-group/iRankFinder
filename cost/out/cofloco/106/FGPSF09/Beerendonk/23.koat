WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval2___3/7]
1. non_recursive  : [exit_location/1]
2. recursive  : [n_eval1___2/4,n_eval2___1/4]
3. non_recursive  : [n_eval1___2_loop_cont/2]
4. non_recursive  : [n_eval2___3_loop_cont/5]
5. non_recursive  : [n_eval1___4/4]
6. non_recursive  : [n_start/4]
7. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval2___3/7
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into n_eval1___2/4
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_eval2___3_loop_cont/5
5. SCC is partially evaluated into n_eval1___4/4
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval2___3/7 
* CE 3 is refined into CE [10] 
* CE 5 is refined into CE [11] 
* CE 4 is refined into CE [12] 


### Cost equations --> "Loop" of n_eval2___3/7 
* CEs [12] --> Loop 10 
* CEs [10] --> Loop 11 
* CEs [11] --> Loop 12 

### Ranking functions of CR n_eval2___3(A,B,C,D,E,F,G) 
* RF of phase [10]: [-B+C]

#### Partial ranking functions of CR n_eval2___3(A,B,C,D,E,F,G) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    -B+C


### Specialization of cost equations n_eval1___2/4 
* CE 9 is refined into CE [13] 
* CE 8 is refined into CE [14] 


### Cost equations --> "Loop" of n_eval1___2/4 
* CEs [14] --> Loop 13 
* CEs [13] --> Loop 14 

### Ranking functions of CR n_eval1___2(A,B,C,D) 
* RF of phase [13]: [A-B,A-C]

#### Partial ranking functions of CR n_eval1___2(A,B,C,D) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    A-B
    A-C


### Specialization of cost equations n_eval2___3_loop_cont/5 
* CE 6 is refined into CE [15] 
* CE 7 is refined into CE [16] 


### Cost equations --> "Loop" of n_eval2___3_loop_cont/5 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

### Ranking functions of CR n_eval2___3_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR n_eval2___3_loop_cont(A,B,C,D,E) 


### Specialization of cost equations n_eval1___4/4 
* CE 2 is refined into CE [17,18,19] 


### Cost equations --> "Loop" of n_eval1___4/4 
* CEs [17,18,19] --> Loop 17 

### Ranking functions of CR n_eval1___4(A,B,C,D) 

#### Partial ranking functions of CR n_eval1___4(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [20] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [20] --> Loop 18 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_eval2___3(A,B,C,D,E,F,G):
* Chain [[10],12]: 1*it(10)+0
  Such that:it(10) =< -B+C

  with precondition: [D=2,A>=B+1,C>=B+1] 

* Chain [[10],11]: 1*it(10)+1
  Such that:it(10) =< C-F

  with precondition: [D=3,A=E+1,B=F,B=G,A>=B+1,C>=B+1] 

* Chain [12]: 0
  with precondition: [D=2,A>=B+1] 

* Chain [11]: 1
  with precondition: [D=3,A=E+1,B=F,C=G,A>=B+1,B>=C] 


#### Cost of chains of n_eval1___2(A,B,C,D):
* Chain [[13],14]: 2*it(13)+0
  Such that:it(13) =< A-B

  with precondition: [D=2,A>=B+1,B>=C] 

* Chain [14]: 0
  with precondition: [D=2] 


#### Cost of chains of n_eval2___3_loop_cont(A,B,C,D,E):
* Chain [16]: 0
  with precondition: [A=2] 

* Chain [15]: 2*s(3)+0
  Such that:s(3) =< B-C

  with precondition: [A=3] 


#### Cost of chains of n_eval1___4(A,B,C,D):
* Chain [17]: 2*s(4)+4*s(6)+2
  Such that:aux(1) =< A-B
aux(2) =< -B+C
s(6) =< aux(1)
s(4) =< aux(2)

  with precondition: [A>=B+1] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [18]: 4*s(10)+2*s(11)+4
  Such that:s(8) =< A-B
s(9) =< -B+C
s(10) =< s(8)
s(11) =< s(9)

  with precondition: [A>=B+1] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [18] with precondition: [A>=B+1] 
    - Upper bound: 4*A-4*B+ (nat(-B+C)*2+4) 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C,D): 4*A-4*B+ (nat(-B+C)*2+4) 
Asymptotic class: n 
* Total analysis performed in 128 ms.


-- stats
realtime 0:00.16
usertime 0.15
systime 0.00

