WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval___1/7]
1. recursive  : [n_eval___1_loop_cont/5,n_eval___2/4]
2. non_recursive  : [exit_location/1]
3. non_recursive  : [n_eval___2_loop_cont/2]
4. non_recursive  : [n_start/4]
5. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval___1/7
1. SCC is partially evaluated into n_eval___2/4
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_start/4
5. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval___1/7 
* CE 9 is refined into CE [10] 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 


### Cost equations --> "Loop" of n_eval___1/7 
* CEs [12] --> Loop 9 
* CEs [10] --> Loop 10 
* CEs [11] --> Loop 11 

### Ranking functions of CR n_eval___1(A,B,C,D,E,F,G) 
* RF of phase [9]: [A-C,B-C+1]

#### Partial ranking functions of CR n_eval___1(A,B,C,D,E,F,G) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    A-C
    B-C+1


### Specialization of cost equations n_eval___2/4 
* CE 3 is refined into CE [13] 
* CE 6 is refined into CE [14] 
* CE 4 is refined into CE [15,16] 
* CE 5 is refined into CE [17] 


### Cost equations --> "Loop" of n_eval___2/4 
* CEs [17] --> Loop 12 
* CEs [16] --> Loop 13 
* CEs [15] --> Loop 14 
* CEs [13,14] --> Loop 15 

### Ranking functions of CR n_eval___2(A,B,C,D) 
* RF of phase [12]: [A-B,-B+C]
* RF of phase [14]: [A-B,A-C]

#### Partial ranking functions of CR n_eval___2(A,B,C,D) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    A-B
    -B+C
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    A-B
    A-C


### Specialization of cost equations n_start/4 
* CE 2 is refined into CE [18] 


### Cost equations --> "Loop" of n_start/4 
* CEs [18] --> Loop 16 

### Ranking functions of CR n_start(A,B,C,D) 

#### Partial ranking functions of CR n_start(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [19] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [19] --> Loop 17 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_eval___1(A,B,C,D,E,F,G):
* Chain [[9],11]: 1*it(9)+1
  Such that:it(9) =< -C+F

  with precondition: [D=2,A=E,B+1=F,B+1=G,A>=B+1,B>=C] 

* Chain [[9],10]: 1*it(9)+0
  Such that:it(9) =< B-C+1

  with precondition: [D=3,A>=B+1,B>=C] 

* Chain [11]: 1
  with precondition: [D=2,B+1=C,A=E,B+1=F,B+1=G,A>=B+1] 

* Chain [10]: 0
  with precondition: [D=3,A>=B+1,B+1>=C] 


#### Cost of chains of n_eval___2(A,B,C,D):
* Chain [[14],15]: 2*it(14)+1
  Such that:it(14) =< A-C

  with precondition: [D=3,B=C,A>=B+1] 

* Chain [[12],[14],15]: 1*it(12)+2*it(14)+1
  Such that:it(14) =< A-C
it(12) =< -B+C

  with precondition: [D=3,C>=B+1,A>=C+1] 

* Chain [[12],15]: 1*it(12)+1
  Such that:it(12) =< -B+C

  with precondition: [D=3,A>=B+1,C>=B+1] 

* Chain [15]: 1*s(2)+1
  Such that:s(2) =< B-C

  with precondition: [D=3] 

* Chain [13,[14],15]: 2*it(14)+1*s(3)+3
  Such that:it(14) =< A-B
s(3) =< B-C+1

  with precondition: [D=3,A>=B+2,B>=C+1] 

* Chain [13,15]: 1*s(3)+3
  Such that:s(3) =< B-C+1

  with precondition: [D=3,A>=B+1,B>=C+1] 


#### Cost of chains of n_start(A,B,C,D):
* Chain [16]: 2*s(12)+1*s(13)+4*s(17)+2*s(18)+2*s(19)+4
  Such that:s(12) =< A-B
s(14) =< A-C
s(15) =< -B+C
s(13) =< B-C
s(16) =< B-C+1
s(17) =< s(14)
s(18) =< s(15)
s(19) =< s(16)

  with precondition: [] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [17]: 2*s(20)+1*s(23)+4*s(25)+2*s(26)+2*s(27)+5
  Such that:s(20) =< A-B
s(21) =< A-C
s(22) =< -B+C
s(23) =< B-C
s(24) =< B-C+1
s(25) =< s(21)
s(26) =< s(22)
s(27) =< s(24)

  with precondition: [] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [17] with precondition: [] 
    - Upper bound: nat(-B+C)*2+5+nat(B-C+1)*2+nat(A-B)*2+nat(A-C)*4+nat(B-C) 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C,D): nat(-B+C)*2+5+nat(B-C+1)*2+nat(A-B)*2+nat(A-C)*4+nat(B-C) 
Asymptotic class: n 
* Total analysis performed in 192 ms.


-- stats
realtime 0:00.24
usertime 0.22
systime 0.00

