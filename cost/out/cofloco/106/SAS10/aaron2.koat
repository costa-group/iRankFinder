WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_lbl91___2/13]
1. recursive  : [n_lbl101___3/13,n_lbl91___2_loop_cont/14]
2. non_recursive  : [exit_location/1]
3. non_recursive  : [n_stop___1/7]
4. non_recursive  : [n_lbl101___3_loop_cont/8]
5. non_recursive  : [n_start___4/7]
6. non_recursive  : [n_start0/7]
7. non_recursive  : [pyRinit/7]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_lbl91___2/13
1. SCC is partially evaluated into n_lbl101___3/13
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_lbl101___3_loop_cont/8
5. SCC is partially evaluated into n_start___4/7
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into pyRinit/7

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_lbl91___2/13 
* CE 11 is refined into CE [20] 
* CE 10 is refined into CE [21] 
* CE 8 is refined into CE [22] 
* CE 9 is refined into CE [23] 


### Cost equations --> "Loop" of n_lbl91___2/13 
* CEs [23] --> Loop 15 
* CEs [20] --> Loop 16 
* CEs [21] --> Loop 17 
* CEs [22] --> Loop 18 

### Ranking functions of CR n_lbl91___2(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* RF of phase [15]: [-B+D+1,-C+D+1]

#### Partial ranking functions of CR n_lbl91___2(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    -B+D+1
    -C+D+1


### Specialization of cost equations n_lbl101___3/13 
* CE 14 is refined into CE [24] 
* CE 19 is refined into CE [25] 
* CE 18 is refined into CE [26] 
* CE 15 is refined into CE [27,28] 
* CE 16 is refined into CE [29,30] 
* CE 17 is refined into CE [31] 


### Cost equations --> "Loop" of n_lbl101___3/13 
* CEs [30] --> Loop 19 
* CEs [29] --> Loop 20 
* CEs [31] --> Loop 21 
* CEs [24,25] --> Loop 22 
* CEs [26] --> Loop 23 
* CEs [27] --> Loop 24 
* CEs [28] --> Loop 25 

### Ranking functions of CR n_lbl101___3(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* RF of phase [19,20,21]: [-B+D+1,-B+E+1]

#### Partial ranking functions of CR n_lbl101___3(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* Partial RF of phase [19,20,21]:
  - RF of loop [19:1]:
    -2*A-B+E-1
    -3/2*A-C/2+D/2-1
    -2/3*A-B/3+D/3-1/3
    -B+E-1
    -B+E-2*F-1
    -B/3+D/3-1/3
    -B/3+D/3-2/3*F-1/3
    -C/2+D/2-1
    -C/2+D/2-3/2*F-1
  - RF of loop [20:1]:
    -2*A-C+D-1
    -A-B+E
    -A/2-B/2+D/2
    -B+E
    -B+E-F
    -B/2+D/2
    -B/2+D/2-F/2
    -C+D-1
    -C+D-2*F-1
  - RF of loop [21:1]:
    -B+D+1
    -B+E+1


### Specialization of cost equations n_lbl101___3_loop_cont/8 
* CE 13 is refined into CE [32] 
* CE 12 is refined into CE [33] 


### Cost equations --> "Loop" of n_lbl101___3_loop_cont/8 
* CEs [32] --> Loop 26 
* CEs [33] --> Loop 27 

### Ranking functions of CR n_lbl101___3_loop_cont(A,B,C,D,E,F,G,H) 

#### Partial ranking functions of CR n_lbl101___3_loop_cont(A,B,C,D,E,F,G,H) 


### Specialization of cost equations n_start___4/7 
* CE 7 is refined into CE [34] 
* CE 2 is refined into CE [35] 
* CE 3 is refined into CE [36,37] 
* CE 4 is refined into CE [38,39,40,41,42,43] 
* CE 5 is refined into CE [44,45,46] 
* CE 6 is refined into CE [47] 


### Cost equations --> "Loop" of n_start___4/7 
* CEs [34] --> Loop 28 
* CEs [47] --> Loop 29 
* CEs [35,36,37,38,39,40,41,42,43,44,45,46] --> Loop 30 

### Ranking functions of CR n_start___4(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR n_start___4(A,B,C,D,E,F,G) 


### Specialization of cost equations pyRinit/7 
* CE 1 is refined into CE [48,49,50] 


### Cost equations --> "Loop" of pyRinit/7 
* CEs [50] --> Loop 31 
* CEs [49] --> Loop 32 
* CEs [48] --> Loop 33 

### Ranking functions of CR pyRinit(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR pyRinit(A,B,C,D,E,F,G) 


Computing Bounds
=====================================

#### Cost of chains of n_lbl91___2(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [[15],18]: 1*it(15)+1
  Such that:it(15) =< D-K

  with precondition: [G=2,A=F,A=H,C=J,E=L,A=M,A+B+1=I,A>=0,K>=B,B>=C,E>=A+D+1,D>=A+K+1] 

* Chain [[15],17]: 1*it(15)+1
  Such that:it(15) =< -B+D+1

  with precondition: [G=3,A=F,A>=0,D>=B,B>=C,E>=A+D+1] 

* Chain [[15],16]: 1*it(15)+0
  Such that:it(15) =< -B+D+1

  with precondition: [G=4,A=F,A>=0,D>=B,B>=C,E>=A+D+1] 

* Chain [18]: 1
  with precondition: [G=2,F=A,F=H,C=J,D=K,E=L,F=M,B+F+1=I,F>=0,D>=B,B>=C,E>=D+F+1] 

* Chain [17]: 1
  with precondition: [G=3,F=A,B>=C,B>=D+1,D+F+1>=B,E>=D+F+1] 

* Chain [16]: 0
  with precondition: [G=4,F=A,F>=0,B>=C,D+F+1>=B,E>=D+F+1] 


#### Cost of chains of n_lbl101___3(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [[19,20,21],25]: 2*it(19)+2*it(20)+1*it(21)+1*s(2)+1*s(5)+2
  Such that:aux(3) =< -B+D
aux(4) =< -B+D+1
aux(6) =< -B+E
aux(7) =< -B+E+1
aux(11) =< -B+D-F
it(19) =< aux(11)
it(20) =< aux(11)
s(2) =< aux(11)
it(21) =< aux(11)
it(20) =< aux(3)
s(5) =< aux(3)
it(19) =< aux(4)
it(20) =< aux(4)
it(21) =< aux(4)
s(5) =< aux(11)
it(19) =< aux(6)
it(20) =< aux(6)
it(19) =< aux(7)
it(20) =< aux(7)
it(21) =< aux(7)

  with precondition: [G=3,A=F,A>=0,E>=D,D>=2*A+B+2,B>=A+C+1] 

* Chain [[19,20,21],24]: 2*it(19)+2*it(20)+1*it(21)+1*s(5)+2
  Such that:it(19) =< -2*A-B+E
it(19) =< -3/2*A-C/2+D/2
it(19) =< -2/3*A-B/3+D/3
aux(4) =< -B+D+1
aux(6) =< -B+E
aux(7) =< -B+E+1
it(19) =< -B+E-2*F
it(19) =< -B/3+D/3-2/3*F
it(19) =< -C/2+D/2-3/2*F
aux(12) =< -B+D
it(19) =< aux(12)
it(20) =< aux(12)
it(21) =< aux(12)
s(5) =< aux(12)
it(19) =< aux(4)
it(20) =< aux(4)
it(21) =< aux(4)
it(19) =< aux(6)
it(20) =< aux(6)
it(19) =< aux(7)
it(20) =< aux(7)
it(21) =< aux(7)

  with precondition: [G=3,A=F,A>=0,E>=D,D>=A+B+1,B>=A+C+1] 

* Chain [[19,20,21],23]: 2*it(19)+2*it(20)+1*it(21)+1*s(5)+1
  Such that:it(19) =< -2*A-B+E
it(20) =< -2*A-C+D
it(20) =< -A-B+E
it(19) =< -3/2*A-C/2+D/2
it(19) =< -2/3*A-B/3+D/3
it(20) =< -A/2-B/2+D/2
aux(3) =< -B+D
aux(4) =< -B+D+1
aux(6) =< -B+E
aux(7) =< -B+E+1
it(19) =< -B+E-2*F
it(20) =< -B+E-F
it(20) =< -B/2+D/2-F/2
it(19) =< -B/3+D/3-2/3*F
it(20) =< -C+D-2*F
it(19) =< -C/2+D/2-3/2*F
aux(13) =< -B+D+F+1
it(19) =< aux(13)
it(20) =< aux(13)
it(21) =< aux(13)
it(20) =< aux(3)
s(5) =< aux(3)
it(19) =< aux(4)
it(20) =< aux(4)
it(21) =< aux(4)
s(5) =< aux(13)
it(19) =< aux(6)
it(20) =< aux(6)
it(19) =< aux(7)
it(20) =< aux(7)
it(21) =< aux(7)

  with precondition: [G=3,A=F,A>=0,D>=B,E>=D,B>=A+C+1] 

* Chain [[19,20,21],22]: 2*it(19)+2*it(20)+1*it(21)+1*s(5)+1*s(6)+1
  Such that:s(6) =< -2*A-B+D
it(19) =< -2*A-B+E
it(20) =< -2*A-C+D
it(20) =< -A-B+E
it(19) =< -3/2*A-C/2+D/2
it(19) =< -2/3*A-B/3+D/3
it(20) =< -A/2-B/2+D/2
aux(3) =< -B+D
aux(4) =< -B+D+1
aux(6) =< -B+E
aux(7) =< -B+E+1
it(19) =< -B+E-2*F
it(20) =< -B+E-F
it(20) =< -B/2+D/2-F/2
it(19) =< -B/3+D/3-2/3*F
it(20) =< -C+D-2*F
it(19) =< -C/2+D/2-3/2*F
aux(14) =< A-B+D+1
it(19) =< aux(14)
it(20) =< aux(14)
it(21) =< aux(14)
it(20) =< aux(3)
s(5) =< aux(3)
it(19) =< aux(4)
it(20) =< aux(4)
it(21) =< aux(4)
s(5) =< aux(14)
it(19) =< aux(6)
it(20) =< aux(6)
it(19) =< aux(7)
it(20) =< aux(7)
it(21) =< aux(7)

  with precondition: [G=4,A=F,A>=0,D>=B,E>=D,B>=A+C+1] 

* Chain [25]: 1*s(2)+2
  Such that:s(2) =< -A-B+D

  with precondition: [G=3,A=F,A>=0,E>=D,D>=A+B+1,B>=A+C+1] 

* Chain [24]: 2
  with precondition: [G=3,A=F,D>=B,E>=D,B>=A+C+1,A+B>=D] 

* Chain [23]: 1
  with precondition: [G=3,A=F,B>=D+1,E>=D,B>=A+C+1,A+D+1>=B] 

* Chain [22]: 1*s(6)+1
  Such that:s(6) =< -A-B+D

  with precondition: [G=4] 


#### Cost of chains of n_lbl101___3_loop_cont(A,B,C,D,E,F,G,H):
* Chain [27]: 0
  with precondition: [A=3] 

* Chain [26]: 0
  with precondition: [A=4] 


#### Cost of chains of n_start___4(A,B,C,D,E,F,G):
* Chain [30]: 2*s(46)+6*s(47)+2*s(48)+4*s(49)+4*s(62)+5*s(64)+1*s(68)+5*s(69)+1*s(73)+1*s(74)+2*s(75)+2*s(76)+1*s(83)+1*s(84)+2*s(85)+2*s(86)+2*s(87)+4*s(100)+5*s(102)+5*s(107)+1*s(109)+1*s(111)+1*s(114)+2*s(115)+2*s(116)+2*s(123)+2*s(125)+3*s(126)+2*s(139)+2*s(140)+2*s(141)+6*s(146)+2*s(152)+2*s(153)+1*s(160)+1*s(161)+4
  Such that:s(114) =< -5*A-B+D
aux(33) =< -4*A-B+E
s(86) =< -2*A-B/2+D/2
s(153) =< -A-B/2+E/2
s(152) =< -A-B/3+E/3
s(115) =< -5/2*A-B/2+D/2
aux(34) =< -5/2*A-B/2+E/2
s(92) =< -5/3*A-B/3+D/3
s(75) =< -4/3*A-B/3+E/3
s(155) =< -B+D
aux(36) =< -B+D-2*F
aux(37) =< -B+D-F
s(128) =< -B+E
s(74) =< -B+E-4*F
aux(49) =< -B+E-F
s(125) =< -B/2+E/2-F
aux(45) =< -B/3+E/3-F
aux(29) =< -B/3+E/3-4/3*F
aux(50) =< -4*A-B+D
aux(51) =< -3*A-B+E
aux(52) =< -2*A-B+E
aux(53) =< -2*A-B/2+E/2
aux(54) =< -A-B+D
aux(55) =< -A-B+E
aux(56) =< -5/3*A-B/3+E/3
aux(57) =< -3/2*A-B/2+E/2
aux(58) =< -B+D-3*F
aux(59) =< -B+E-3*F
aux(60) =< -B+E-2*F
aux(61) =< -B/2+E/2-2*F
aux(62) =< -B/2+E/2-3/2*F
s(87) =< aux(50)
s(116) =< aux(52)
s(125) =< aux(52)
s(86) =< aux(53)
s(116) =< aux(53)
s(46) =< aux(54)
s(47) =< aux(55)
s(115) =< aux(56)
s(76) =< aux(57)
s(115) =< aux(58)
s(115) =< aux(59)
s(75) =< aux(61)
s(48) =< aux(62)
s(152) =< aux(62)
s(116) =< aux(50)
s(115) =< aux(55)
s(116) =< aux(55)
s(123) =< aux(55)
s(116) =< aux(51)
s(123) =< aux(51)
s(115) =< aux(51)
s(86) =< aux(33)
s(85) =< aux(36)
s(86) =< aux(36)
s(100) =< aux(58)
s(100) =< aux(34)
s(100) =< s(92)
s(100) =< aux(56)
s(100) =< aux(37)
s(86) =< aux(37)
s(102) =< aux(37)
s(102) =< aux(36)
s(100) =< aux(36)
s(107) =< aux(33)
s(109) =< aux(33)
s(107) =< aux(36)
s(111) =< aux(36)
s(111) =< aux(33)
s(107) =< aux(37)
s(48) =< aux(52)
s(48) =< aux(59)
s(49) =< aux(59)
s(62) =< aux(59)
s(62) =< aux(61)
s(62) =< aux(29)
s(62) =< aux(51)
s(62) =< aux(55)
s(48) =< aux(55)
s(64) =< aux(55)
s(64) =< aux(52)
s(62) =< aux(52)
s(68) =< aux(52)
s(69) =< aux(59)
s(69) =< aux(52)
s(73) =< aux(52)
s(73) =< aux(59)
s(69) =< aux(55)
s(75) =< aux(59)
s(76) =< aux(59)
s(76) =< aux(60)
s(75) =< aux(54)
s(76) =< aux(54)
s(83) =< aux(54)
s(76) =< aux(52)
s(84) =< aux(52)
s(75) =< aux(60)
s(83) =< aux(60)
s(84) =< aux(54)
s(125) =< aux(60)
s(126) =< aux(60)
s(139) =< aux(59)
s(140) =< aux(59)
s(139) =< aux(57)
s(140) =< aux(57)
s(139) =< aux(45)
s(140) =< aux(45)
s(139) =< s(128)
s(125) =< s(128)
s(141) =< s(128)
s(125) =< aux(55)
s(141) =< aux(55)
s(139) =< aux(55)
s(140) =< aux(55)
s(146) =< aux(60)
s(146) =< aux(55)
s(152) =< aux(59)
s(153) =< aux(60)
s(152) =< s(155)
s(153) =< s(155)
s(160) =< s(155)
s(153) =< aux(55)
s(161) =< aux(55)
s(152) =< aux(49)
s(153) =< aux(49)
s(160) =< aux(49)
s(161) =< s(155)
s(152) =< aux(55)

  with precondition: [F=A,C=B,E=D,F>=0,E>=C] 

* Chain [29]: 1
  with precondition: [F=A,C=B,E=D,0>=F+1] 

* Chain [28]: 1
  with precondition: [F=A,C=B,E=D,F>=0,C>=E+1] 


#### Cost of chains of pyRinit(A,B,C,D,E,F,G):
* Chain [33]: 3
  with precondition: [0>=A+1] 

* Chain [32]: 1*s(162)+2*s(164)+4*s(165)+4*s(166)+2*s(167)+6*s(170)+4*s(175)+2*s(194)+8*s(195)+4*s(197)+2*s(199)+6*s(200)+4*s(201)+18*s(202)+5*s(203)+1*s(205)+4*s(206)+5*s(210)+1*s(211)+2*s(216)+4*s(217)+6
  Such that:s(162) =< -5*A-C+E
aux(63) =< -4*A-C+E
aux(64) =< -3*A-C+E
aux(65) =< -2*A-C+E
aux(66) =< -2*A-C/2+E/2
aux(67) =< -A-C+E
aux(68) =< -A-C/2+E/2
aux(69) =< -A-C/3+E/3
aux(70) =< -5/2*A-C/2+E/2
aux(71) =< -5/3*A-C/3+E/3
aux(72) =< -4/3*A-C/3+E/3
aux(73) =< -3/2*A-C/2+E/2
aux(74) =< -C+E
s(175) =< aux(63)
s(164) =< aux(66)
s(165) =< aux(68)
s(166) =< aux(69)
s(167) =< aux(70)
s(170) =< aux(72)
s(194) =< aux(65)
s(165) =< aux(65)
s(194) =< aux(66)
s(195) =< aux(67)
s(167) =< aux(71)
s(197) =< aux(73)
s(167) =< aux(64)
s(170) =< aux(66)
s(166) =< aux(73)
s(194) =< aux(63)
s(167) =< aux(67)
s(194) =< aux(67)
s(199) =< aux(67)
s(194) =< aux(64)
s(199) =< aux(64)
s(164) =< aux(63)
s(200) =< aux(65)
s(164) =< aux(65)
s(201) =< aux(64)
s(201) =< aux(70)
s(201) =< aux(71)
s(201) =< aux(67)
s(164) =< aux(67)
s(202) =< aux(67)
s(202) =< aux(65)
s(201) =< aux(65)
s(203) =< aux(63)
s(203) =< aux(65)
s(205) =< aux(65)
s(205) =< aux(63)
s(203) =< aux(67)
s(197) =< aux(65)
s(197) =< aux(64)
s(206) =< aux(64)
s(170) =< aux(64)
s(170) =< aux(67)
s(197) =< aux(67)
s(170) =< aux(65)
s(210) =< aux(64)
s(210) =< aux(65)
s(211) =< aux(65)
s(211) =< aux(64)
s(210) =< aux(67)
s(166) =< aux(64)
s(216) =< aux(64)
s(216) =< aux(73)
s(216) =< aux(69)
s(166) =< aux(74)
s(165) =< aux(74)
s(217) =< aux(74)
s(165) =< aux(67)
s(217) =< aux(67)
s(166) =< aux(67)
s(216) =< aux(67)

  with precondition: [A>=0,E>=C] 

* Chain [31]: 3
  with precondition: [A>=0,C>=E+1] 


Closed-form bounds of pyRinit(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [33] with precondition: [0>=A+1] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [32] with precondition: [A>=0,E>=C] 
    - Upper bound: -4*C+4*E+6+nat(-A-C+E)*28+nat(-A-C/2+E/2)*4+nat(-A-C/3+E/3)*4+nat(-5*A-C+E)+nat(-4*A-C+E)*9+nat(-3*A-C+E)*15+nat(-2*A-C+E)*10+nat(-2*A-C/2+E/2)*2+nat(-5/2*A-C/2+E/2)*2+nat(-4/3*A-C/3+E/3)*6+nat(-3/2*A-C/2+E/2)*4 
    - Complexity: n 
* Chain [31] with precondition: [A>=0,C>=E+1] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of pyRinit(A,B,C,D,E,F,G): nat(-C+E)*4+3+nat(-A-C+E)*28+nat(-A-C/2+E/2)*4+nat(-A-C/3+E/3)*4+nat(-5*A-C+E)+nat(-4*A-C+E)*9+nat(-3*A-C+E)*15+nat(-2*A-C+E)*10+nat(-2*A-C/2+E/2)*2+nat(-5/2*A-C/2+E/2)*2+nat(-4/3*A-C/3+E/3)*6+nat(-3/2*A-C/2+E/2)*4+3 
Asymptotic class: n 
* Total analysis performed in 1761 ms.


-- stats
realtime 0:01.97
usertime 1.88
systime 0.01

