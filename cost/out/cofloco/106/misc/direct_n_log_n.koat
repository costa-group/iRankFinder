WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_a___2/2]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [n_a___2_loop_cont/2]
3. non_recursive  : [n_a___1/2]
4. non_recursive  : [n_start/2]
5. non_recursive  : [pyRinit/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_a___2/2
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_a___1/2
4. SCC is partially evaluated into n_start/2
5. SCC is partially evaluated into pyRinit/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_a___2/2 
* CE 8 is refined into CE [9] 
* CE 7 is refined into CE [10] 
* CE 6 is refined into CE [11] 


### Cost equations --> "Loop" of n_a___2/2 
* CEs [10] --> Loop 7 
* CEs [11] --> Loop 8 
* CEs [9] --> Loop 9 

### Ranking functions of CR n_a___2(A,B) 
* RF of phase [7,8]: [A-1]

#### Partial ranking functions of CR n_a___2(A,B) 
* Partial RF of phase [7,8]:
  - RF of loop [7:1]:
    2/3*A-1
  - RF of loop [8:1]:
    A-1


### Specialization of cost equations n_a___1/2 
* CE 4 is refined into CE [12] 
* CE 5 is refined into CE [13] 


### Cost equations --> "Loop" of n_a___1/2 
* CEs [12,13] --> Loop 10 

### Ranking functions of CR n_a___1(A,B) 

#### Partial ranking functions of CR n_a___1(A,B) 


### Specialization of cost equations n_start/2 
* CE 2 is refined into CE [14] 
* CE 3 is refined into CE [15] 


### Cost equations --> "Loop" of n_start/2 
* CEs [14,15] --> Loop 11 

### Ranking functions of CR n_start(A,B) 

#### Partial ranking functions of CR n_start(A,B) 


### Specialization of cost equations pyRinit/2 
* CE 1 is refined into CE [16] 


### Cost equations --> "Loop" of pyRinit/2 
* CEs [16] --> Loop 12 

### Ranking functions of CR pyRinit(A,B) 

#### Partial ranking functions of CR pyRinit(A,B) 


Computing Bounds
=====================================

#### Cost of chains of n_a___2(A,B):
* Chain [[7,8],9]: 1*it(7)+1*it(8)+0
  Such that:it(7) =< 2/3*A
aux(3) =< A
it(7) =< aux(3)
it(8) =< aux(3)

  with precondition: [B=2,A>=2] 

* Chain [9]: 0
  with precondition: [B=2,2*A>=1] 


#### Cost of chains of n_a___1(A,B):
* Chain [10]: 2*s(5)+2*s(6)+1
  Such that:aux(4) =< A/2
aux(5) =< A/3
s(5) =< aux(5)
s(5) =< aux(4)
s(6) =< aux(4)

  with precondition: [A>=2] 


#### Cost of chains of n_start(A,B):
* Chain [11]: 2*s(12)+2*s(13)+1*s(15)+1*s(16)+2
  Such that:s(14) =< A
s(10) =< A/2
s(11) =< A/3
s(15) =< 2/3*A
s(15) =< s(14)
s(16) =< s(14)
s(12) =< s(11)
s(12) =< s(10)
s(13) =< s(10)

  with precondition: [A>=1] 


#### Cost of chains of pyRinit(A,B):
* Chain [12]: 1*s(20)+1*s(21)+2*s(22)+2*s(23)+3
  Such that:s(17) =< A
s(18) =< A/2
s(19) =< A/3
s(20) =< 2/3*A
s(20) =< s(17)
s(21) =< s(17)
s(22) =< s(19)
s(22) =< s(18)
s(23) =< s(18)

  with precondition: [A>=1] 


Closed-form bounds of pyRinit(A,B): 
-------------------------------------
* Chain [12] with precondition: [A>=1] 
    - Upper bound: 10/3*A+3 
    - Complexity: n 

### Maximum cost of pyRinit(A,B): 10/3*A+3 
Asymptotic class: n 
* Total analysis performed in 57 ms.


-- stats
realtime 0:00.10
usertime 0.08
systime 0.00

