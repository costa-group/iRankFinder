WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_cut___1/17]
1. recursive  : [n_cut___1_loop_cont/18,n_cut___3/17]
2. non_recursive  : [exit_location/1]
3. non_recursive  : [n_stop___2/9]
4. non_recursive  : [n_cut___3_loop_cont/10]
5. non_recursive  : [n_start___4/9]
6. non_recursive  : [n_start0/9]
7. non_recursive  : [pyRinit/9]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_cut___1/17
1. SCC is partially evaluated into n_cut___3/17
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_cut___3_loop_cont/10
5. SCC is partially evaluated into n_start___4/9
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into pyRinit/9

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_cut___1/17 
* CE 19 is refined into CE [20] 
* CE 18 is refined into CE [21] 
* CE 17 is refined into CE [22] 
* CE 16 is refined into CE [23] 
* CE 15 is refined into CE [24] 
* CE 14 is refined into CE [25] 


### Cost equations --> "Loop" of n_cut___1/17 
* CEs [24] --> Loop 17 
* CEs [25] --> Loop 18 
* CEs [20] --> Loop 19 
* CEs [21] --> Loop 20 
* CEs [22] --> Loop 21 
* CEs [23] --> Loop 22 

### Ranking functions of CR n_cut___1(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 
* RF of phase [17,18]: [G-1]

#### Partial ranking functions of CR n_cut___1(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 
* Partial RF of phase [17,18]:
  - RF of loop [17:1]:
    A-E-1 depends on loops [18:1] 
    D-E-1 depends on loops [18:1] 
  - RF of loop [17:1,18:1]:
    G-1
  - RF of loop [18:1]:
    A-2*B+E-3 depends on loops [17:1] 
    -2*B+D+E-3 depends on loops [17:1] 
    E-1 depends on loops [17:1] 


### Specialization of cost equations n_cut___3/17 
* CE 6 is refined into CE [26] 
* CE 11 is refined into CE [27] 
* CE 7 is refined into CE [28,29,30] 
* CE 10 is refined into CE [31] 
* CE 8 is refined into CE [32,33] 
* CE 9 is refined into CE [34] 


### Cost equations --> "Loop" of n_cut___3/17 
* CEs [33] --> Loop 23 
* CEs [34] --> Loop 24 
* CEs [32] --> Loop 25 
* CEs [26,27] --> Loop 26 
* CEs [30] --> Loop 27 
* CEs [28] --> Loop 28 
* CEs [31] --> Loop 29 
* CEs [29] --> Loop 30 

### Ranking functions of CR n_cut___3(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 
* RF of phase [23,24,25]: [G-1]

#### Partial ranking functions of CR n_cut___3(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 
* Partial RF of phase [23,24,25]:
  - RF of loop [23:1]:
    E/4+G/4-1
    G/3-1
  - RF of loop [24:1]:
    G-1
  - RF of loop [25:1]:
    G/2-1


### Specialization of cost equations n_cut___3_loop_cont/10 
* CE 13 is refined into CE [35] 
* CE 12 is refined into CE [36] 


### Cost equations --> "Loop" of n_cut___3_loop_cont/10 
* CEs [35] --> Loop 31 
* CEs [36] --> Loop 32 

### Ranking functions of CR n_cut___3_loop_cont(A,B,C,D,E,F,G,H,I,J) 

#### Partial ranking functions of CR n_cut___3_loop_cont(A,B,C,D,E,F,G,H,I,J) 


### Specialization of cost equations n_start___4/9 
* CE 2 is refined into CE [37,38,39,40,41] 
* CE 3 is refined into CE [42,43,44,45] 
* CE 4 is refined into CE [46] 
* CE 5 is refined into CE [47] 


### Cost equations --> "Loop" of n_start___4/9 
* CEs [46] --> Loop 33 
* CEs [39] --> Loop 34 
* CEs [37,38,40,41,42,43,44,45] --> Loop 35 
* CEs [47] --> Loop 36 

### Ranking functions of CR n_start___4(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR n_start___4(A,B,C,D,E,F,G,H,I) 


### Specialization of cost equations pyRinit/9 
* CE 1 is refined into CE [48,49,50] 


### Cost equations --> "Loop" of pyRinit/9 
* CEs [49] --> Loop 37 
* CEs [50] --> Loop 38 
* CEs [48] --> Loop 39 

### Ranking functions of CR pyRinit(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR pyRinit(A,B,C,D,E,F,G,H,I) 


Computing Bounds
=====================================

#### Cost of chains of n_cut___1(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q):
* Chain [[17,18],22]: 2*it(17)+1
  Such that:aux(19) =< G
aux(20) =< G-P
it(17) =< aux(19)
it(17) =< aux(20)

  with precondition: [I=2,N=0,A=D,A=J,C=L,A=M,F=O,H=Q,E>=1,P>=1,B+1>=E,G>=E+P,E+G>=P+4,A+E>=2*B+G+2,A+E>=B+G+3,G+2*B>=2*K+E+P] 

* Chain [[17,18],21]: 2*it(17)+1
  Such that:aux(21) =< G
it(17) =< aux(21)

  with precondition: [I=3,A=D,E>=1,G>=2,B+1>=E,A+E>=2*B+G+2,A+E>=B+G+3] 

* Chain [[17,18],20]: 2*it(17)+1
  Such that:aux(22) =< G
it(17) =< aux(22)

  with precondition: [I=3,A=D,E>=1,G>=2,B+1>=E,A+E>=2*B+G+2,A+E>=B+G+3] 

* Chain [[17,18],19]: 2*it(17)+0
  Such that:aux(23) =< G
it(17) =< aux(23)

  with precondition: [I=4,A=D,E>=1,G>=2,B+1>=E,A+E>=2*B+G+2,A+E>=B+G+3] 

* Chain [22]: 1
  with precondition: [E=1,I=2,N=0,D=A,L=C,O=F,Q=H,D=J,B=K,D=M,G=P+1,B>=0,G>=2,D>=2*B+G+1,D>=B+G+2] 

* Chain [21]: 1
  with precondition: [G=1,I=3,D=A,E>=1,B+1>=E,D>=E+2,D+E>=2*B+3,D+E>=B+4] 

* Chain [20]: 1
  with precondition: [G=1,I=3,D=A,E>=2,B+1>=E,D+E>=2*B+3] 

* Chain [19]: 0
  with precondition: [I=4,D=A,E>=1,G>=1,B+1>=E,D+E>=2*B+G+2,D+E>=B+G+3] 


#### Cost of chains of n_cut___3(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q):
* Chain [[23,24,25],29]: 2*it(23)+1*it(24)+2*it(25)+2*s(13)+1
  Such that:it(23) =< E/4+G/4
it(25) =< G/2
aux(28) =< G
it(23) =< aux(28)
it(24) =< aux(28)
it(25) =< aux(28)
s(15) =< it(23)*aux(28)
s(13) =< s(15)
s(13) =< aux(28)

  with precondition: [I=3,A=D,1>=E,E>=0,G>=2,A>=G+1] 

* Chain [[23,24,25],28]: 2*it(23)+1*it(24)+2*it(25)+2*s(13)+2
  Such that:it(23) =< E/4+G/4
it(25) =< G/2
aux(29) =< G
it(23) =< aux(29)
it(24) =< aux(29)
it(25) =< aux(29)
s(15) =< it(23)*aux(29)
s(13) =< s(15)
s(13) =< aux(29)

  with precondition: [I=3,A=D,1>=E,E>=0,G>=3,A>=G+1] 

* Chain [[23,24,25],27]: 2*it(23)+7*it(24)+2*s(13)+2
  Such that:it(23) =< E+G
aux(30) =< G
it(24) =< aux(30)
it(23) =< aux(30)
s(15) =< it(23)*aux(30)
s(13) =< s(15)
s(13) =< aux(30)

  with precondition: [I=3,A=D,1>=E,E>=0,G>=4,A>=G+1] 

* Chain [[23,24,25],26]: 2*it(23)+5*it(24)+2*s(13)+1
  Such that:it(23) =< E+G
aux(31) =< G
it(24) =< aux(31)
it(23) =< aux(31)
s(15) =< it(23)*aux(31)
s(13) =< s(15)
s(13) =< aux(31)

  with precondition: [I=4,A=D,1>=E,E>=0,G>=2,A>=G+1] 

* Chain [30]: 2
  with precondition: [A=3,D=3,E=1,G=2,I=3] 

* Chain [29]: 1
  with precondition: [G=1,I=3,D=A,1>=E,D>=2,E>=0] 

* Chain [28]: 2
  with precondition: [G=2,I=3,D=A,1>=E,E>=0,D>=E+3] 

* Chain [27]: 4*s(17)+2
  Such that:s(16) =< G
s(17) =< s(16)

  with precondition: [I=3,D=A,1>=E,E>=0,G>=3,D>=G+1] 

* Chain [26]: 2*s(19)+1
  Such that:s(18) =< G
s(19) =< s(18)

  with precondition: [I=4,A=D,1>=E,E>=0,G>=1,A>=G+1] 


#### Cost of chains of n_cut___3_loop_cont(A,B,C,D,E,F,G,H,I,J):
* Chain [32]: 0
  with precondition: [A=3] 

* Chain [31]: 0
  with precondition: [A=4] 


#### Cost of chains of n_start___4(A,B,C,D,E,F,G,H,I):
* Chain [36]: 1
  with precondition: [A=1,D=1,C=B,F=E,H=G] 

* Chain [35]: 40*s(44)+8*s(48)+8*s(49)+8*s(52)+8*s(54)+8*s(56)+3
  Such that:aux(40) =< A
aux(41) =< D
aux(42) =< D/2
aux(43) =< D/4
s(56) =< aux(40)
s(44) =< aux(41)
s(51) =< s(44)*aux(41)
s(52) =< s(51)
s(52) =< aux(41)
s(48) =< aux(43)
s(49) =< aux(42)
s(48) =< aux(41)
s(49) =< aux(41)
s(53) =< s(48)*aux(41)
s(54) =< s(53)
s(54) =< aux(41)

  with precondition: [D=A,C=B,F=E,H=G,D>=2] 

* Chain [34]: 3
  with precondition: [A=3,D=3,C=B,F=E,H=G] 

* Chain [33]: 1
  with precondition: [D=A,C=B,F=E,H=G,0>=D] 


#### Cost of chains of pyRinit(A,B,C,D,E,F,G,H,I):
* Chain [39]: 3
  with precondition: [A=1] 

* Chain [38]: 3
  with precondition: [0>=A] 

* Chain [37]: 48*s(96)+8*s(99)+8*s(100)+8*s(101)+8*s(103)+5
  Such that:s(94) =< A/2
s(95) =< A/4
aux(44) =< A
s(96) =< aux(44)
s(98) =< s(96)*aux(44)
s(99) =< s(98)
s(99) =< aux(44)
s(100) =< s(95)
s(101) =< s(94)
s(100) =< aux(44)
s(101) =< aux(44)
s(102) =< s(100)*aux(44)
s(103) =< s(102)
s(103) =< aux(44)

  with precondition: [A>=2] 


Closed-form bounds of pyRinit(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [39] with precondition: [A=1] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [38] with precondition: [0>=A] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [37] with precondition: [A>=2] 
    - Upper bound: 70*A+5 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C,D,E,F,G,H,I): nat(A)*64+2+nat(A/2)*8+nat(A/4)*8+3 
Asymptotic class: n 
* Total analysis performed in 1574 ms.


-- stats
realtime 0:01.74
usertime 1.63
systime 0.02

