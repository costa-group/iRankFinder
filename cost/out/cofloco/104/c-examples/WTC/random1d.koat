WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_evalrandom1dbb1in___2/5,n_evalrandom1dbb5in___1/5]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [n_evalrandom1dstop___3/3]
3. non_recursive  : [n_evalrandom1dbb1in___2_loop_cont/4]
4. non_recursive  : [n_evalrandom1dbb5in___4/3]
5. non_recursive  : [n_evalrandom1dentryin___5/3]
6. non_recursive  : [n_evalrandom1dstart/3]
7. non_recursive  : [pyRinit/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_evalrandom1dbb1in___2/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_evalrandom1dbb1in___2_loop_cont/4
4. SCC is partially evaluated into n_evalrandom1dbb5in___4/3
5. SCC is partially evaluated into n_evalrandom1dentryin___5/3
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into pyRinit/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalrandom1dbb1in___2/5 
* CE 5 is refined into CE [10] 
* CE 7 is refined into CE [11] 
* CE 6 is refined into CE [12] 


### Cost equations --> "Loop" of n_evalrandom1dbb1in___2/5 
* CEs [12] --> Loop 10 
* CEs [10] --> Loop 11 
* CEs [11] --> Loop 12 

### Ranking functions of CR n_evalrandom1dbb1in___2(A,B,C,D,E) 
* RF of phase [10]: [A-B]

#### Partial ranking functions of CR n_evalrandom1dbb1in___2(A,B,C,D,E) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    A-B


### Specialization of cost equations n_evalrandom1dbb1in___2_loop_cont/4 
* CE 9 is refined into CE [13] 
* CE 8 is refined into CE [14] 


### Cost equations --> "Loop" of n_evalrandom1dbb1in___2_loop_cont/4 
* CEs [13] --> Loop 13 
* CEs [14] --> Loop 14 

### Ranking functions of CR n_evalrandom1dbb1in___2_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR n_evalrandom1dbb1in___2_loop_cont(A,B,C,D) 


### Specialization of cost equations n_evalrandom1dbb5in___4/3 
* CE 4 is refined into CE [15,16,17] 


### Cost equations --> "Loop" of n_evalrandom1dbb5in___4/3 
* CEs [15,16,17] --> Loop 15 

### Ranking functions of CR n_evalrandom1dbb5in___4(A,B,C) 

#### Partial ranking functions of CR n_evalrandom1dbb5in___4(A,B,C) 


### Specialization of cost equations n_evalrandom1dentryin___5/3 
* CE 2 is refined into CE [18] 
* CE 3 is refined into CE [19] 


### Cost equations --> "Loop" of n_evalrandom1dentryin___5/3 
* CEs [18] --> Loop 16 
* CEs [19] --> Loop 17 

### Ranking functions of CR n_evalrandom1dentryin___5(A,B,C) 

#### Partial ranking functions of CR n_evalrandom1dentryin___5(A,B,C) 


### Specialization of cost equations pyRinit/3 
* CE 1 is refined into CE [20,21] 


### Cost equations --> "Loop" of pyRinit/3 
* CEs [21] --> Loop 18 
* CEs [20] --> Loop 19 

### Ranking functions of CR pyRinit(A,B,C) 

#### Partial ranking functions of CR pyRinit(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of n_evalrandom1dbb1in___2(A,B,C,D,E):
* Chain [[10],12]: 2*it(10)+0
  Such that:it(10) =< A-B

  with precondition: [C=2,B>=1,A>=B+1] 

* Chain [[10],11]: 2*it(10)+2
  Such that:it(10) =< A-B

  with precondition: [C=3,B>=1,A>=B+1] 

* Chain [12]: 0
  with precondition: [C=2,B>=1,A>=B] 

* Chain [11]: 2
  with precondition: [C=3,B=A,B>=1] 


#### Cost of chains of n_evalrandom1dbb1in___2_loop_cont(A,B,C,D):
* Chain [14]: 0
  with precondition: [A=2] 

* Chain [13]: 0
  with precondition: [A=3] 


#### Cost of chains of n_evalrandom1dbb5in___4(A,B,C):
* Chain [15]: 4*s(2)+3
  Such that:aux(1) =< A
s(2) =< aux(1)

  with precondition: [B=1,A>=1] 


#### Cost of chains of n_evalrandom1dentryin___5(A,B,C):
* Chain [17]: 1
  with precondition: [0>=A] 

* Chain [16]: 4*s(5)+4
  Such that:s(4) =< A
s(5) =< s(4)

  with precondition: [A>=1] 


#### Cost of chains of pyRinit(A,B,C):
* Chain [19]: 3
  with precondition: [0>=A] 

* Chain [18]: 4*s(7)+6
  Such that:s(6) =< A
s(7) =< s(6)

  with precondition: [A>=1] 


Closed-form bounds of pyRinit(A,B,C): 
-------------------------------------
* Chain [19] with precondition: [0>=A] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [18] with precondition: [A>=1] 
    - Upper bound: 4*A+6 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C): nat(A)*4+3+3 
Asymptotic class: n 
* Total analysis performed in 86 ms.


-- stats
realtime 0:00.12
usertime 0.12
systime 0.00

