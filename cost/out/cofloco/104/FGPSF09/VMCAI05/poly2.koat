MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval___1/4]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [n_eval___1_loop_cont/2]
3. non_recursive  : [n_start/4]
4. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval___1/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_start/4
4. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval___1/4 
* CE 5 is refined into CE [6] 
* CE 3 is refined into CE [7] 
* CE 4 is refined into CE [8] 


### Cost equations --> "Loop" of n_eval___1/4 
* CEs [7] --> Loop 6 
* CEs [8] --> Loop 7 
* CEs [6] --> Loop 8 

### Ranking functions of CR n_eval___1(A,B,C,D) 

#### Partial ranking functions of CR n_eval___1(A,B,C,D) 


### Specialization of cost equations n_start/4 
* CE 2 is refined into CE [9,10] 


### Cost equations --> "Loop" of n_start/4 
* CEs [10] --> Loop 9 
* CEs [9] --> Loop 10 

### Ranking functions of CR n_start(A,B,C,D) 

#### Partial ranking functions of CR n_start(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [11,12] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [12] --> Loop 11 
* CEs [11] --> Loop 12 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_eval___1(A,B,C,D):
* Chain [[6,7]]...: 2*it(6)+0
  with precondition: [A>=0,D=2] 

* Chain [[6,7],8]: 2*it(6)+0
  with precondition: [D=2,A>=0] 

* Chain [8]: 0
  with precondition: [D=2] 


#### Cost of chains of n_start(A,B,C,D):
* Chain [10]: 1*s(2)+1
  with precondition: [] 

* Chain [9]...: 2*s(3)+1
  with precondition: [A>=0] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [12]: 1*s(4)+2
  with precondition: [] 

* Chain [11]...: 2*s(5)+2
  with precondition: [A>=0] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [12] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [11]... with precondition: [A>=0] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of pyRinit(A,B,C,D): inf 
Asymptotic class: infinity 
* Total analysis performed in 36 ms.


-- stats
realtime 0:00.08
usertime 0.05
systime 0.00

