MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval___2/7]
1. recursive  : [n_eval___1/4,n_eval___2_loop_cont/5]
2. non_recursive  : [exit_location/1]
3. non_recursive  : [n_eval___1_loop_cont/2]
4. non_recursive  : [n_eval___3/4]
5. non_recursive  : [n_start/4]
6. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval___2/7
1. SCC is partially evaluated into n_eval___1/4
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_eval___3/4
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval___2/7 
* CE 7 is refined into CE [12] 
* CE 5 is refined into CE [13] 
* CE 6 is refined into CE [14] 


### Cost equations --> "Loop" of n_eval___2/7 
* CEs [14] --> Loop 8 
* CEs [12] --> Loop 9 
* CEs [13] --> Loop 10 

### Ranking functions of CR n_eval___2(A,B,C,D,E,F,G) 
* RF of phase [8]: [A+1]

#### Partial ranking functions of CR n_eval___2(A,B,C,D,E,F,G) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    A+1


### Specialization of cost equations n_eval___1/4 
* CE 8 is refined into CE [15] 
* CE 11 is refined into CE [16] 
* CE 9 is refined into CE [17,18] 
* CE 10 is refined into CE [19] 


### Cost equations --> "Loop" of n_eval___1/4 
* CEs [18] --> Loop 11 
* CEs [19] --> Loop 12 
* CEs [17] --> Loop 13 
* CEs [15,16] --> Loop 14 

### Ranking functions of CR n_eval___1(A,B,C,D) 

#### Partial ranking functions of CR n_eval___1(A,B,C,D) 
* Partial RF of phase [11,12,13]:
  - RF of loop [11:1]:
    A/2-1/2
  - RF of loop [13:1]:
    A


### Specialization of cost equations n_eval___3/4 
* CE 2 is refined into CE [20] 
* CE 3 is refined into CE [21,22,23,24] 
* CE 4 is refined into CE [25,26] 


### Cost equations --> "Loop" of n_eval___3/4 
* CEs [22,24,26] --> Loop 15 
* CEs [20,21,23,25] --> Loop 16 

### Ranking functions of CR n_eval___3(A,B,C,D) 

#### Partial ranking functions of CR n_eval___3(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [27,28] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [28] --> Loop 17 
* CEs [27] --> Loop 18 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_eval___2(A,B,C,D,E,F,G):
* Chain [[8],10]: 1*it(8)+1
  Such that:it(8) =< C-G

  with precondition: [D=2,A+G+1=C+E,A+F=B+C+E,E>=0,A>=E+1] 

* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< A+1

  with precondition: [D=3,A>=0] 

* Chain [10]: 1
  with precondition: [D=2,A=E,C=G+1,B+C=F,A>=0] 

* Chain [9]: 0
  with precondition: [D=3,A+1>=0] 


#### Cost of chains of n_eval___1(A,B,C,D):
* Chain [[11,12,13]]...: 2*it(11)+1*it(12)+2*it(13)+1*s(4)+0
  Such that:it(13) =< A
it(11) =< A/2
aux(3) =< 3/2*A
it(13) =< aux(3)
s(4) =< aux(3)

  with precondition: [A>=0,D=3] 

* Chain [[11,12,13],14]: 3*it(11)+1*it(12)+2*it(13)+1*s(4)+1
  Such that:aux(2) =< 3*A
aux(1) =< 3/2*A
aux(4) =< A
it(11) =< aux(4)
it(13) =< aux(4)
it(13) =< aux(1)
s(4) =< aux(1)
it(13) =< aux(2)
s(4) =< aux(2)

  with precondition: [D=3,A>=0] 

* Chain [14]: 1*s(5)+1
  Such that:s(5) =< A

  with precondition: [D=3] 


#### Cost of chains of n_eval___3(A,B,C,D):
* Chain [16]: 13*s(14)+4*s(19)+2*s(20)+3*s(21)+2*s(22)+2*s(27)+3
  Such that:aux(7) =< A
aux(8) =< 3*A
aux(9) =< 3/2*A
s(14) =< aux(7)
s(19) =< aux(7)
s(19) =< aux(9)
s(20) =< aux(9)
s(19) =< aux(8)
s(20) =< aux(8)
s(22) =< aux(8)
s(27) =< aux(7)
s(27) =< aux(8)

  with precondition: [A>=0] 

* Chain [15]...: 4*s(37)+4*s(38)+2*s(40)+3*s(41)+3*s(42)+2*s(43)+1*s(46)+2
  Such that:s(45) =< 3*A
aux(11) =< A
aux(12) =< A/2
aux(13) =< 3/2*A
s(37) =< aux(11)
s(38) =< aux(12)
s(37) =< aux(13)
s(40) =< aux(13)
s(42) =< aux(11)
s(43) =< aux(11)
s(43) =< s(45)
s(46) =< s(45)

  with precondition: [A>=0] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [18]: 13*s(56)+4*s(57)+2*s(58)+2*s(59)+2*s(60)+3*s(61)+5
  Such that:s(53) =< A
s(54) =< 3*A
s(55) =< 3/2*A
s(56) =< s(53)
s(57) =< s(53)
s(57) =< s(55)
s(58) =< s(55)
s(57) =< s(54)
s(58) =< s(54)
s(59) =< s(54)
s(60) =< s(53)
s(60) =< s(54)

  with precondition: [A>=0] 

* Chain [17]...: 4*s(66)+4*s(67)+2*s(68)+3*s(69)+2*s(70)+1*s(71)+3*s(72)+4
  Such that:s(63) =< A
s(62) =< 3*A
s(64) =< A/2
s(65) =< 3/2*A
s(66) =< s(63)
s(67) =< s(64)
s(66) =< s(65)
s(68) =< s(65)
s(69) =< s(63)
s(70) =< s(63)
s(70) =< s(62)
s(71) =< s(62)

  with precondition: [A>=0] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [18] with precondition: [A>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [17]... with precondition: [A>=0] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of pyRinit(A,B,C,D): inf 
Asymptotic class: infinity 
* Total analysis performed in 216 ms.


-- stats
realtime 0:00.31
usertime 0.26
systime 0.00

