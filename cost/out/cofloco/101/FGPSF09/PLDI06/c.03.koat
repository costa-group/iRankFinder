WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval___2/7]
1. non_recursive  : [exit_location/1]
2. recursive  : [n_eval___1/4,n_eval___3/4]
3. non_recursive  : [n_eval___3_loop_cont/2]
4. non_recursive  : [n_eval___2_loop_cont/5]
5. non_recursive  : [n_eval___4/4]
6. non_recursive  : [n_start/4]
7. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval___2/7
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into n_eval___3/4
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_eval___2_loop_cont/5
5. SCC is partially evaluated into n_eval___4/4
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval___2/7 
* CE 5 is refined into CE [12] 
* CE 6 is refined into CE [13] 
* CE 4 is refined into CE [14] 


### Cost equations --> "Loop" of n_eval___2/7 
* CEs [14] --> Loop 12 
* CEs [12] --> Loop 13 
* CEs [13] --> Loop 14 

### Ranking functions of CR n_eval___2(A,B,C,D,E,F,G) 
* RF of phase [12]: [A-C,B-C+1]

#### Partial ranking functions of CR n_eval___2(A,B,C,D,E,F,G) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    A-C
    B-C+1


### Specialization of cost equations n_eval___3/4 
* CE 11 is refined into CE [15] 
* CE 10 is refined into CE [16] 
* CE 9 is refined into CE [17] 


### Cost equations --> "Loop" of n_eval___3/4 
* CEs [16] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [15] --> Loop 17 

### Ranking functions of CR n_eval___3(A,B,C,D) 
* RF of phase [15]: [A-B,-B+C]
* RF of phase [16]: [A-B,A-C]

#### Partial ranking functions of CR n_eval___3(A,B,C,D) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    A-B
    -B+C
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    A-B
    A-C


### Specialization of cost equations n_eval___2_loop_cont/5 
* CE 7 is refined into CE [18] 
* CE 8 is refined into CE [19] 


### Cost equations --> "Loop" of n_eval___2_loop_cont/5 
* CEs [18] --> Loop 18 
* CEs [19] --> Loop 19 

### Ranking functions of CR n_eval___2_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR n_eval___2_loop_cont(A,B,C,D,E) 


### Specialization of cost equations n_eval___4/4 
* CE 2 is refined into CE [20,21,22] 
* CE 3 is refined into CE [23] 


### Cost equations --> "Loop" of n_eval___4/4 
* CEs [23] --> Loop 20 
* CEs [20,21,22] --> Loop 21 

### Ranking functions of CR n_eval___4(A,B,C,D) 

#### Partial ranking functions of CR n_eval___4(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [24,25] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [25] --> Loop 22 
* CEs [24] --> Loop 23 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_eval___2(A,B,C,D,E,F,G):
* Chain [[12],14]: 1*it(12)+0
  Such that:it(12) =< B-C+1

  with precondition: [D=2,A>=B+1,B>=C] 

* Chain [[12],13]: 1*it(12)+1
  Such that:it(12) =< -C+F

  with precondition: [D=3,A=E,B+1=F,B+1=G,A>=B+1,B>=C] 

* Chain [14]: 0
  with precondition: [D=2,A>=B+1,B+1>=C] 

* Chain [13]: 1
  with precondition: [D=3,B+1=C,A=E,B+1=F,B+1=G,A>=B+1] 


#### Cost of chains of n_eval___3(A,B,C,D):
* Chain [[16],17]: 2*it(16)+0
  Such that:it(16) =< A-C

  with precondition: [D=2,B=C,A>=B+1] 

* Chain [[15],[16],17]: 1*it(15)+2*it(16)+0
  Such that:it(16) =< A-C
it(15) =< -B+C

  with precondition: [D=2,C>=B+1,A>=C+1] 

* Chain [[15],17]: 1*it(15)+0
  Such that:it(15) =< -B+C

  with precondition: [D=2,A>=B+1,C>=B+1] 

* Chain [17]: 0
  with precondition: [D=2] 


#### Cost of chains of n_eval___2_loop_cont(A,B,C,D,E):
* Chain [19]: 0
  with precondition: [A=2] 

* Chain [18]: 4*s(8)+2*s(9)+0
  Such that:s(6) =< B-D
s(7) =< -C+D
s(8) =< s(6)
s(9) =< s(7)

  with precondition: [A=3] 


#### Cost of chains of n_eval___4(A,B,C,D):
* Chain [21]: 2*s(10)+4*s(13)+4*s(18)+2
  Such that:s(16) =< A-B
s(11) =< A-C
aux(3) =< B-C
s(10) =< aux(3)
s(18) =< s(16)
s(13) =< s(11)

  with precondition: [A>=B+1,B>=C] 

* Chain [20]: 4*s(22)+2*s(23)+1
  Such that:s(20) =< A-C
s(21) =< -B+C
s(22) =< s(20)
s(23) =< s(21)

  with precondition: [A>=B+1,C>=B+1] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [23]: 4*s(26)+2*s(27)+3
  Such that:s(24) =< A-C
s(25) =< -B+C
s(26) =< s(24)
s(27) =< s(25)

  with precondition: [A>=B+1,C>=B+1] 

* Chain [22]: 2*s(31)+4*s(32)+4*s(33)+4
  Such that:s(28) =< A-B
s(29) =< A-C
s(30) =< B-C
s(31) =< s(30)
s(32) =< s(28)
s(33) =< s(29)

  with precondition: [A>=B+1,B>=C] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [23] with precondition: [A>=B+1,C>=B+1] 
    - Upper bound: -2*B+2*C+3+nat(A-C)*4 
    - Complexity: n 
* Chain [22] with precondition: [A>=B+1,B>=C] 
    - Upper bound: 8*A-2*B-6*C+4 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C,D): nat(A-C)*4+3+max([nat(-B+C)*2,4*A-4*B+1+nat(B-C)*2]) 
Asymptotic class: n 
* Total analysis performed in 204 ms.


-- stats
realtime 0:00.26
usertime 0.24
systime 0.00

