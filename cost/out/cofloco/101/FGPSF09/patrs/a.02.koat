MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval___1/5]
1. recursive  : [n_eval___1_loop_cont/4,n_eval___2/3,n_eval___3/3]
2. non_recursive  : [exit_location/1]
3. non_recursive  : [n_eval___2_loop_cont/2]
4. non_recursive  : [n_eval___4/3]
5. non_recursive  : [n_start/3]
6. non_recursive  : [pyRinit/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval___1/5
1. SCC is partially evaluated into n_eval___2/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_eval___4/3
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into pyRinit/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval___1/5 
* CE 8 is refined into CE [14] 
* CE 7 is refined into CE [15] 
* CE 6 is refined into CE [16] 


### Cost equations --> "Loop" of n_eval___1/5 
* CEs [16] --> Loop 9 
* CEs [14] --> Loop 10 
* CEs [15] --> Loop 11 

### Ranking functions of CR n_eval___1(A,B,C,D,E) 

#### Partial ranking functions of CR n_eval___1(A,B,C,D,E) 


### Specialization of cost equations n_eval___2/3 
* CE 9 is refined into CE [17,18] 
* CE 13 is refined into CE [19] 
* CE 10 is refined into CE [20,21] 
* CE 11 is refined into CE [22] 
* CE 12 is refined into CE [23] 


### Cost equations --> "Loop" of n_eval___2/3 
* CEs [22] --> Loop 12 
* CEs [20] --> Loop 13 
* CEs [23] --> Loop 14 
* CEs [21] --> Loop 15 
* CEs [17,19] --> Loop 16 
* CEs [18] --> Loop 17 

### Ranking functions of CR n_eval___2(A,B,C) 

#### Partial ranking functions of CR n_eval___2(A,B,C) 
* Partial RF of phase [12,13,14,15]:
  - RF of loop [12:1]:
    2*B-6 depends on loops [15:1] 
  - RF of loop [12:1,13:1]:
    -A+2*B-6 depends on loops [15:1] 
  - RF of loop [13:1]:
    -2/5*A+2*B-49/5 depends on loops [15:1] 
    2*B-9 depends on loops [15:1] 
  - RF of loop [14:1]:
    -2*A+2*B-1 depends on loops [12:1,13:1,15:1] 
    2*A+2*B-3 depends on loops [12:1,13:1,15:1] 
    2*B-2 depends on loops [15:1] 


### Specialization of cost equations n_eval___4/3 
* CE 2 is refined into CE [24,25] 
* CE 3 is refined into CE [26,27,28,29,30,31] 
* CE 4 is refined into CE [32,33,34] 
* CE 5 is refined into CE [35,36,37] 


### Cost equations --> "Loop" of n_eval___4/3 
* CEs [37] --> Loop 18 
* CEs [34] --> Loop 19 
* CEs [25,27,28,29,30,31,33,36] --> Loop 20 
* CEs [24,26,32,35] --> Loop 21 

### Ranking functions of CR n_eval___4(A,B,C) 

#### Partial ranking functions of CR n_eval___4(A,B,C) 


### Specialization of cost equations pyRinit/3 
* CE 1 is refined into CE [38,39,40,41] 


### Cost equations --> "Loop" of pyRinit/3 
* CEs [41] --> Loop 22 
* CEs [39,40] --> Loop 23 
* CEs [38] --> Loop 24 

### Ranking functions of CR pyRinit(A,B,C) 

#### Partial ranking functions of CR pyRinit(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of n_eval___1(A,B,C,D,E):
* Chain [[9]]...: 1*it(9)+0
  with precondition: [9*A>=4*B+16,B>=A+1,C>=2,3>=C] 

* Chain [[9],11]: 1*it(9)+1
  with precondition: [C=2,9*A>=4*B+16,B>=A+1,B>=D+1,B+D>=2*E,3*E>=B+D+1] 

* Chain [[9],10]: 1*it(9)+0
  with precondition: [C=3,9*A>=4*B+16,B>=A+1] 

* Chain [11]: 1
  with precondition: [C=2,A=D,9*A>=4*B+16,B>=A+1,A+B>=2*E,3*E>=A+B+1] 

* Chain [10]: 0
  with precondition: [C=3,2*B>=7,9*A>=4*B+16,2*B+1>=2*A] 


#### Cost of chains of n_eval___2(A,B,C):
* Chain [[12,13,14,15]]...: 9*it(12)+0
  with precondition: [A+B>=2,B>=A+1,A>=0,C=3] 

* Chain [[12,13,14,15],17]...: 10*it(12)+2
  with precondition: [C=3,A>=0,B>=A+1,5*B>=A+25] 

* Chain [[12,13,14,15],16]: 10*aux(7)+0
  with precondition: [C=3,A>=0,B>=A+1,A+B>=2] 

* Chain [17]...: 1*s(9)+2
  with precondition: [C=3,A>=0,B>=A+1,5*B>=A+25] 

* Chain [16]: 1*aux(7)+0
  with precondition: [C=3] 


#### Cost of chains of n_eval___4(A,B,C):
* Chain [21]: 1*aux(10)+0
  with precondition: [A>=0,B>=A+1,A+B>=2] 

* Chain [20]...: 1*aux(11)+0
  with precondition: [A>=0,B>=A+1,5*B>=A+25] 

* Chain [19]...: 9*s(33)+2
  with precondition: [A>=0,B>=A+1,2*B>=A+10] 

* Chain [18]...: 9*s(34)+1
  with precondition: [A>=0,B>=A+2,B+3*A>=4] 


#### Cost of chains of pyRinit(A,B,C):
* Chain [24]: 1*s(35)+2
  with precondition: [A>=0,B>=A+1,A+B>=2] 

* Chain [23]...: 1*aux(12)+0
  with precondition: [A>=0,B>=A+1,5*B>=A+25] 

* Chain [22]...: 9*s(38)+3
  with precondition: [A>=0,B>=A+2,B+3*A>=4] 


Closed-form bounds of pyRinit(A,B,C): 
-------------------------------------
* Chain [24] with precondition: [A>=0,B>=A+1,A+B>=2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [23]... with precondition: [A>=0,B>=A+1,5*B>=A+25] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [22]... with precondition: [A>=0,B>=A+2,B+3*A>=4] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of pyRinit(A,B,C): inf 
Asymptotic class: infinity 
* Total analysis performed in 344 ms.


-- stats
realtime 0:00.39
usertime 0.38
systime 0.00

