WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval1___4/4,n_eval2___1/4]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [n_eval1___4_loop_cont/2]
3. recursive  : [n_eval1___6/7,n_eval2___3/7]
4. recursive  : [n_eval1___5/7,n_eval1___6_loop_cont/8,n_eval2___2/7]
5. non_recursive  : [n_eval1___5_loop_cont/5]
6. non_recursive  : [n_eval2___7/4]
7. non_recursive  : [n_eval1___8/4]
8. non_recursive  : [n_start/4]
9. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval1___4/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_eval1___6/7
4. SCC is partially evaluated into n_eval1___5/7
5. SCC is partially evaluated into n_eval1___5_loop_cont/5
6. SCC is partially evaluated into n_eval2___7/4
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval1___4/4 
* CE 17 is refined into CE [18] 
* CE 16 is refined into CE [19] 


### Cost equations --> "Loop" of n_eval1___4/4 
* CEs [19] --> Loop 14 
* CEs [18] --> Loop 15 

### Ranking functions of CR n_eval1___4(A,B,C,D) 
* RF of phase [14]: [A-B]

#### Partial ranking functions of CR n_eval1___4(A,B,C,D) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    A-B


### Specialization of cost equations n_eval1___6/7 
* CE 7 is refined into CE [20] 
* CE 8 is refined into CE [21] 
* CE 6 is refined into CE [22] 


### Cost equations --> "Loop" of n_eval1___6/7 
* CEs [22] --> Loop 16 
* CEs [20] --> Loop 17 
* CEs [21] --> Loop 18 

### Ranking functions of CR n_eval1___6(A,B,C,D,E,F,G) 
* RF of phase [16]: [A-B]

#### Partial ranking functions of CR n_eval1___6(A,B,C,D,E,F,G) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    A-B


### Specialization of cost equations n_eval1___5/7 
* CE 10 is refined into CE [23] 
* CE 11 is refined into CE [24] 
* CE 13 is refined into CE [25] 
* CE 9 is refined into CE [26] 
* CE 12 is refined into CE [27,28] 


### Cost equations --> "Loop" of n_eval1___5/7 
* CEs [26] --> Loop 19 
* CEs [28] --> Loop 20 
* CEs [27] --> Loop 21 
* CEs [23] --> Loop 22 
* CEs [24,25] --> Loop 23 

### Ranking functions of CR n_eval1___5(A,B,C,D,E,F,G) 
* RF of phase [19,20,21]: [A-C]

#### Partial ranking functions of CR n_eval1___5(A,B,C,D,E,F,G) 
* Partial RF of phase [19,20,21]:
  - RF of loop [19:1,20:1,21:1]:
    A-C
  - RF of loop [20:1]:
    A/2-B/2-1
  - RF of loop [21:1]:
    A-B-1


### Specialization of cost equations n_eval1___5_loop_cont/5 
* CE 15 is refined into CE [29] 
* CE 14 is refined into CE [30] 


### Cost equations --> "Loop" of n_eval1___5_loop_cont/5 
* CEs [29] --> Loop 24 
* CEs [30] --> Loop 25 

### Ranking functions of CR n_eval1___5_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR n_eval1___5_loop_cont(A,B,C,D,E) 


### Specialization of cost equations n_eval2___7/4 
* CE 2 is refined into CE [31,32,33,34,35,36] 
* CE 3 is refined into CE [37] 
* CE 5 is refined into CE [38,39,40] 
* CE 4 is refined into CE [41] 


### Cost equations --> "Loop" of n_eval2___7/4 
* CEs [41] --> Loop 26 
* CEs [31,32,33,34,35,36,37,38,39,40] --> Loop 27 

### Ranking functions of CR n_eval2___7(A,B,C,D) 

#### Partial ranking functions of CR n_eval2___7(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [42,43] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [43] --> Loop 28 
* CEs [42] --> Loop 29 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_eval1___4(A,B,C,D):
* Chain [[14],15]: 2*it(14)+0
  Such that:it(14) =< A-B

  with precondition: [D=2,C>=A+1,A>=B+1] 

* Chain [15]: 0
  with precondition: [D=2] 


#### Cost of chains of n_eval1___6(A,B,C,D,E,F,G):
* Chain [[16],18]: 2*it(16)+0
  Such that:it(16) =< A-B

  with precondition: [D=2,A>=B+1,A>=C+1] 

* Chain [[16],17]: 2*it(16)+2
  Such that:it(16) =< -B+F

  with precondition: [D=3,A=E,C+1=G,F>=B+1,A>=C+1,A>=F+1] 

* Chain [18]: 0
  with precondition: [D=2,A>=B,A>=C+1] 

* Chain [17]: 2
  with precondition: [D=3,A=E,B=F,C+1=G,A>=B+1,A>=C+1] 


#### Cost of chains of n_eval1___5(A,B,C,D,E,F,G):
* Chain [[19,20,21],23]: 2*it(19)+8*it(20)+4*s(3)+2
  Such that:aux(5) =< A-B
aux(6) =< A-C
it(20) =< aux(5)
s(3) =< aux(5)
it(19) =< aux(6)
it(20) =< aux(6)

  with precondition: [D=2,A>=B+1,A>=C+1] 

* Chain [[19,20,21],22]: 2*it(19)+4*it(20)+4*it(21)+2*s(6)+2
  Such that:aux(1) =< A-B
aux(2) =< -B+F
it(20) =< -B/2+F/2
aux(7) =< A-C
it(21) =< aux(1)
s(6) =< aux(1)
it(21) =< aux(2)
s(6) =< aux(2)
it(19) =< aux(7)
it(20) =< aux(7)
it(21) =< aux(7)

  with precondition: [D=4,A=E+1,A=G,F>=B,A>=C+1,A>=F+1] 

* Chain [23]: 2*s(3)+2
  Such that:s(3) =< A-B

  with precondition: [D=2] 

* Chain [22]: 2
  with precondition: [D=4,A=C,A=E+1,B=F,A=G,A>=B+1] 


#### Cost of chains of n_eval1___5_loop_cont(A,B,C,D,E):
* Chain [25]: 0
  with precondition: [A=2] 

* Chain [24]: 2*s(13)+0
  Such that:s(13) =< B-C

  with precondition: [A=4] 


#### Cost of chains of n_eval2___7(A,B,C,D):
* Chain [27]: 44*s(16)+48*s(17)+12*s(18)+5
  Such that:aux(14) =< A-B
aux(15) =< A-C
s(16) =< aux(14)
s(17) =< aux(14)
s(18) =< aux(15)
s(17) =< aux(15)

  with precondition: [A>=B+1,A>=C+1] 

* Chain [26]: 2*s(60)+1
  Such that:s(60) =< A-B

  with precondition: [C>=A,A>=B+1] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [29]: 2*s(61)+4
  Such that:s(61) =< A-B

  with precondition: [C>=A,A>=B+1] 

* Chain [28]: 44*s(64)+48*s(65)+12*s(66)+8
  Such that:s(62) =< A-B
s(63) =< A-C
s(64) =< s(62)
s(65) =< s(62)
s(66) =< s(63)
s(65) =< s(63)

  with precondition: [A>=B+1,A>=C+1] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [29] with precondition: [C>=A,A>=B+1] 
    - Upper bound: 2*A-2*B+4 
    - Complexity: n 
* Chain [28] with precondition: [A>=B+1,A>=C+1] 
    - Upper bound: 104*A-92*B-12*C+8 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C,D): 2*A-2*B+4+ (90*A-90*B+4+nat(A-C)*12) 
Asymptotic class: n 
* Total analysis performed in 394 ms.


-- stats
realtime 0:00.46
usertime 0.44
systime 0.00

