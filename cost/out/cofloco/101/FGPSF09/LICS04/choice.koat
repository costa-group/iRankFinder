MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval___2/5]
1. recursive  : [n_eval___1/3,n_eval___2_loop_cont/4]
2. non_recursive  : [exit_location/1]
3. non_recursive  : [n_eval___1_loop_cont/2]
4. non_recursive  : [n_eval___3/3]
5. non_recursive  : [n_start/3]
6. non_recursive  : [pyRinit/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval___2/5
1. SCC is partially evaluated into n_eval___1/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_eval___3/3
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into pyRinit/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval___2/5 
* CE 7 is refined into CE [12] 
* CE 5 is refined into CE [13] 
* CE 6 is refined into CE [14] 


### Cost equations --> "Loop" of n_eval___2/5 
* CEs [14] --> Loop 8 
* CEs [12] --> Loop 9 
* CEs [13] --> Loop 10 

### Ranking functions of CR n_eval___2(A,B,C,D,E) 
* RF of phase [8]: [A,B-1]

#### Partial ranking functions of CR n_eval___2(A,B,C,D,E) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    A
    B-1


### Specialization of cost equations n_eval___1/3 
* CE 8 is refined into CE [15] 
* CE 11 is refined into CE [16] 
* CE 9 is refined into CE [17,18] 
* CE 10 is refined into CE [19] 


### Cost equations --> "Loop" of n_eval___1/3 
* CEs [18] --> Loop 11 
* CEs [19] --> Loop 12 
* CEs [17] --> Loop 13 
* CEs [15,16] --> Loop 14 

### Ranking functions of CR n_eval___1(A,B,C) 

#### Partial ranking functions of CR n_eval___1(A,B,C) 
* Partial RF of phase [11,12,13]:
  - RF of loop [11:1]:
    A/3-2/3 depends on loops [12:1] 
  - RF of loop [12:1]:
    A+B-2 depends on loops [11:1,13:1] 
  - RF of loop [13:1]:
    A-1 depends on loops [12:1] 


### Specialization of cost equations n_eval___3/3 
* CE 2 is refined into CE [20] 
* CE 3 is refined into CE [21,22,23,24] 
* CE 4 is refined into CE [25,26] 


### Cost equations --> "Loop" of n_eval___3/3 
* CEs [22,24] --> Loop 15 
* CEs [26] --> Loop 16 
* CEs [20,21,23,25] --> Loop 17 

### Ranking functions of CR n_eval___3(A,B,C) 

#### Partial ranking functions of CR n_eval___3(A,B,C) 


### Specialization of cost equations pyRinit/3 
* CE 1 is refined into CE [27,28,29] 


### Cost equations --> "Loop" of pyRinit/3 
* CEs [29] --> Loop 18 
* CEs [28] --> Loop 19 
* CEs [27] --> Loop 20 

### Ranking functions of CR pyRinit(A,B,C) 

#### Partial ranking functions of CR pyRinit(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of n_eval___2(A,B,C,D,E):
* Chain [[8],10]: 1*it(8)+1
  Such that:it(8) =< A-E+1

  with precondition: [C=2,A+1=B,D+2=E,D>=0,A>=D+2] 

* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< A

  with precondition: [C=3,A+1=B,A>=1] 

* Chain [10]: 1
  with precondition: [C=2,B=A+1,B=D+2,B=E,B>=2] 

* Chain [9]: 0
  with precondition: [C=3,B=A+1,B>=1] 


#### Cost of chains of n_eval___1(A,B,C):
* Chain [[11,12,13]]...: 6*it(11)+0
  with precondition: [B>=2,A>=1,C=3] 

* Chain [[11,12,13],14]: 6*it(11)+1*s(5)+1
  Such that:s(5) =< A+B

  with precondition: [C=3,A>=1,B>=2] 

* Chain [14]: 1*s(5)+1
  Such that:s(5) =< A

  with precondition: [C=3] 


#### Cost of chains of n_eval___3(A,B,C):
* Chain [17]: 4*s(9)+2*s(11)+18*s(12)+1*s(17)+1*s(18)+3
  Such that:s(18) =< A+B
s(17) =< B
aux(29) =< A
aux(30) =< 2*A
s(9) =< aux(29)
s(11) =< aux(30)

  with precondition: [A>=1,B>=1] 

* Chain [16]...: 6*s(20)+1
  with precondition: [A>=1,B>=3] 

* Chain [15]...: 12*s(21)+1*s(22)+2
  Such that:s(22) =< A

  with precondition: [A>=3,B>=1] 


#### Cost of chains of pyRinit(A,B,C):
* Chain [20]: 1*s(24)+1*s(25)+4*s(28)+2*s(29)+18*s(30)+5
  Such that:s(26) =< A
s(24) =< A+B
s(27) =< 2*A
s(25) =< B
s(28) =< s(26)
s(29) =< s(27)

  with precondition: [A>=1,B>=1] 

* Chain [19]...: 6*s(31)+3
  with precondition: [A>=1,B>=3] 

* Chain [18]...: 1*s(32)+12*s(33)+4
  Such that:s(32) =< A

  with precondition: [A>=3,B>=1] 


Closed-form bounds of pyRinit(A,B,C): 
-------------------------------------
* Chain [20] with precondition: [A>=1,B>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [19]... with precondition: [A>=1,B>=3] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [18]... with precondition: [A>=3,B>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of pyRinit(A,B,C): inf 
Asymptotic class: infinity 
* Total analysis performed in 199 ms.


-- stats
realtime 0:00.24
usertime 0.24
systime 0.00

