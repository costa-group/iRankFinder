WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_evalDis2bb3in___5/7,n_evalDis2bbin___1/7]
1. non_recursive  : [exit_location/1]
2. recursive  : [n_evalDis2bb3in___3/7,n_evalDis2bbin___2/7]
3. recursive  : [n_evalDis2bb3in___3_loop_cont/8,n_evalDis2bb3in___6/7,n_evalDis2bbin___4/7]
4. non_recursive  : [n_evalDis2stop___7/4]
5. non_recursive  : [n_evalDis2bb3in___6_loop_cont/5]
6. non_recursive  : [n_evalDis2bb3in___5_loop_cont/5]
7. non_recursive  : [n_evalDis2bbin___8/4]
8. non_recursive  : [n_evalDis2bb3in___9/4]
9. non_recursive  : [n_evalDis2start/4]
10. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_evalDis2bb3in___5/7
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into n_evalDis2bb3in___3/7
3. SCC is partially evaluated into n_evalDis2bb3in___6/7
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into n_evalDis2bb3in___6_loop_cont/5
6. SCC is partially evaluated into n_evalDis2bb3in___5_loop_cont/5
7. SCC is partially evaluated into n_evalDis2bbin___8/4
8. SCC is partially evaluated into n_evalDis2bb3in___9/4
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalDis2bb3in___5/7 
* CE 6 is refined into CE [20] 
* CE 8 is refined into CE [21] 
* CE 7 is refined into CE [22] 


### Cost equations --> "Loop" of n_evalDis2bb3in___5/7 
* CEs [22] --> Loop 19 
* CEs [20] --> Loop 20 
* CEs [21] --> Loop 21 

### Ranking functions of CR n_evalDis2bb3in___5(A,B,C,D,E,F,G) 
* RF of phase [19]: [A-B,-B+C+1]

#### Partial ranking functions of CR n_evalDis2bb3in___5(A,B,C,D,E,F,G) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    A-B
    -B+C+1


### Specialization of cost equations n_evalDis2bb3in___3/7 
* CE 18 is refined into CE [23] 
* CE 19 is refined into CE [24] 


### Cost equations --> "Loop" of n_evalDis2bb3in___3/7 
* CEs [23] --> Loop 22 
* CEs [24] --> Loop 23 

### Ranking functions of CR n_evalDis2bb3in___3(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR n_evalDis2bb3in___3(A,B,C,D,E,F,G) 


### Specialization of cost equations n_evalDis2bb3in___6/7 
* CE 14 is refined into CE [25] 
* CE 12 is refined into CE [26] 
* CE 15 is refined into CE [27] 
* CE 13 is refined into CE [28] 
* CE 11 is refined into CE [29] 


### Cost equations --> "Loop" of n_evalDis2bb3in___6/7 
* CEs [28] --> Loop 24 
* CEs [29] --> Loop 25 
* CEs [25] --> Loop 26 
* CEs [26,27] --> Loop 27 

### Ranking functions of CR n_evalDis2bb3in___6(A,B,C,D,E,F,G) 
* RF of phase [24]: [A-C,B-C]
* RF of phase [25]: [A-B,A-C]

#### Partial ranking functions of CR n_evalDis2bb3in___6(A,B,C,D,E,F,G) 
* Partial RF of phase [24]:
  - RF of loop [24:1]:
    A-C
    B-C
* Partial RF of phase [25]:
  - RF of loop [25:1]:
    A-B
    A-C


### Specialization of cost equations n_evalDis2bb3in___6_loop_cont/5 
* CE 16 is refined into CE [30] 
* CE 17 is refined into CE [31] 


### Cost equations --> "Loop" of n_evalDis2bb3in___6_loop_cont/5 
* CEs [30] --> Loop 28 
* CEs [31] --> Loop 29 

### Ranking functions of CR n_evalDis2bb3in___6_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalDis2bb3in___6_loop_cont(A,B,C,D,E) 


### Specialization of cost equations n_evalDis2bb3in___5_loop_cont/5 
* CE 10 is refined into CE [32,33,34,35,36] 
* CE 9 is refined into CE [37] 


### Cost equations --> "Loop" of n_evalDis2bb3in___5_loop_cont/5 
* CEs [32,33,34,35,36] --> Loop 30 
* CEs [37] --> Loop 31 

### Ranking functions of CR n_evalDis2bb3in___5_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalDis2bb3in___5_loop_cont(A,B,C,D,E) 


### Specialization of cost equations n_evalDis2bbin___8/4 
* CE 5 is refined into CE [38,39,40,41,42] 
* CE 4 is refined into CE [43,44,45] 


### Cost equations --> "Loop" of n_evalDis2bbin___8/4 
* CEs [42] --> Loop 32 
* CEs [41] --> Loop 33 
* CEs [40] --> Loop 34 
* CEs [43,44,45] --> Loop 35 
* CEs [38,39] --> Loop 36 

### Ranking functions of CR n_evalDis2bbin___8(A,B,C,D) 

#### Partial ranking functions of CR n_evalDis2bbin___8(A,B,C,D) 


### Specialization of cost equations n_evalDis2bb3in___9/4 
* CE 2 is refined into CE [46,47,48,49] 
* CE 3 is refined into CE [50] 


### Cost equations --> "Loop" of n_evalDis2bb3in___9/4 
* CEs [49] --> Loop 37 
* CEs [48] --> Loop 38 
* CEs [50] --> Loop 39 
* CEs [46,47] --> Loop 40 

### Ranking functions of CR n_evalDis2bb3in___9(A,B,C,D) 

#### Partial ranking functions of CR n_evalDis2bb3in___9(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [51,52,53] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [51] --> Loop 41 
* CEs [53] --> Loop 42 
* CEs [52] --> Loop 43 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_evalDis2bb3in___5(A,B,C,D,E,F,G):
* Chain [[19],21]: 2*it(19)+0
  Such that:it(19) =< -B+C+1

  with precondition: [D=2,C>=B,A>=C+1] 

* Chain [[19],20]: 2*it(19)+2
  Such that:it(19) =< -B+F

  with precondition: [D=3,A=E,C+1=F,C+1=G,C>=B,A>=C+1] 

* Chain [21]: 0
  with precondition: [D=2,C+1>=B,A>=C+1] 

* Chain [20]: 2
  with precondition: [D=3,C+1=B,A=E,C+1=F,C+1=G,A>=C+1] 


#### Cost of chains of n_evalDis2bb3in___3(A,B,C,D,E,F,G):
* Chain [23]: 0
  with precondition: [D=2,C+1=B,A>=C+1] 

* Chain [22]: 2
  with precondition: [D=3,C+1=B,A=E,C+1=F,C+1=G,A>=C+1] 


#### Cost of chains of n_evalDis2bb3in___6(A,B,C,D,E,F,G):
* Chain [[25],27]: 4*it(25)+2
  Such that:it(25) =< A-C

  with precondition: [D=2,B=C,A>=B+1] 

* Chain [[25],26]: 4*it(25)+1
  Such that:it(25) =< A-B

  with precondition: [D=4,B=C,A>=B+1] 

* Chain [[24],[25],27]: 2*it(24)+4*it(25)+2
  Such that:it(25) =< A-B
it(24) =< B-C

  with precondition: [D=2,A>=B+1,B>=C+1] 

* Chain [[24],[25],26]: 2*it(24)+4*it(25)+1
  Such that:it(25) =< A-B
it(24) =< B-C

  with precondition: [D=4,A>=B+1,B>=C+1] 

* Chain [[24],27]: 2*it(24)+2
  Such that:it(24) =< A-C

  with precondition: [D=2,A>=C+1,B>=C+1] 

* Chain [[24],26]: 2*it(24)+1
  Such that:it(24) =< A-C

  with precondition: [D=4,B>=A,A>=C+1] 

* Chain [27]: 2
  with precondition: [D=2] 

* Chain [26]: 1
  with precondition: [D=4,A=C,B>=A] 


#### Cost of chains of n_evalDis2bb3in___6_loop_cont(A,B,C,D,E):
* Chain [29]: 0
  with precondition: [A=2] 

* Chain [28]: 0
  with precondition: [A=4] 


#### Cost of chains of n_evalDis2bb3in___5_loop_cont(A,B,C,D,E):
* Chain [31]: 0
  with precondition: [A=2] 

* Chain [30]: 12*s(6)+4*s(7)+8*s(9)+2
  Such that:aux(2) =< B-C
aux(3) =< B-D
aux(4) =< C-D
s(6) =< aux(2)
s(9) =< aux(3)
s(7) =< aux(4)

  with precondition: [A=3] 


#### Cost of chains of n_evalDis2bbin___8(A,B,C,D):
* Chain [36]: 4*s(14)+2*s(15)+6*s(17)+3
  Such that:s(14) =< A-B
s(16) =< A-C
s(15) =< B-C
s(17) =< s(16)

  with precondition: [A>=C+1,B>=C+1] 

* Chain [35]: 4*s(18)+40*s(22)+5
  Such that:aux(7) =< A-C
aux(8) =< -B+C
s(18) =< aux(8)
s(22) =< aux(7)

  with precondition: [C>=B,A>=C+1] 

* Chain [34]: 4*s(32)+2
  Such that:s(32) =< A-C

  with precondition: [C+1=B,A>=C+2] 

* Chain [33]: 2*s(33)+2
  Such that:s(33) =< A-C

  with precondition: [B>=A,A>=C+2] 

* Chain [32]: 4*s(34)+2*s(35)+2
  Such that:s(34) =< A-B
s(35) =< B-C

  with precondition: [A>=B+1,B>=C+2] 


#### Cost of chains of n_evalDis2bb3in___9(A,B,C,D):
* Chain [40]: 4*s(41)+2*s(42)+12*s(44)+4
  Such that:s(41) =< A-B
s(42) =< B-C
aux(10) =< A-C
s(44) =< aux(10)

  with precondition: [A>=C+1,B>=C+1] 

* Chain [39]: 1
  with precondition: [C>=A] 

* Chain [38]: 4*s(46)+2*s(47)+3
  Such that:s(46) =< A-B
s(47) =< B-C

  with precondition: [A>=B+1,B>=C+2] 

* Chain [37]: 4*s(50)+40*s(51)+6
  Such that:s(48) =< A-C
s(49) =< -B+C
s(50) =< s(49)
s(51) =< s(48)

  with precondition: [C>=B,A>=C+1] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [43]: 8*s(61)+4*s(62)+12*s(63)+6
  Such that:s(58) =< -A+B
s(60) =< -A+C
s(59) =< B-C
s(61) =< s(59)
s(62) =< s(60)
s(63) =< s(58)

  with precondition: [B>=A+1,C>=A+1] 

* Chain [42]: 4*s(66)+40*s(67)+8
  Such that:s(64) =< -A+B
s(65) =< A-C
s(66) =< s(65)
s(67) =< s(64)

  with precondition: [B>=A+1,A>=C] 

* Chain [41]: 3
  with precondition: [A>=B] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [43] with precondition: [B>=A+1,C>=A+1] 
    - Upper bound: -16*A+12*B+4*C+6+nat(B-C)*8 
    - Complexity: n 
* Chain [42] with precondition: [B>=A+1,A>=C] 
    - Upper bound: -36*A+40*B-4*C+8 
    - Complexity: n 
* Chain [41] with precondition: [A>=B] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of pyRinit(A,B,C,D): nat(-A+B)*12+3+max([nat(B-C)*8+nat(-A+C)*4,nat(-A+B)*28+2+nat(A-C)*4])+3 
Asymptotic class: n 
* Total analysis performed in 366 ms.


-- stats
realtime 0:00.43
usertime 0.40
systime 0.01

