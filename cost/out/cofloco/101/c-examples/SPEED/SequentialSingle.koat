WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_evalSequentialSinglebb1in___6/5,n_evalSequentialSinglebb2in___3/5]
1. non_recursive  : [exit_location/1]
2. recursive  : [n_evalSequentialSinglebb5in___5/5]
3. non_recursive  : [n_evalSequentialSinglestop___4/3]
4. non_recursive  : [n_evalSequentialSinglebb5in___5_loop_cont/4]
5. non_recursive  : [n_evalSequentialSinglebb5in___1/3]
6. non_recursive  : [n_evalSequentialSinglebb5in___2/3]
7. non_recursive  : [n_evalSequentialSinglebb1in___6_loop_cont/4]
8. non_recursive  : [n_evalSequentialSinglebb5in___7/3]
9. non_recursive  : [n_evalSequentialSinglebb2in___9/3]
10. non_recursive  : [n_evalSequentialSinglebb5in___8/3]
11. non_recursive  : [n_evalSequentialSinglebb1in___10/3]
12. non_recursive  : [n_evalSequentialSinglestart/3]
13. non_recursive  : [pyRinit/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_evalSequentialSinglebb1in___6/5
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into n_evalSequentialSinglebb5in___5/5
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_evalSequentialSinglebb5in___5_loop_cont/4
5. SCC is partially evaluated into n_evalSequentialSinglebb5in___1/3
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into n_evalSequentialSinglebb1in___6_loop_cont/4
8. SCC is partially evaluated into n_evalSequentialSinglebb5in___7/3
9. SCC is partially evaluated into n_evalSequentialSinglebb2in___9/3
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into n_evalSequentialSinglebb1in___10/3
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into pyRinit/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalSequentialSinglebb1in___6/5 
* CE 6 is refined into CE [20] 
* CE 9 is refined into CE [21] 
* CE 8 is refined into CE [22] 
* CE 7 is refined into CE [23] 


### Cost equations --> "Loop" of n_evalSequentialSinglebb1in___6/5 
* CEs [23] --> Loop 19 
* CEs [20] --> Loop 20 
* CEs [21] --> Loop 21 
* CEs [22] --> Loop 22 

### Ranking functions of CR n_evalSequentialSinglebb1in___6(A,B,C,D,E) 
* RF of phase [19]: [-A+B]

#### Partial ranking functions of CR n_evalSequentialSinglebb1in___6(A,B,C,D,E) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    -A+B


### Specialization of cost equations n_evalSequentialSinglebb5in___5/5 
* CE 16 is refined into CE [24] 
* CE 17 is refined into CE [25] 
* CE 15 is refined into CE [26] 


### Cost equations --> "Loop" of n_evalSequentialSinglebb5in___5/5 
* CEs [26] --> Loop 23 
* CEs [24] --> Loop 24 
* CEs [25] --> Loop 25 

### Ranking functions of CR n_evalSequentialSinglebb5in___5(A,B,C,D,E) 
* RF of phase [23]: [-A+B]

#### Partial ranking functions of CR n_evalSequentialSinglebb5in___5(A,B,C,D,E) 
* Partial RF of phase [23]:
  - RF of loop [23:1]:
    -A+B


### Specialization of cost equations n_evalSequentialSinglebb5in___5_loop_cont/4 
* CE 18 is refined into CE [27] 
* CE 19 is refined into CE [28] 


### Cost equations --> "Loop" of n_evalSequentialSinglebb5in___5_loop_cont/4 
* CEs [27] --> Loop 26 
* CEs [28] --> Loop 27 

### Ranking functions of CR n_evalSequentialSinglebb5in___5_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR n_evalSequentialSinglebb5in___5_loop_cont(A,B,C,D) 


### Specialization of cost equations n_evalSequentialSinglebb5in___1/3 
* CE 14 is refined into CE [29,30,31] 


### Cost equations --> "Loop" of n_evalSequentialSinglebb5in___1/3 
* CEs [29,30,31] --> Loop 28 

### Ranking functions of CR n_evalSequentialSinglebb5in___1(A,B,C) 

#### Partial ranking functions of CR n_evalSequentialSinglebb5in___1(A,B,C) 


### Specialization of cost equations n_evalSequentialSinglebb1in___6_loop_cont/4 
* CE 12 is refined into CE [32] 
* CE 11 is refined into CE [33] 
* CE 10 is refined into CE [34] 


### Cost equations --> "Loop" of n_evalSequentialSinglebb1in___6_loop_cont/4 
* CEs [32] --> Loop 29 
* CEs [33] --> Loop 30 
* CEs [34] --> Loop 31 

### Ranking functions of CR n_evalSequentialSinglebb1in___6_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR n_evalSequentialSinglebb1in___6_loop_cont(A,B,C,D) 


### Specialization of cost equations n_evalSequentialSinglebb5in___7/3 
* CE 13 is refined into CE [35,36,37] 


### Cost equations --> "Loop" of n_evalSequentialSinglebb5in___7/3 
* CEs [35,36,37] --> Loop 32 

### Ranking functions of CR n_evalSequentialSinglebb5in___7(A,B,C) 

#### Partial ranking functions of CR n_evalSequentialSinglebb5in___7(A,B,C) 


### Specialization of cost equations n_evalSequentialSinglebb2in___9/3 
* CE 4 is refined into CE [38,39,40,41,42] 
* CE 5 is refined into CE [43] 


### Cost equations --> "Loop" of n_evalSequentialSinglebb2in___9/3 
* CEs [38,39,40,41,42,43] --> Loop 33 

### Ranking functions of CR n_evalSequentialSinglebb2in___9(A,B,C) 

#### Partial ranking functions of CR n_evalSequentialSinglebb2in___9(A,B,C) 


### Specialization of cost equations n_evalSequentialSinglebb1in___10/3 
* CE 2 is refined into CE [44] 
* CE 3 is refined into CE [45] 


### Cost equations --> "Loop" of n_evalSequentialSinglebb1in___10/3 
* CEs [44] --> Loop 34 
* CEs [45] --> Loop 35 

### Ranking functions of CR n_evalSequentialSinglebb1in___10(A,B,C) 

#### Partial ranking functions of CR n_evalSequentialSinglebb1in___10(A,B,C) 


### Specialization of cost equations pyRinit/3 
* CE 1 is refined into CE [46,47] 


### Cost equations --> "Loop" of pyRinit/3 
* CEs [47] --> Loop 36 
* CEs [46] --> Loop 37 

### Ranking functions of CR pyRinit(A,B,C) 

#### Partial ranking functions of CR pyRinit(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of n_evalSequentialSinglebb1in___6(A,B,C,D,E):
* Chain [[19],22]: 2*it(19)+1
  Such that:it(19) =< -A+E

  with precondition: [C=2,B=D,B=E,A>=1,B>=A+1] 

* Chain [[19],21]: 2*it(19)+0
  Such that:it(19) =< -A+B

  with precondition: [C=3,A>=1,B>=A+1] 

* Chain [[19],20]: 2*it(19)+2
  Such that:it(19) =< -A+D

  with precondition: [C=4,B=E,A>=1,D>=A+1,B>=D+1] 

* Chain [22]: 1
  with precondition: [C=2,B=A,B=D,B=E,B>=1] 

* Chain [21]: 0
  with precondition: [C=3,A>=1,B>=A] 

* Chain [20]: 2
  with precondition: [C=4,A=D,B=E,A>=1,B>=A+1] 


#### Cost of chains of n_evalSequentialSinglebb5in___5(A,B,C,D,E):
* Chain [[23],25]: 1*it(23)+0
  Such that:it(23) =< -A+B

  with precondition: [C=3,A>=1,B>=A+1] 

* Chain [[23],24]: 1*it(23)+1
  Such that:it(23) =< -A+B

  with precondition: [C=5,A>=1,B>=A+1] 

* Chain [25]: 0
  with precondition: [C=3,A>=1,B>=A] 

* Chain [24]: 1
  with precondition: [C=5,B=A,B>=1] 


#### Cost of chains of n_evalSequentialSinglebb5in___5_loop_cont(A,B,C,D):
* Chain [27]: 0
  with precondition: [A=3] 

* Chain [26]: 0
  with precondition: [A=5] 


#### Cost of chains of n_evalSequentialSinglebb5in___1(A,B,C):
* Chain [28]: 2*s(3)+2
  Such that:aux(1) =< -A+B
s(3) =< aux(1)

  with precondition: [A>=1,B>=A+1] 


#### Cost of chains of n_evalSequentialSinglebb1in___6_loop_cont(A,B,C,D):
* Chain [31]: 1
  with precondition: [A=2,B=C,B>=1] 

* Chain [30]: 0
  with precondition: [A=3] 

* Chain [29]: 2*s(6)+2
  Such that:s(5) =< -B+C
s(6) =< s(5)

  with precondition: [A=4,B>=1,C>=B+1] 


#### Cost of chains of n_evalSequentialSinglebb5in___7(A,B,C):
* Chain [32]: 2*s(7)+2
  Such that:aux(2) =< B
s(7) =< aux(2)

  with precondition: [A=0,B>=1] 


#### Cost of chains of n_evalSequentialSinglebb2in___9(A,B,C):
* Chain [33]: 12*s(9)+5
  Such that:aux(4) =< B
s(9) =< aux(4)

  with precondition: [A=0,B>=1] 


#### Cost of chains of n_evalSequentialSinglebb1in___10(A,B,C):
* Chain [35]: 2
  with precondition: [A=0,0>=B] 

* Chain [34]: 12*s(19)+6
  Such that:s(18) =< B
s(19) =< s(18)

  with precondition: [A=0,B>=1] 


#### Cost of chains of pyRinit(A,B,C):
* Chain [37]: 4
  with precondition: [0>=B] 

* Chain [36]: 12*s(21)+8
  Such that:s(20) =< B
s(21) =< s(20)

  with precondition: [B>=1] 


Closed-form bounds of pyRinit(A,B,C): 
-------------------------------------
* Chain [37] with precondition: [0>=B] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [36] with precondition: [B>=1] 
    - Upper bound: 12*B+8 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C): nat(B)*12+4+4 
Asymptotic class: n 
* Total analysis performed in 222 ms.


-- stats
realtime 0:00.31
usertime 0.26
systime 0.00

