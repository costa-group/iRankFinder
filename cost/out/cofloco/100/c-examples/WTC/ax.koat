WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_evalaxbb2in___5/7]
1. recursive  : [n_evalaxbb2in___5_loop_cont/8,n_evalaxbb2in___6/7,n_evalaxbb3in___3/7,n_evalaxbbin___2/7]
2. non_recursive  : [exit_location/1]
3. non_recursive  : [n_evalaxstop___1/4]
4. non_recursive  : [n_evalaxbb3in___4/4]
5. non_recursive  : [n_evalaxbb2in___6_loop_cont/5]
6. non_recursive  : [n_evalaxbbin___7/4]
7. non_recursive  : [n_evalaxstart/4]
8. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_evalaxbb2in___5/7
1. SCC is partially evaluated into n_evalaxbb2in___6/7
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into n_evalaxbb2in___6_loop_cont/5
6. SCC is partially evaluated into n_evalaxbbin___7/4
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalaxbb2in___5/7 
* CE 13 is refined into CE [14] 
* CE 12 is refined into CE [15] 
* CE 11 is refined into CE [16] 


### Cost equations --> "Loop" of n_evalaxbb2in___5/7 
* CEs [16] --> Loop 13 
* CEs [14] --> Loop 14 
* CEs [15] --> Loop 15 

### Ranking functions of CR n_evalaxbb2in___5(A,B,C,D,E,F,G) 
* RF of phase [13]: [-B+C-1]

#### Partial ranking functions of CR n_evalaxbb2in___5(A,B,C,D,E,F,G) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    -B+C-1


### Specialization of cost equations n_evalaxbb2in___6/7 
* CE 5 is refined into CE [17,18] 
* CE 6 is refined into CE [19] 
* CE 3 is refined into CE [20] 
* CE 7 is refined into CE [21] 
* CE 4 is refined into CE [22] 


### Cost equations --> "Loop" of n_evalaxbb2in___6/7 
* CEs [22] --> Loop 16 
* CEs [18] --> Loop 17 
* CEs [20,21] --> Loop 18 
* CEs [17] --> Loop 19 
* CEs [19] --> Loop 20 

### Ranking functions of CR n_evalaxbb2in___6(A,B,C,D,E,F,G) 
* RF of phase [16]: [-A+C-2]

#### Partial ranking functions of CR n_evalaxbb2in___6(A,B,C,D,E,F,G) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    -A+C-2


### Specialization of cost equations n_evalaxbb2in___6_loop_cont/5 
* CE 10 is refined into CE [23] 
* CE 8 is refined into CE [24] 
* CE 9 is refined into CE [25] 


### Cost equations --> "Loop" of n_evalaxbb2in___6_loop_cont/5 
* CEs [23] --> Loop 21 
* CEs [24] --> Loop 22 
* CEs [25] --> Loop 23 

### Ranking functions of CR n_evalaxbb2in___6_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalaxbb2in___6_loop_cont(A,B,C,D,E) 


### Specialization of cost equations n_evalaxbbin___7/4 
* CE 2 is refined into CE [26,27,28,29] 


### Cost equations --> "Loop" of n_evalaxbbin___7/4 
* CEs [26,27,28,29] --> Loop 24 

### Ranking functions of CR n_evalaxbbin___7(A,B,C,D) 

#### Partial ranking functions of CR n_evalaxbbin___7(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [30] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [30] --> Loop 25 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_evalaxbb2in___5(A,B,C,D,E,F,G):
* Chain [[13],15]: 1*it(13)+1
  Such that:it(13) =< -B+G

  with precondition: [D=2,A=E,C=F+1,C=G,A>=0,B>=1,C>=B+2] 

* Chain [[13],14]: 1*it(13)+0
  Such that:it(13) =< -B+C

  with precondition: [D=3,A>=0,B>=1,C>=B+2] 

* Chain [15]: 1
  with precondition: [D=2,C=B+1,A=E,C=F+1,C=G,A>=0,C>=2] 

* Chain [14]: 0
  with precondition: [D=3,A>=0,B>=1,C>=B+1] 


#### Cost of chains of n_evalaxbb2in___6(A,B,C,D,E,F,G):
* Chain [[16],18]: 4*it(16)+1*s(2)+1*s(5)+1
  Such that:it(16) =< -A+C
aux(2) =< C
s(2) =< aux(2)
s(5) =< it(16)*aux(2)

  with precondition: [B=0,D=3,A>=0,C>=A+3] 

* Chain [[16],17]: 4*it(16)+1*s(5)+1*s(6)+3
  Such that:it(16) =< -A+C
aux(3) =< C
s(6) =< aux(3)
s(5) =< it(16)*aux(3)

  with precondition: [B=0,D=5,A>=0,C>=A+3] 

* Chain [20]: 1
  with precondition: [A=0,B=0,D=4,E=0,F=0,C=G,1>=C] 

* Chain [19]: 3
  with precondition: [A=0,B=0,C=2,D=5] 

* Chain [18]: 1*s(2)+1
  Such that:s(2) =< C

  with precondition: [B=0,D=3,A>=0] 


#### Cost of chains of n_evalaxbb2in___6_loop_cont(A,B,C,D,E):
* Chain [23]: 0
  with precondition: [A=3] 

* Chain [22]: 1
  with precondition: [A=4,C=0,1>=D,B>=0] 

* Chain [21]: 0
  with precondition: [A=5] 


#### Cost of chains of n_evalaxbbin___7(A,B,C,D):
* Chain [24]: 11*s(12)+2*s(15)+4
  Such that:aux(7) =< C
s(12) =< aux(7)
s(15) =< s(12)*aux(7)

  with precondition: [A=0] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [25]: 11*s(21)+2*s(22)+6
  Such that:s(20) =< C
s(21) =< s(20)
s(22) =< s(21)*s(20)

  with precondition: [] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [25] with precondition: [] 
    - Upper bound: nat(C)*11+6+nat(C)*2*nat(C) 
    - Complexity: n^2 

### Maximum cost of pyRinit(A,B,C,D): nat(C)*11+6+nat(C)*2*nat(C) 
Asymptotic class: n^2 
* Total analysis performed in 240 ms.


-- stats
realtime 0:00.30
usertime 0.28
systime 0.00

