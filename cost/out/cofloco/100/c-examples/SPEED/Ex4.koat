WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_evalEx4bb2in___6/9,n_evalEx4bb3in___4/9]
1. recursive  : [n_evalEx4bb2in___6_loop_cont/10,n_evalEx4bb2in___9/9,n_evalEx4bb3in___8/9,n_evalEx4bb4in___2/9,n_evalEx4bb4in___3/9,n_evalEx4bb4in___5/9,n_evalEx4bb4in___7/9]
2. non_recursive  : [exit_location/1]
3. non_recursive  : [n_evalEx4stop___1/5]
4. non_recursive  : [n_evalEx4bb2in___9_loop_cont/6]
5. non_recursive  : [n_evalEx4bb4in___10/5]
6. non_recursive  : [n_evalEx4start/5]
7. non_recursive  : [pyRinit/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_evalEx4bb2in___6/9
1. SCC is partially evaluated into n_evalEx4bb2in___9/9
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_evalEx4bb2in___9_loop_cont/6
5. SCC is partially evaluated into n_evalEx4bb4in___10/5
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into pyRinit/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalEx4bb2in___6/9 
* CE 14 is refined into CE [15] 
* CE 11 is refined into CE [16] 
* CE 13 is refined into CE [17] 
* CE 12 is refined into CE [18] 


### Cost equations --> "Loop" of n_evalEx4bb2in___6/9 
* CEs [18] --> Loop 14 
* CEs [16] --> Loop 15 
* CEs [15] --> Loop 16 
* CEs [17] --> Loop 17 

### Ranking functions of CR n_evalEx4bb2in___6(A,B,C,D,E,F,G,H,I) 
* RF of phase [14]: [D]

#### Partial ranking functions of CR n_evalEx4bb2in___6(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    D


### Specialization of cost equations n_evalEx4bb2in___9/9 
* CE 6 is refined into CE [19] 
* CE 7 is refined into CE [20] 
* CE 3 is refined into CE [21] 
* CE 8 is refined into CE [22] 
* CE 4 is refined into CE [23,24] 
* CE 5 is refined into CE [25,26] 


### Cost equations --> "Loop" of n_evalEx4bb2in___9/9 
* CEs [24] --> Loop 18 
* CEs [23] --> Loop 19 
* CEs [26] --> Loop 20 
* CEs [25] --> Loop 21 
* CEs [19] --> Loop 22 
* CEs [20] --> Loop 23 
* CEs [21,22] --> Loop 24 

### Ranking functions of CR n_evalEx4bb2in___9(A,B,C,D,E,F,G,H,I) 
* RF of phase [18,19]: [B-1]

#### Partial ranking functions of CR n_evalEx4bb2in___9(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [18,19]:
  - RF of loop [18:1]:
    B/2-1
  - RF of loop [19:1]:
    B-1
    D-1


### Specialization of cost equations n_evalEx4bb2in___9_loop_cont/6 
* CE 10 is refined into CE [27] 
* CE 9 is refined into CE [28] 


### Cost equations --> "Loop" of n_evalEx4bb2in___9_loop_cont/6 
* CEs [27] --> Loop 25 
* CEs [28] --> Loop 26 

### Ranking functions of CR n_evalEx4bb2in___9_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalEx4bb2in___9_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations n_evalEx4bb4in___10/5 
* CE 2 is refined into CE [29,30,31] 


### Cost equations --> "Loop" of n_evalEx4bb4in___10/5 
* CEs [29,30,31] --> Loop 27 

### Ranking functions of CR n_evalEx4bb4in___10(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalEx4bb4in___10(A,B,C,D,E) 


### Specialization of cost equations pyRinit/5 
* CE 1 is refined into CE [32] 


### Cost equations --> "Loop" of pyRinit/5 
* CEs [32] --> Loop 28 

### Ranking functions of CR pyRinit(A,B,C,D,E) 

#### Partial ranking functions of CR pyRinit(A,B,C,D,E) 


Computing Bounds
=====================================

#### Cost of chains of n_evalEx4bb2in___6(A,B,C,D,E,F,G,H,I):
* Chain [[14],17]: 2*it(14)+1
  Such that:it(14) =< D

  with precondition: [A=1,C=1,E=2,F=1,G=0,H=1,I=0,D>=1,B>=D+1] 

* Chain [[14],16]: 2*it(14)+0
  Such that:it(14) =< D

  with precondition: [A=1,C=1,E=3,D>=1,B>=D+1] 

* Chain [[14],15]: 2*it(14)+2
  Such that:it(14) =< D-I

  with precondition: [A=1,C=1,E=4,F=1,H=1,G=I,G>=1,B>=D+1,D>=G+1] 

* Chain [17]: 1
  with precondition: [A=1,C=1,D=0,E=2,F=1,G=0,H=1,I=0,B>=1] 

* Chain [16]: 0
  with precondition: [A=1,C=1,E=3,D>=0,B>=D+1] 

* Chain [15]: 2
  with precondition: [A=1,C=1,E=4,F=1,H=1,D=G,D=I,D>=1,B>=D+1] 


#### Cost of chains of n_evalEx4bb2in___9(A,B,C,D,E,F,G,H,I):
* Chain [[18,19],24]: 14*it(18)+2
  Such that:aux(5) =< D
it(18) =< aux(5)

  with precondition: [A=1,C=0,E=3,B=D,B>=2] 

* Chain [[18,19],22]: 5*it(18)+7*it(19)+3
  Such that:it(18) =< D/2
aux(6) =< D
it(18) =< aux(6)
it(19) =< aux(6)

  with precondition: [A=1,C=0,E=5,B=D,B>=2] 

* Chain [[18,19],21,24]: 5*it(18)+7*it(19)+6
  Such that:it(18) =< D/2
aux(7) =< D
it(18) =< aux(7)
it(19) =< aux(7)

  with precondition: [A=1,C=0,E=3,B=D,B>=2] 

* Chain [[18,19],21,23]: 5*it(18)+7*it(19)+6
  Such that:it(18) =< D/2
aux(8) =< D
it(18) =< aux(8)
it(19) =< aux(8)

  with precondition: [A=1,C=0,E=5,B=D,B>=2] 

* Chain [[18,19],20,24]: 14*it(18)+6
  Such that:aux(9) =< D
it(18) =< aux(9)

  with precondition: [A=1,C=0,E=3,B=D,B>=3] 

* Chain [[18,19],20,23]: 14*it(18)+6
  Such that:aux(10) =< D
it(18) =< aux(10)

  with precondition: [A=1,C=0,E=5,B=D,B>=3] 

* Chain [24]: 2*s(2)+2
  Such that:s(2) =< D

  with precondition: [A=1,C=0,E=3,D=B] 

* Chain [23]: 2
  with precondition: [A=1,C=0,E=5,D=B,0>=D] 

* Chain [22]: 3
  with precondition: [A=1,C=0,E=5,D=B,D>=1] 

* Chain [21,24]: 6
  with precondition: [A=1,B=1,C=0,D=1,E=3] 

* Chain [21,23]: 6
  with precondition: [A=1,B=1,C=0,D=1,E=5] 

* Chain [20,24]: 2*s(6)+6
  Such that:s(6) =< D

  with precondition: [A=1,C=0,E=3,B=D,B>=2] 

* Chain [20,23]: 2*s(6)+6
  Such that:s(6) =< B

  with precondition: [A=1,C=0,E=5,B=D,B>=2] 


#### Cost of chains of n_evalEx4bb2in___9_loop_cont(A,B,C,D,E,F):
* Chain [26]: 0
  with precondition: [A=3] 

* Chain [25]: 0
  with precondition: [A=5] 


#### Cost of chains of n_evalEx4bb4in___10(A,B,C,D,E):
* Chain [27]: 15*s(25)+69*s(27)+7
  Such that:aux(15) =< B
aux(16) =< B/2
s(25) =< aux(16)
s(27) =< aux(15)
s(25) =< aux(15)

  with precondition: [A=1] 


#### Cost of chains of pyRinit(A,B,C,D,E):
* Chain [28]: 15*s(35)+69*s(36)+9
  Such that:s(33) =< A
s(34) =< A/2
s(35) =< s(34)
s(36) =< s(33)
s(35) =< s(33)

  with precondition: [] 


Closed-form bounds of pyRinit(A,B,C,D,E): 
-------------------------------------
* Chain [28] with precondition: [] 
    - Upper bound: nat(A)*69+9+nat(A/2)*15 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C,D,E): nat(A)*69+9+nat(A/2)*15 
Asymptotic class: n 
* Total analysis performed in 473 ms.


-- stats
realtime 0:00.58
usertime 0.51
systime 0.01

