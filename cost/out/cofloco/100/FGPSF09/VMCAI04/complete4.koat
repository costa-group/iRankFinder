MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval___2/5]
1. non_recursive  : [exit_location/1]
2. recursive  : [n_eval___1/5]
3. recursive  : [n_eval___1_loop_cont/4,n_eval___3/3]
4. non_recursive  : [n_eval___3_loop_cont/2]
5. non_recursive  : [n_eval___2_loop_cont/4]
6. non_recursive  : [n_eval___4/3]
7. non_recursive  : [n_start/3]
8. non_recursive  : [pyRinit/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval___2/5
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into n_eval___1/5
3. SCC is partially evaluated into n_eval___3/3
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into n_eval___2_loop_cont/4
6. SCC is partially evaluated into n_eval___4/3
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into pyRinit/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval___2/5 
* CE 6 is refined into CE [16] 
* CE 5 is refined into CE [17] 
* CE 4 is refined into CE [18] 


### Cost equations --> "Loop" of n_eval___2/5 
* CEs [18] --> Loop 15 
* CEs [16] --> Loop 16 
* CEs [17] --> Loop 17 

### Ranking functions of CR n_eval___2(A,B,C,D,E) 
* RF of phase [15]: [B+1]

#### Partial ranking functions of CR n_eval___2(A,B,C,D,E) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    B+1


### Specialization of cost equations n_eval___1/5 
* CE 15 is refined into CE [19] 
* CE 14 is refined into CE [20] 
* CE 13 is refined into CE [21] 


### Cost equations --> "Loop" of n_eval___1/5 
* CEs [21] --> Loop 18 
* CEs [19] --> Loop 19 
* CEs [20] --> Loop 20 

### Ranking functions of CR n_eval___1(A,B,C,D,E) 
* RF of phase [18]: [B+1]

#### Partial ranking functions of CR n_eval___1(A,B,C,D,E) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    B+1


### Specialization of cost equations n_eval___3/3 
* CE 9 is refined into CE [22] 
* CE 12 is refined into CE [23] 
* CE 10 is refined into CE [24] 
* CE 11 is refined into CE [25] 


### Cost equations --> "Loop" of n_eval___3/3 
* CEs [24,25] --> Loop 21 
* CEs [22,23] --> Loop 22 

### Ranking functions of CR n_eval___3(A,B,C) 
* RF of phase [21]: [A+1]

#### Partial ranking functions of CR n_eval___3(A,B,C) 
* Partial RF of phase [21]:
  - RF of loop [21:1]:
    A+1


### Specialization of cost equations n_eval___2_loop_cont/4 
* CE 8 is refined into CE [26] 
* CE 7 is refined into CE [27] 


### Cost equations --> "Loop" of n_eval___2_loop_cont/4 
* CEs [26] --> Loop 23 
* CEs [27] --> Loop 24 

### Ranking functions of CR n_eval___2_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR n_eval___2_loop_cont(A,B,C,D) 


### Specialization of cost equations n_eval___4/3 
* CE 2 is refined into CE [28,29] 
* CE 3 is refined into CE [30] 


### Cost equations --> "Loop" of n_eval___4/3 
* CEs [29] --> Loop 25 
* CEs [28,30] --> Loop 26 

### Ranking functions of CR n_eval___4(A,B,C) 

#### Partial ranking functions of CR n_eval___4(A,B,C) 


### Specialization of cost equations pyRinit/3 
* CE 1 is refined into CE [31,32] 


### Cost equations --> "Loop" of pyRinit/3 
* CEs [32] --> Loop 27 
* CEs [31] --> Loop 28 

### Ranking functions of CR pyRinit(A,B,C) 

#### Partial ranking functions of CR pyRinit(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of n_eval___2(A,B,C,D,E):
* Chain [[15],17]: 1*it(15)+1
  Such that:it(15) =< B+1

  with precondition: [C=2,D+1=A,B>=0,D+1>=0] 

* Chain [[15],16]: 1*it(15)+0
  Such that:it(15) =< B+1

  with precondition: [C=3,B>=0] 

* Chain [17]: 1
  with precondition: [C=2,A=D+1,A>=0,B+1>=0] 

* Chain [16]: 0
  with precondition: [C=3,B+1>=0] 


#### Cost of chains of n_eval___1(A,B,C,D,E):
* Chain [[18],20]: 1*it(18)+1
  Such that:it(18) =< B+1

  with precondition: [C=2,A=D+1,A>=0,B>=0] 

* Chain [[18],19]: 1*it(18)+0
  Such that:it(18) =< B+1

  with precondition: [C=3,A+1>=0,B>=0] 

* Chain [20]: 1
  with precondition: [C=2,A=D+1,A>=0,B+1>=0] 

* Chain [19]: 0
  with precondition: [C=3,A+1>=0,B+1>=0] 


#### Cost of chains of n_eval___3(A,B,C):
* Chain [[21],22]: 2*it(21)+1*it([22])+1*s(8)+1*s(9)+0
  Such that:it([22]) =< 1
it(21) =< A+1

  with precondition: [C=3,A>=0] 

* Chain [22]: 1*s(5)+1
  Such that:s(5) =< B

  with precondition: [C=3] 


#### Cost of chains of n_eval___2_loop_cont(A,B,C,D):
* Chain [24]: 1*s(15)+2*s(16)+1*s(17)+2*s(18)+1
  Such that:s(15) =< 1
s(16) =< B+1
s(17) =< C

  with precondition: [A=2] 

* Chain [23]: 0
  with precondition: [A=3] 


#### Cost of chains of n_eval___4(A,B,C):
* Chain [26]: 1*s(19)+2*s(20)+4*s(21)+6*s(22)+3
  Such that:s(19) =< B
aux(6) =< 1
aux(7) =< A
s(20) =< aux(6)
s(21) =< aux(7)

  with precondition: [A>=0] 

* Chain [25]: 1*s(28)+1
  Such that:s(28) =< B

  with precondition: [B>=0] 


#### Cost of chains of pyRinit(A,B,C):
* Chain [28]: 1*s(29)+2*s(32)+4*s(33)+6*s(34)+5
  Such that:s(30) =< 1
s(31) =< A
s(29) =< B
s(32) =< s(30)
s(33) =< s(31)

  with precondition: [A>=0] 

* Chain [27]: 1*s(35)+3
  Such that:s(35) =< B

  with precondition: [B>=0] 


Closed-form bounds of pyRinit(A,B,C): 
-------------------------------------
* Chain [28] with precondition: [A>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [27] with precondition: [B>=0] 
    - Upper bound: B+3 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C): inf 
Asymptotic class: infinity 
* Total analysis performed in 180 ms.


-- stats
realtime 0:00.23
usertime 0.21
systime 0.00

