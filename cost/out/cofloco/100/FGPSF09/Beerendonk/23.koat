WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval2___1/7]
1. recursive  : [n_eval1___2/4,n_eval2___1_loop_cont/5,n_eval2___3/4]
2. non_recursive  : [exit_location/1]
3. non_recursive  : [n_eval2___3_loop_cont/2]
4. non_recursive  : [n_eval1___4/4]
5. non_recursive  : [n_start/4]
6. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval2___1/7
1. SCC is partially evaluated into n_eval2___3/4
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_eval1___4/4
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval2___1/7 
* CE 9 is refined into CE [10] 
* CE 7 is refined into CE [11] 
* CE 8 is refined into CE [12] 


### Cost equations --> "Loop" of n_eval2___1/7 
* CEs [12] --> Loop 9 
* CEs [10] --> Loop 10 
* CEs [11] --> Loop 11 

### Ranking functions of CR n_eval2___1(A,B,C,D,E,F,G) 
* RF of phase [9]: [-B+C]

#### Partial ranking functions of CR n_eval2___1(A,B,C,D,E,F,G) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    -B+C


### Specialization of cost equations n_eval2___3/4 
* CE 3 is refined into CE [13] 
* CE 6 is refined into CE [14] 
* CE 4 is refined into CE [15,16] 
* CE 5 is refined into CE [17] 


### Cost equations --> "Loop" of n_eval2___3/4 
* CEs [17] --> Loop 12 
* CEs [16] --> Loop 13 
* CEs [15] --> Loop 14 
* CEs [13,14] --> Loop 15 

### Ranking functions of CR n_eval2___3(A,B,C,D) 
* RF of phase [12]: [A-B-1,A-C-1]

#### Partial ranking functions of CR n_eval2___3(A,B,C,D) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    A-B-1
    A-C-1


### Specialization of cost equations n_eval1___4/4 
* CE 2 is refined into CE [18] 


### Cost equations --> "Loop" of n_eval1___4/4 
* CEs [18] --> Loop 16 

### Ranking functions of CR n_eval1___4(A,B,C,D) 

#### Partial ranking functions of CR n_eval1___4(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [19] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [19] --> Loop 17 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_eval2___1(A,B,C,D,E,F,G):
* Chain [[9],11]: 1*it(9)+1
  Such that:it(9) =< C-F

  with precondition: [D=2,A=E+1,B=F,B=G,A>=B+1,C>=B+1] 

* Chain [[9],10]: 1*it(9)+0
  Such that:it(9) =< -B+C

  with precondition: [D=3,A>=B+1,C>=B+1] 

* Chain [11]: 1
  with precondition: [D=2,C=B,A=E+1,C=F,C=G,A>=C+1] 

* Chain [10]: 0
  with precondition: [D=3,A>=B+1,C>=B] 


#### Cost of chains of n_eval2___3(A,B,C,D):
* Chain [[12],15]: 2*it(12)+1*s(2)+1
  Such that:it(12) =< A-B
s(2) =< -B+C

  with precondition: [D=3,A>=B+2,B>=C] 

* Chain [15]: 1*s(2)+1
  Such that:s(2) =< -B+C

  with precondition: [D=3,A>=B+1] 

* Chain [14,[12],15]: 2*it(12)+4
  Such that:it(12) =< A-C

  with precondition: [D=3,B+1=C,A>=B+3] 

* Chain [14,15]: 4
  with precondition: [D=3,B+1=C,A>=B+2] 

* Chain [13,[12],15]: 2*it(12)+1*s(3)+4
  Such that:it(12) =< A-B
s(3) =< -B+C

  with precondition: [D=3,A>=B+3,C>=B+2] 

* Chain [13,15]: 1*s(3)+4
  Such that:s(3) =< -B+C

  with precondition: [D=3,A>=B+2,C>=B+2] 


#### Cost of chains of n_eval1___4(A,B,C,D):
* Chain [16]: 2*s(11)+4*s(14)+4*s(15)+5
  Such that:s(12) =< A-B
s(11) =< A-C
s(13) =< -B+C
s(14) =< s(12)
s(15) =< s(13)

  with precondition: [A>=B+1] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [17]: 2*s(17)+4*s(19)+4*s(20)+7
  Such that:s(16) =< A-B
s(17) =< A-C
s(18) =< -B+C
s(19) =< s(16)
s(20) =< s(18)

  with precondition: [A>=B+1] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [17] with precondition: [A>=B+1] 
    - Upper bound: 4*A-4*B+ (nat(-B+C)*4+7)+nat(A-C)*2 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C,D): 4*A-4*B+ (nat(-B+C)*4+7)+nat(A-C)*2 
Asymptotic class: n 
* Total analysis performed in 198 ms.


-- stats
realtime 0:00.24
usertime 0.23
systime 0.00

