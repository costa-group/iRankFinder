WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval2___4/5]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [n_eval1___3/3]
3. non_recursive  : [n_eval2___4_loop_cont/4]
4. non_recursive  : [n_eval2___6/3]
5. recursive  : [n_eval3___2/5]
6. non_recursive  : [n_eval1___1/3]
7. non_recursive  : [n_eval3___2_loop_cont/4]
8. non_recursive  : [n_eval3___5/3]
9. non_recursive  : [n_eval1___7/3]
10. non_recursive  : [n_start/3]
11. non_recursive  : [pyRinit/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval2___4/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_eval2___4_loop_cont/4
4. SCC is partially evaluated into n_eval2___6/3
5. SCC is partially evaluated into n_eval3___2/5
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into n_eval3___2_loop_cont/4
8. SCC is partially evaluated into n_eval3___5/3
9. SCC is partially evaluated into n_eval1___7/3
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into pyRinit/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval2___4/5 
* CE 8 is refined into CE [16] 
* CE 6 is refined into CE [17] 
* CE 7 is refined into CE [18] 


### Cost equations --> "Loop" of n_eval2___4/5 
* CEs [18] --> Loop 16 
* CEs [16] --> Loop 17 
* CEs [17] --> Loop 18 

### Ranking functions of CR n_eval2___4(A,B,C,D,E) 
* RF of phase [16]: [A]

#### Partial ranking functions of CR n_eval2___4(A,B,C,D,E) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    A


### Specialization of cost equations n_eval2___4_loop_cont/4 
* CE 10 is refined into CE [19] 
* CE 9 is refined into CE [20] 


### Cost equations --> "Loop" of n_eval2___4_loop_cont/4 
* CEs [19] --> Loop 19 
* CEs [20] --> Loop 20 

### Ranking functions of CR n_eval2___4_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR n_eval2___4_loop_cont(A,B,C,D) 


### Specialization of cost equations n_eval2___6/3 
* CE 4 is refined into CE [21,22] 


### Cost equations --> "Loop" of n_eval2___6/3 
* CEs [21,22] --> Loop 21 

### Ranking functions of CR n_eval2___6(A,B,C) 

#### Partial ranking functions of CR n_eval2___6(A,B,C) 


### Specialization of cost equations n_eval3___2/5 
* CE 13 is refined into CE [23] 
* CE 11 is refined into CE [24] 
* CE 12 is refined into CE [25] 


### Cost equations --> "Loop" of n_eval3___2/5 
* CEs [25] --> Loop 22 
* CEs [23] --> Loop 23 
* CEs [24] --> Loop 24 

### Ranking functions of CR n_eval3___2(A,B,C,D,E) 
* RF of phase [22]: [B]

#### Partial ranking functions of CR n_eval3___2(A,B,C,D,E) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    B


### Specialization of cost equations n_eval3___2_loop_cont/4 
* CE 14 is refined into CE [26] 
* CE 15 is refined into CE [27] 


### Cost equations --> "Loop" of n_eval3___2_loop_cont/4 
* CEs [26] --> Loop 25 
* CEs [27] --> Loop 26 

### Ranking functions of CR n_eval3___2_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR n_eval3___2_loop_cont(A,B,C,D) 


### Specialization of cost equations n_eval3___5/3 
* CE 5 is refined into CE [28,29,30] 


### Cost equations --> "Loop" of n_eval3___5/3 
* CEs [30] --> Loop 27 
* CEs [28,29] --> Loop 28 

### Ranking functions of CR n_eval3___5(A,B,C) 

#### Partial ranking functions of CR n_eval3___5(A,B,C) 


### Specialization of cost equations n_eval1___7/3 
* CE 2 is refined into CE [31] 
* CE 3 is refined into CE [32] 


### Cost equations --> "Loop" of n_eval1___7/3 
* CEs [31] --> Loop 29 
* CEs [32] --> Loop 30 

### Ranking functions of CR n_eval1___7(A,B,C) 

#### Partial ranking functions of CR n_eval1___7(A,B,C) 


### Specialization of cost equations pyRinit/3 
* CE 1 is refined into CE [33,34] 


### Cost equations --> "Loop" of pyRinit/3 
* CEs [34] --> Loop 31 
* CEs [33] --> Loop 32 

### Ranking functions of CR pyRinit(A,B,C) 

#### Partial ranking functions of CR pyRinit(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of n_eval2___4(A,B,C,D,E):
* Chain [[16],18]: 1*it(16)+1
  Such that:it(16) =< A

  with precondition: [C=2,D=0,B=E,A>=1,B>=1] 

* Chain [[16],17]: 1*it(16)+0
  Such that:it(16) =< A

  with precondition: [C=3,A>=1,B>=1] 

* Chain [17]: 0
  with precondition: [C=3,B>=1] 


#### Cost of chains of n_eval2___4_loop_cont(A,B,C,D):
* Chain [20]: 0
  with precondition: [A=2] 

* Chain [19]: 0
  with precondition: [A=3] 


#### Cost of chains of n_eval2___6(A,B,C):
* Chain [21]: 2*s(2)+2
  Such that:aux(1) =< A
s(2) =< aux(1)

  with precondition: [B>=1,A>=B+1] 


#### Cost of chains of n_eval3___2(A,B,C,D,E):
* Chain [[22],24]: 1*it(22)+1
  Such that:it(22) =< B

  with precondition: [C=4,E=0,A=D,A>=1,B>=1] 

* Chain [[22],23]: 1*it(22)+0
  Such that:it(22) =< B

  with precondition: [C=3,A>=1,B>=1] 

* Chain [24]: 1
  with precondition: [B=0,C=4,E=0,A=D,A>=1] 

* Chain [23]: 0
  with precondition: [C=3,A>=1,B>=0] 


#### Cost of chains of n_eval3___2_loop_cont(A,B,C,D):
* Chain [26]: 0
  with precondition: [A=3] 

* Chain [25]: 0
  with precondition: [A=4] 


#### Cost of chains of n_eval3___5(A,B,C):
* Chain [28]: 1*s(5)+2
  Such that:s(5) =< B

  with precondition: [A>=1,B>=A] 

* Chain [27]: 1*s(6)+2
  Such that:s(6) =< B

  with precondition: [A>=1,B>=2,B>=A] 


#### Cost of chains of n_eval1___7(A,B,C):
* Chain [30]: 2*s(10)+3
  Such that:s(9) =< B
s(10) =< s(9)

  with precondition: [A>=1,B>=A] 

* Chain [29]: 2*s(12)+3
  Such that:s(11) =< A
s(12) =< s(11)

  with precondition: [B>=1,A>=B+1] 


#### Cost of chains of pyRinit(A,B,C):
* Chain [32]: 2*s(14)+5
  Such that:s(13) =< B
s(14) =< s(13)

  with precondition: [A>=1,B>=A] 

* Chain [31]: 2*s(16)+5
  Such that:s(15) =< A
s(16) =< s(15)

  with precondition: [B>=1,A>=B+1] 


Closed-form bounds of pyRinit(A,B,C): 
-------------------------------------
* Chain [32] with precondition: [A>=1,B>=A] 
    - Upper bound: 2*B+5 
    - Complexity: n 
* Chain [31] with precondition: [B>=1,A>=B+1] 
    - Upper bound: 2*A+5 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C): max([2*B,2*A])+5 
Asymptotic class: n 
* Total analysis performed in 144 ms.


-- stats
realtime 0:00.19
usertime 0.17
systime 0.00

