WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval___2/7]
1. non_recursive  : [exit_location/1]
2. recursive  : [n_eval___1/7]
3. recursive  : [n_eval___1_loop_cont/5,n_eval___3/4]
4. non_recursive  : [n_eval___3_loop_cont/2]
5. non_recursive  : [n_eval___2_loop_cont/5]
6. non_recursive  : [n_eval___4/4]
7. non_recursive  : [n_start/4]
8. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval___2/7
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into n_eval___1/7
3. SCC is partially evaluated into n_eval___3/4
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into n_eval___2_loop_cont/5
6. SCC is partially evaluated into n_eval___4/4
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval___2/7 
* CE 6 is refined into CE [15] 
* CE 5 is refined into CE [16] 
* CE 4 is refined into CE [17] 


### Cost equations --> "Loop" of n_eval___2/7 
* CEs [17] --> Loop 14 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

### Ranking functions of CR n_eval___2(A,B,C,D,E,F,G) 
* RF of phase [14]: [A-C,B-C+1]

#### Partial ranking functions of CR n_eval___2(A,B,C,D,E,F,G) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    A-C
    B-C+1


### Specialization of cost equations n_eval___1/7 
* CE 14 is refined into CE [18] 
* CE 13 is refined into CE [19] 


### Cost equations --> "Loop" of n_eval___1/7 
* CEs [18] --> Loop 17 
* CEs [19] --> Loop 18 

### Ranking functions of CR n_eval___1(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR n_eval___1(A,B,C,D,E,F,G) 


### Specialization of cost equations n_eval___3/4 
* CE 9 is refined into CE [20] 
* CE 12 is refined into CE [21] 
* CE 11 is refined into CE [22] 
* CE 10 is refined into CE [23] 


### Cost equations --> "Loop" of n_eval___3/4 
* CEs [22] --> Loop 19 
* CEs [23] --> Loop 20 
* CEs [20,21] --> Loop 21 

### Ranking functions of CR n_eval___3(A,B,C,D) 
* RF of phase [19]: [A-B,-B+C]
* RF of phase [20]: [A-B,A-C]

#### Partial ranking functions of CR n_eval___3(A,B,C,D) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    A-B
    -B+C
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    A-B
    A-C


### Specialization of cost equations n_eval___2_loop_cont/5 
* CE 8 is refined into CE [24] 
* CE 7 is refined into CE [25] 


### Cost equations --> "Loop" of n_eval___2_loop_cont/5 
* CEs [24] --> Loop 22 
* CEs [25] --> Loop 23 

### Ranking functions of CR n_eval___2_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR n_eval___2_loop_cont(A,B,C,D,E) 


### Specialization of cost equations n_eval___4/4 
* CE 2 is refined into CE [26,27,28] 
* CE 3 is refined into CE [29] 


### Cost equations --> "Loop" of n_eval___4/4 
* CEs [29] --> Loop 24 
* CEs [26,27,28] --> Loop 25 

### Ranking functions of CR n_eval___4(A,B,C,D) 

#### Partial ranking functions of CR n_eval___4(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [30,31] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [31] --> Loop 26 
* CEs [30] --> Loop 27 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_eval___2(A,B,C,D,E,F,G):
* Chain [[14],16]: 1*it(14)+1
  Such that:it(14) =< -C+F

  with precondition: [D=2,A=E,B+1=F,B+1=G,A>=B+1,B>=C] 

* Chain [[14],15]: 1*it(14)+0
  Such that:it(14) =< B-C+1

  with precondition: [D=3,A>=B+1,B>=C] 

* Chain [16]: 1
  with precondition: [D=2,B+1=C,A=E,B+1=F,B+1=G,A>=B+1] 

* Chain [15]: 0
  with precondition: [D=3,A>=B+1,B+1>=C] 


#### Cost of chains of n_eval___1(A,B,C,D,E,F,G):
* Chain [18]: 1
  with precondition: [D=2,C=B+1,A=E,C=F,C=G,A>=C] 

* Chain [17]: 0
  with precondition: [D=3,C=B+1,A>=C] 


#### Cost of chains of n_eval___3(A,B,C,D):
* Chain [[20],21]: 2*it(20)+1
  Such that:it(20) =< A-C

  with precondition: [D=3,B=C,A>=B+1] 

* Chain [[19],[20],21]: 1*it(19)+2*it(20)+1
  Such that:it(20) =< A-C
it(19) =< -B+C

  with precondition: [D=3,C>=B+1,A>=C+1] 

* Chain [[19],21]: 1*it(19)+1
  Such that:it(19) =< -B+C

  with precondition: [D=3,A>=B+1,C>=B+1] 

* Chain [21]: 1
  with precondition: [D=3] 


#### Cost of chains of n_eval___2_loop_cont(A,B,C,D,E):
* Chain [23]: 4*s(8)+2*s(9)+1
  Such that:s(6) =< B-D
s(7) =< -C+D
s(8) =< s(6)
s(9) =< s(7)

  with precondition: [A=2] 

* Chain [22]: 0
  with precondition: [A=3] 


#### Cost of chains of n_eval___4(A,B,C,D):
* Chain [25]: 4*s(12)+2*s(14)+4*s(17)+3
  Such that:s(15) =< A-B
s(10) =< A-C
aux(3) =< B-C
s(14) =< aux(3)
s(17) =< s(15)
s(12) =< s(10)

  with precondition: [A>=B+1,B>=C] 

* Chain [24]: 4*s(22)+2*s(23)+2
  Such that:s(20) =< A-C
s(21) =< -B+C
s(22) =< s(20)
s(23) =< s(21)

  with precondition: [A>=B+1,C>=B+1] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [27]: 4*s(26)+2*s(27)+4
  Such that:s(24) =< A-C
s(25) =< -B+C
s(26) =< s(24)
s(27) =< s(25)

  with precondition: [A>=B+1,C>=B+1] 

* Chain [26]: 2*s(31)+4*s(32)+4*s(33)+5
  Such that:s(28) =< A-B
s(29) =< A-C
s(30) =< B-C
s(31) =< s(30)
s(32) =< s(28)
s(33) =< s(29)

  with precondition: [A>=B+1,B>=C] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [27] with precondition: [A>=B+1,C>=B+1] 
    - Upper bound: -2*B+2*C+4+nat(A-C)*4 
    - Complexity: n 
* Chain [26] with precondition: [A>=B+1,B>=C] 
    - Upper bound: 8*A-2*B-6*C+5 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C,D): nat(A-C)*4+4+max([nat(-B+C)*2,4*A-4*B+1+nat(B-C)*2]) 
Asymptotic class: n 
* Total analysis performed in 214 ms.


-- stats
realtime 0:00.26
usertime 0.26
systime 0.00

