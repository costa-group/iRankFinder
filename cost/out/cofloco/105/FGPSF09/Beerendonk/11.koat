WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval___1/5]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [n_eval___2/3]
3. non_recursive  : [n_eval___1_loop_cont/4]
4. non_recursive  : [n_eval___3/3]
5. non_recursive  : [n_eval___4/3]
6. non_recursive  : [n_eval___5/3]
7. non_recursive  : [n_start/3]
8. non_recursive  : [pyRinit/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval___1/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_eval___1_loop_cont/4
4. SCC is partially evaluated into n_eval___3/3
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into n_eval___5/3
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into pyRinit/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval___1/5 
* CE 8 is refined into CE [13] 
* CE 7 is refined into CE [14] 
* CE 6 is refined into CE [15] 


### Cost equations --> "Loop" of n_eval___1/5 
* CEs [15] --> Loop 10 
* CEs [13] --> Loop 11 
* CEs [14] --> Loop 12 

### Ranking functions of CR n_eval___1(A,B,C,D,E) 
* RF of phase [10]: [B]

#### Partial ranking functions of CR n_eval___1(A,B,C,D,E) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    B


### Specialization of cost equations n_eval___1_loop_cont/4 
* CE 10 is refined into CE [16] 
* CE 9 is refined into CE [17] 


### Cost equations --> "Loop" of n_eval___1_loop_cont/4 
* CEs [16] --> Loop 13 
* CEs [17] --> Loop 14 

### Ranking functions of CR n_eval___1_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR n_eval___1_loop_cont(A,B,C,D) 


### Specialization of cost equations n_eval___3/3 
* CE 11 is refined into CE [18,19,20] 
* CE 12 is refined into CE [21] 


### Cost equations --> "Loop" of n_eval___3/3 
* CEs [18] --> Loop 15 
* CEs [19,20,21] --> Loop 16 

### Ranking functions of CR n_eval___3(A,B,C) 

#### Partial ranking functions of CR n_eval___3(A,B,C) 


### Specialization of cost equations n_eval___5/3 
* CE 2 is refined into CE [22,23,24] 
* CE 3 is refined into CE [25] 
* CE 4 is refined into CE [26] 
* CE 5 is refined into CE [27] 


### Cost equations --> "Loop" of n_eval___5/3 
* CEs [26] --> Loop 17 
* CEs [22] --> Loop 18 
* CEs [23,24,25] --> Loop 19 
* CEs [27] --> Loop 20 

### Ranking functions of CR n_eval___5(A,B,C) 

#### Partial ranking functions of CR n_eval___5(A,B,C) 


### Specialization of cost equations pyRinit/3 
* CE 1 is refined into CE [28,29,30] 


### Cost equations --> "Loop" of pyRinit/3 
* CEs [29] --> Loop 21 
* CEs [30] --> Loop 22 
* CEs [28] --> Loop 23 

### Ranking functions of CR pyRinit(A,B,C) 

#### Partial ranking functions of CR pyRinit(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of n_eval___1(A,B,C,D,E):
* Chain [[10],12]: 1*it(10)+1
  Such that:it(10) =< B

  with precondition: [C=2,E=0,A=D,B>=2,A>=B+1] 

* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< B

  with precondition: [C=3,B>=1,A>=B+1] 

* Chain [12]: 1
  with precondition: [B=1,C=2,E=0,A=D,A>=2] 

* Chain [11]: 0
  with precondition: [C=3,B>=0,A>=B+1] 


#### Cost of chains of n_eval___1_loop_cont(A,B,C,D):
* Chain [14]: 0
  with precondition: [A=2] 

* Chain [13]: 0
  with precondition: [A=3] 


#### Cost of chains of n_eval___3(A,B,C):
* Chain [16]: 1*s(2)+1*s(3)+2
  Such that:s(3) =< A
s(2) =< B

  with precondition: [B=A,B>=1] 

* Chain [15]: 2
  with precondition: [A=2,B=2] 


#### Cost of chains of n_eval___5(A,B,C):
* Chain [20]: 1
  with precondition: [B=1,0>=A] 

* Chain [19]: 2*s(6)+2
  Such that:aux(1) =< B
s(6) =< aux(1)

  with precondition: [B>=1,A>=B] 

* Chain [18]: 2
  with precondition: [B=2,A>=2] 

* Chain [17]: 2*s(8)+3
  Such that:aux(2) =< A
s(8) =< aux(2)

  with precondition: [A>=1,B>=A+1] 


#### Cost of chains of pyRinit(A,B,C):
* Chain [23]: 3
  with precondition: [B=1,0>=A] 

* Chain [22]: 2*s(13)+5
  Such that:s(12) =< A
s(13) =< s(12)

  with precondition: [A>=1,B>=A+1] 

* Chain [21]: 2*s(15)+4
  Such that:s(14) =< B
s(15) =< s(14)

  with precondition: [B>=1,A>=B] 


Closed-form bounds of pyRinit(A,B,C): 
-------------------------------------
* Chain [23] with precondition: [B=1,0>=A] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [22] with precondition: [A>=1,B>=A+1] 
    - Upper bound: 2*A+5 
    - Complexity: n 
* Chain [21] with precondition: [B>=1,A>=B] 
    - Upper bound: 2*B+4 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C): max([2*B+1,nat(A)*2+2])+3 
Asymptotic class: n 
* Total analysis performed in 114 ms.


-- stats
realtime 0:00.18
usertime 0.15
systime 0.00

