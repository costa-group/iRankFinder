WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval1___3/3,n_eval2___1/3]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [n_eval1___3_loop_cont/2]
3. recursive  : [n_eval2___2/5]
4. non_recursive  : [n_eval2___2_loop_cont/4]
5. non_recursive  : [n_eval2___4/3]
6. non_recursive  : [n_eval1___5/3]
7. non_recursive  : [n_start/3]
8. non_recursive  : [pyRinit/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval1___3/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_eval2___2/5
4. SCC is partially evaluated into n_eval2___2_loop_cont/4
5. SCC is partially evaluated into n_eval2___4/3
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into pyRinit/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval1___3/3 
* CE 5 is refined into CE [11] 
* CE 4 is refined into CE [12] 


### Cost equations --> "Loop" of n_eval1___3/3 
* CEs [12] --> Loop 11 
* CEs [11] --> Loop 12 

### Ranking functions of CR n_eval1___3(A,B,C) 
* RF of phase [11]: [A]

#### Partial ranking functions of CR n_eval1___3(A,B,C) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    A


### Specialization of cost equations n_eval2___2/5 
* CE 8 is refined into CE [13] 
* CE 6 is refined into CE [14] 
* CE 7 is refined into CE [15] 


### Cost equations --> "Loop" of n_eval2___2/5 
* CEs [15] --> Loop 13 
* CEs [13] --> Loop 14 
* CEs [14] --> Loop 15 

### Ranking functions of CR n_eval2___2(A,B,C,D,E) 
* RF of phase [13]: [B]

#### Partial ranking functions of CR n_eval2___2(A,B,C,D,E) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    B


### Specialization of cost equations n_eval2___2_loop_cont/4 
* CE 9 is refined into CE [16] 
* CE 10 is refined into CE [17] 


### Cost equations --> "Loop" of n_eval2___2_loop_cont/4 
* CEs [16] --> Loop 16 
* CEs [17] --> Loop 17 

### Ranking functions of CR n_eval2___2_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR n_eval2___2_loop_cont(A,B,C,D) 


### Specialization of cost equations n_eval2___4/3 
* CE 3 is refined into CE [18,19,20] 
* CE 2 is refined into CE [21] 


### Cost equations --> "Loop" of n_eval2___4/3 
* CEs [21] --> Loop 18 
* CEs [18,19,20] --> Loop 19 

### Ranking functions of CR n_eval2___4(A,B,C) 

#### Partial ranking functions of CR n_eval2___4(A,B,C) 


### Specialization of cost equations pyRinit/3 
* CE 1 is refined into CE [22,23] 


### Cost equations --> "Loop" of pyRinit/3 
* CEs [23] --> Loop 20 
* CEs [22] --> Loop 21 

### Ranking functions of CR pyRinit(A,B,C) 

#### Partial ranking functions of CR pyRinit(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of n_eval1___3(A,B,C):
* Chain [[11],12]: 2*it(11)+0
  Such that:it(11) =< A

  with precondition: [C=2,0>=B,A>=1] 

* Chain [12]: 0
  with precondition: [C=2] 


#### Cost of chains of n_eval2___2(A,B,C,D,E):
* Chain [[13],15]: 1*it(13)+1
  Such that:it(13) =< B

  with precondition: [C=3,E=0,A=D+1,A>=1,B>=1] 

* Chain [[13],14]: 1*it(13)+0
  Such that:it(13) =< B

  with precondition: [C=2,A>=1,B>=1] 

* Chain [15]: 1
  with precondition: [B=0,C=3,E=0,A=D+1,A>=1] 

* Chain [14]: 0
  with precondition: [C=2,A>=1,B>=0] 


#### Cost of chains of n_eval2___2_loop_cont(A,B,C,D):
* Chain [17]: 0
  with precondition: [A=2] 

* Chain [16]: 2*s(3)+0
  Such that:s(3) =< B

  with precondition: [A=3] 


#### Cost of chains of n_eval2___4(A,B,C):
* Chain [19]: 4*s(4)+2*s(5)+2
  Such that:aux(1) =< A
aux(2) =< B
s(4) =< aux(1)
s(5) =< aux(2)

  with precondition: [A>=1,B>=1] 

* Chain [18]: 2*s(8)+1
  Such that:s(8) =< A

  with precondition: [0>=B,A>=1] 


#### Cost of chains of pyRinit(A,B,C):
* Chain [21]: 2*s(9)+4
  Such that:s(9) =< A

  with precondition: [0>=B,A>=1] 

* Chain [20]: 4*s(12)+2*s(13)+5
  Such that:s(10) =< A
s(11) =< B
s(12) =< s(10)
s(13) =< s(11)

  with precondition: [A>=1,B>=1] 


Closed-form bounds of pyRinit(A,B,C): 
-------------------------------------
* Chain [21] with precondition: [0>=B,A>=1] 
    - Upper bound: 2*A+4 
    - Complexity: n 
* Chain [20] with precondition: [A>=1,B>=1] 
    - Upper bound: 4*A+2*B+5 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C): 2*A+1+nat(B)*2+ (2*A+4) 
Asymptotic class: n 
* Total analysis performed in 114 ms.


-- stats
realtime 0:00.21
usertime 0.15
systime 0.00

