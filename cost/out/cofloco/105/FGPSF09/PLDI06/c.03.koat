WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval___3/7]
1. non_recursive  : [exit_location/1]
2. recursive  : [n_eval___1/4,n_eval___2/4]
3. non_recursive  : [n_eval___1_loop_cont/2]
4. non_recursive  : [n_eval___3_loop_cont/5]
5. recursive  : [n_eval___4/7]
6. non_recursive  : [n_eval___4_loop_cont/5]
7. non_recursive  : [n_eval___5/4]
8. non_recursive  : [n_start/4]
9. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval___3/7
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into n_eval___2/4
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_eval___3_loop_cont/5
5. SCC is partially evaluated into n_eval___4/7
6. SCC is partially evaluated into n_eval___4_loop_cont/5
7. SCC is partially evaluated into n_eval___5/4
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval___3/7 
* CE 4 is refined into CE [17] 
* CE 6 is refined into CE [18] 
* CE 5 is refined into CE [19] 


### Cost equations --> "Loop" of n_eval___3/7 
* CEs [19] --> Loop 16 
* CEs [17] --> Loop 17 
* CEs [18] --> Loop 18 

### Ranking functions of CR n_eval___3(A,B,C,D,E,F,G) 
* RF of phase [16]: [A-C,B-C+1]

#### Partial ranking functions of CR n_eval___3(A,B,C,D,E,F,G) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    A-C
    B-C+1


### Specialization of cost equations n_eval___2/4 
* CE 16 is refined into CE [20] 
* CE 15 is refined into CE [21] 


### Cost equations --> "Loop" of n_eval___2/4 
* CEs [21] --> Loop 19 
* CEs [20] --> Loop 20 

### Ranking functions of CR n_eval___2(A,B,C,D) 
* RF of phase [20]: [A-B-1,A-C]

#### Partial ranking functions of CR n_eval___2(A,B,C,D) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    A-B-1
    A-C


### Specialization of cost equations n_eval___3_loop_cont/5 
* CE 7 is refined into CE [22] 
* CE 8 is refined into CE [23] 
* CE 9 is refined into CE [24] 


### Cost equations --> "Loop" of n_eval___3_loop_cont/5 
* CEs [22,23] --> Loop 21 
* CEs [24] --> Loop 22 

### Ranking functions of CR n_eval___3_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR n_eval___3_loop_cont(A,B,C,D,E) 


### Specialization of cost equations n_eval___4/7 
* CE 10 is refined into CE [25] 
* CE 12 is refined into CE [26] 
* CE 11 is refined into CE [27] 


### Cost equations --> "Loop" of n_eval___4/7 
* CEs [27] --> Loop 23 
* CEs [25] --> Loop 24 
* CEs [26] --> Loop 25 

### Ranking functions of CR n_eval___4(A,B,C,D,E,F,G) 
* RF of phase [23]: [A-B,-B+C]

#### Partial ranking functions of CR n_eval___4(A,B,C,D,E,F,G) 
* Partial RF of phase [23]:
  - RF of loop [23:1]:
    A-B
    -B+C


### Specialization of cost equations n_eval___4_loop_cont/5 
* CE 13 is refined into CE [28] 
* CE 14 is refined into CE [29] 


### Cost equations --> "Loop" of n_eval___4_loop_cont/5 
* CEs [28] --> Loop 26 
* CEs [29] --> Loop 27 

### Ranking functions of CR n_eval___4_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR n_eval___4_loop_cont(A,B,C,D,E) 


### Specialization of cost equations n_eval___5/4 
* CE 2 is refined into CE [30,31,32] 
* CE 3 is refined into CE [33,34,35] 


### Cost equations --> "Loop" of n_eval___5/4 
* CEs [33,34,35] --> Loop 28 
* CEs [30,31,32] --> Loop 29 

### Ranking functions of CR n_eval___5(A,B,C,D) 

#### Partial ranking functions of CR n_eval___5(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [36,37] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [37] --> Loop 30 
* CEs [36] --> Loop 31 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_eval___3(A,B,C,D,E,F,G):
* Chain [[16],18]: 1*it(16)+0
  Such that:it(16) =< B-C+1

  with precondition: [D=2,A>=B+1,B>=C] 

* Chain [[16],17]: 1*it(16)+1
  Such that:it(16) =< -C+F

  with precondition: [D=3,A=E,B+1=F,B+1=G,A>=B+1,B>=C] 

* Chain [18]: 0
  with precondition: [D=2,A>=B+1,B+1>=C] 

* Chain [17]: 1
  with precondition: [D=3,B+1=C,A=E,B+1=F,B+1=G,A>=B+1] 


#### Cost of chains of n_eval___2(A,B,C,D):
* Chain [[20],19]: 2*it(20)+1
  Such that:it(20) =< A-C

  with precondition: [D=2,B+1=C,A>=B+2] 

* Chain [19]: 1
  with precondition: [D=2,C=B+1,A>=C] 


#### Cost of chains of n_eval___3_loop_cont(A,B,C,D,E):
* Chain [22]: 0
  with precondition: [A=2] 

* Chain [21]: 2*s(3)+2
  Such that:s(3) =< B-D

  with precondition: [A=3] 


#### Cost of chains of n_eval___4(A,B,C,D,E,F,G):
* Chain [[23],25]: 1*it(23)+0
  Such that:it(23) =< A-B

  with precondition: [D=2,A>=B+1,C>=B+1] 

* Chain [[23],24]: 1*it(23)+1
  Such that:it(23) =< -B+F

  with precondition: [D=4,A=E,C=F,C+1=G,C>=B+1,A>=C+1] 

* Chain [25]: 0
  with precondition: [D=2,A>=B,C>=B] 

* Chain [24]: 1
  with precondition: [D=4,C=B,A=E,C=F,C+1=G,A>=C+1] 


#### Cost of chains of n_eval___4_loop_cont(A,B,C,D,E):
* Chain [27]: 0
  with precondition: [A=2] 

* Chain [26]: 2*s(5)+1
  Such that:s(5) =< B-D

  with precondition: [A=4,C+1=D,B>=C+1] 


#### Cost of chains of n_eval___5(A,B,C,D):
* Chain [29]: 2*s(6)+2*s(7)+2*s(9)+4
  Such that:s(9) =< A-B
s(7) =< A-C
aux(1) =< B-C
s(6) =< aux(1)

  with precondition: [A>=B+1,B>=C] 

* Chain [28]: 1*s(10)+4*s(11)+1*s(12)+3
  Such that:s(10) =< A-B
s(12) =< -B+C
aux(2) =< A-C
s(11) =< aux(2)

  with precondition: [A>=B+1,C>=B+1] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [31]: 1*s(14)+1*s(15)+4*s(17)+5
  Such that:s(14) =< A-B
s(16) =< A-C
s(15) =< -B+C
s(17) =< s(16)

  with precondition: [A>=B+1,C>=B+1] 

* Chain [30]: 2*s(18)+2*s(19)+2*s(21)+6
  Such that:s(18) =< A-B
s(19) =< A-C
s(20) =< B-C
s(21) =< s(20)

  with precondition: [A>=B+1,B>=C] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [31] with precondition: [A>=B+1,C>=B+1] 
    - Upper bound: A-2*B+C+5+nat(A-C)*4 
    - Complexity: n 
* Chain [30] with precondition: [A>=B+1,B>=C] 
    - Upper bound: 4*A-4*C+6 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C,D): A-B+5+nat(A-C)*2+max([nat(A-C)*2+nat(-B+C),A-B+1+nat(B-C)*2]) 
Asymptotic class: n 
* Total analysis performed in 268 ms.


-- stats
realtime 0:00.40
usertime 0.30
systime 0.00

