WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_evalrealheapsortbb3in___22/9,n_evalrealheapsortbb4in___20/9]
1. recursive  : [n_evalrealheapsortbb3in___22_loop_cont/10,n_evalrealheapsortbb3in___24/9,n_evalrealheapsortbb4in___23/9,n_evalrealheapsortbb6in___19/9,n_evalrealheapsortbb6in___21/9]
2. non_recursive  : [exit_location/1]
3. recursive  : [n_evalrealheapsortbb16in___7/9,n_evalrealheapsortbb18in___6/9]
4. recursive  : [n_evalrealheapsortbb10in___5/9,n_evalrealheapsortbb13in___2/9,n_evalrealheapsortbb13in___3/9,n_evalrealheapsortbb16in___11/9,n_evalrealheapsortbb9in___8/9]
5. recursive  : [n_evalrealheapsortbb10in___15/9,n_evalrealheapsortbb13in___12/9,n_evalrealheapsortbb13in___13/9,n_evalrealheapsortbb13in___14/9,n_evalrealheapsortbb13in___4/9,n_evalrealheapsortbb16in___1/9,n_evalrealheapsortbb16in___10/9,n_evalrealheapsortbb16in___11_loop_cont/10,n_evalrealheapsortbb16in___7_loop_cont/10,n_evalrealheapsortbb18in___9/9,n_evalrealheapsortbb9in___16/9]
6. non_recursive  : [n_evalrealheapsortstop___25/5]
7. non_recursive  : [n_evalrealheapsortbb9in___16_loop_cont/6]
8. non_recursive  : [n_evalrealheapsortbb16in___17/5]
9. non_recursive  : [n_evalrealheapsortbb18in___18/5]
10. non_recursive  : [n_evalrealheapsortbb3in___24_loop_cont/6]
11. non_recursive  : [n_evalrealheapsortbb6in___26/5]
12. non_recursive  : [n_evalrealheapsortentryin___27/5]
13. non_recursive  : [n_evalrealheapsortstart/5]
14. non_recursive  : [pyRinit/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_evalrealheapsortbb3in___22/9
1. SCC is partially evaluated into n_evalrealheapsortbb3in___24/9
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_evalrealheapsortbb16in___7/9
4. SCC is partially evaluated into n_evalrealheapsortbb16in___11/9
5. SCC is partially evaluated into n_evalrealheapsortbb9in___16/9
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into n_evalrealheapsortbb9in___16_loop_cont/6
8. SCC is partially evaluated into n_evalrealheapsortbb16in___17/5
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into n_evalrealheapsortbb3in___24_loop_cont/6
11. SCC is partially evaluated into n_evalrealheapsortbb6in___26/5
12. SCC is partially evaluated into n_evalrealheapsortentryin___27/5
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into pyRinit/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalrealheapsortbb3in___22/9 
* CE 15 is refined into CE [62] 
* CE 18 is refined into CE [63] 
* CE 17 is refined into CE [64] 
* CE 16 is refined into CE [65] 


### Cost equations --> "Loop" of n_evalrealheapsortbb3in___22/9 
* CEs [65] --> Loop 33 
* CEs [62] --> Loop 34 
* CEs [63] --> Loop 35 
* CEs [64] --> Loop 36 

### Ranking functions of CR n_evalrealheapsortbb3in___22(A,B,C,D,E,F,G,H,I) 
* RF of phase [33]: [C]

#### Partial ranking functions of CR n_evalrealheapsortbb3in___22(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [33]:
  - RF of loop [33:1]:
    C


### Specialization of cost equations n_evalrealheapsortbb3in___24/9 
* CE 6 is refined into CE [66,67] 
* CE 8 is refined into CE [68,69] 
* CE 10 is refined into CE [70] 
* CE 5 is refined into CE [71] 
* CE 12 is refined into CE [72] 
* CE 7 is refined into CE [73,74] 
* CE 9 is refined into CE [75,76] 
* CE 11 is refined into CE [77] 


### Cost equations --> "Loop" of n_evalrealheapsortbb3in___24/9 
* CEs [73,74,75,76,77] --> Loop 37 
* CEs [68] --> Loop 38 
* CEs [69] --> Loop 39 
* CEs [67] --> Loop 40 
* CEs [70] --> Loop 41 
* CEs [71,72] --> Loop 42 
* CEs [66] --> Loop 43 

### Ranking functions of CR n_evalrealheapsortbb3in___24(A,B,C,D,E,F,G,H,I) 
* RF of phase [37]: [A-B-1,A-C-1]

#### Partial ranking functions of CR n_evalrealheapsortbb3in___24(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [37]:
  - RF of loop [37:1]:
    A-B-1
    A-C-1


### Specialization of cost equations n_evalrealheapsortbb16in___7/9 
* CE 61 is refined into CE [78] 
* CE 60 is refined into CE [79] 
* CE 59 is refined into CE [80] 


### Cost equations --> "Loop" of n_evalrealheapsortbb16in___7/9 
* CEs [79] --> Loop 44 
* CEs [78] --> Loop 45 
* CEs [80] --> Loop 46 

### Ranking functions of CR n_evalrealheapsortbb16in___7(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR n_evalrealheapsortbb16in___7(A,B,C,D,E,F,G,H,I) 


### Specialization of cost equations n_evalrealheapsortbb16in___11/9 
* CE 56 is refined into CE [81] 
* CE 57 is refined into CE [82] 
* CE 52 is refined into CE [83] 
* CE 54 is refined into CE [84] 
* CE 58 is refined into CE [85] 
* CE 55 is refined into CE [86] 
* CE 53 is refined into CE [87] 


### Cost equations --> "Loop" of n_evalrealheapsortbb16in___11/9 
* CEs [86] --> Loop 47 
* CEs [87] --> Loop 48 
* CEs [81] --> Loop 49 
* CEs [82] --> Loop 50 
* CEs [83] --> Loop 51 
* CEs [84] --> Loop 52 
* CEs [85] --> Loop 53 

### Ranking functions of CR n_evalrealheapsortbb16in___11(A,B,C,D,E,F,G,H,I) 
* RF of phase [47,48]: [A/4-B/4-C/2-3/4,A/4-C/2-3/4]

#### Partial ranking functions of CR n_evalrealheapsortbb16in___11(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [47,48]:
  - RF of loop [47:1]:
    A/3-B/3-2/3*C-1
    A/3-B/3-2/3*D-1
    A/3-2/3*C-1
    A/3-2/3*D-1
  - RF of loop [48:1]:
    A/4-B/4-C/2-3/4
    A/4-B/4-D/2-3/4
    A/4-C/2-3/4
    A/4-D/2-3/4


### Specialization of cost equations n_evalrealheapsortbb9in___16/9 
* CE 20 is discarded (unfeasible) 
* CE 21 is discarded (unfeasible) 
* CE 22 is discarded (unfeasible) 
* CE 30 is discarded (unfeasible) 
* CE 31 is discarded (unfeasible) 
* CE 32 is discarded (unfeasible) 
* CE 44 is discarded (unfeasible) 
* CE 45 is discarded (unfeasible) 
* CE 46 is refined into CE [88] 
* CE 23 is refined into CE [89,90] 
* CE 24 is refined into CE [91,92,93,94] 
* CE 25 is refined into CE [95,96] 
* CE 29 is refined into CE [97] 
* CE 33 is refined into CE [98,99] 
* CE 34 is refined into CE [100,101,102,103] 
* CE 35 is refined into CE [104,105] 
* CE 39 is refined into CE [106] 
* CE 42 is refined into CE [107] 
* CE 43 is refined into CE [108] 
* CE 47 is refined into CE [109] 
* CE 49 is refined into CE [110] 
* CE 26 is refined into CE [111,112] 
* CE 27 is refined into CE [113,114,115,116] 
* CE 28 is refined into CE [117,118] 
* CE 36 is refined into CE [119,120] 
* CE 37 is refined into CE [121,122,123,124] 
* CE 38 is refined into CE [125,126] 
* CE 40 is refined into CE [127] 
* CE 41 is refined into CE [128] 
* CE 48 is discarded (unfeasible) 


### Cost equations --> "Loop" of n_evalrealheapsortbb9in___16/9 
* CEs [116,124] --> Loop 54 
* CEs [115,123] --> Loop 55 
* CEs [121] --> Loop 56 
* CEs [122] --> Loop 57 
* CEs [111,118,119,120,126] --> Loop 58 
* CEs [113] --> Loop 59 
* CEs [114] --> Loop 60 
* CEs [112] --> Loop 61 
* CEs [125,128] --> Loop 62 
* CEs [117,127] --> Loop 63 
* CEs [88] --> Loop 64 
* CEs [99] --> Loop 65 
* CEs [90] --> Loop 66 
* CEs [89,91,92,93,94,95,96,97,98,100,101,102,103,104,105,106,107,108] --> Loop 67 
* CEs [109,110] --> Loop 68 

### Ranking functions of CR n_evalrealheapsortbb9in___16(A,B,C,D,E,F,G,H,I) 
* RF of phase [54,55,56,57,58,59,60,61,62,63]: [A-B-3]

#### Partial ranking functions of CR n_evalrealheapsortbb9in___16(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [54,55,56,57,58,59,60,61,62,63]:
  - RF of loop [54:1,55:1]:
    A-B-9
  - RF of loop [56:1,57:1]:
    A-B-7
  - RF of loop [58:1,59:1,60:1]:
    A-B-5
  - RF of loop [61:1]:
    A-B-4
  - RF of loop [62:1,63:1]:
    A-B-3


### Specialization of cost equations n_evalrealheapsortbb9in___16_loop_cont/6 
* CE 51 is refined into CE [129] 
* CE 50 is refined into CE [130] 


### Cost equations --> "Loop" of n_evalrealheapsortbb9in___16_loop_cont/6 
* CEs [129] --> Loop 69 
* CEs [130] --> Loop 70 

### Ranking functions of CR n_evalrealheapsortbb9in___16_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalrealheapsortbb9in___16_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations n_evalrealheapsortbb16in___17/5 
* CE 19 is refined into CE [131,132,133,134] 


### Cost equations --> "Loop" of n_evalrealheapsortbb16in___17/5 
* CEs [132] --> Loop 71 
* CEs [131,133,134] --> Loop 72 

### Ranking functions of CR n_evalrealheapsortbb16in___17(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalrealheapsortbb16in___17(A,B,C,D,E) 


### Specialization of cost equations n_evalrealheapsortbb3in___24_loop_cont/6 
* CE 14 is refined into CE [135] 
* CE 13 is refined into CE [136] 


### Cost equations --> "Loop" of n_evalrealheapsortbb3in___24_loop_cont/6 
* CEs [135] --> Loop 73 
* CEs [136] --> Loop 74 

### Ranking functions of CR n_evalrealheapsortbb3in___24_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalrealheapsortbb3in___24_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations n_evalrealheapsortbb6in___26/5 
* CE 4 is refined into CE [137,138,139,140,141,142] 


### Cost equations --> "Loop" of n_evalrealheapsortbb6in___26/5 
* CEs [137,138,139,140,141,142] --> Loop 75 

### Ranking functions of CR n_evalrealheapsortbb6in___26(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalrealheapsortbb6in___26(A,B,C,D,E) 


### Specialization of cost equations n_evalrealheapsortentryin___27/5 
* CE 2 is refined into CE [143] 
* CE 3 is refined into CE [144] 


### Cost equations --> "Loop" of n_evalrealheapsortentryin___27/5 
* CEs [143] --> Loop 76 
* CEs [144] --> Loop 77 

### Ranking functions of CR n_evalrealheapsortentryin___27(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalrealheapsortentryin___27(A,B,C,D,E) 


### Specialization of cost equations pyRinit/5 
* CE 1 is refined into CE [145,146] 


### Cost equations --> "Loop" of pyRinit/5 
* CEs [146] --> Loop 78 
* CEs [145] --> Loop 79 

### Ranking functions of CR pyRinit(A,B,C,D,E) 

#### Partial ranking functions of CR pyRinit(A,B,C,D,E) 


Computing Bounds
=====================================

#### Cost of chains of n_evalrealheapsortbb3in___22(A,B,C,D,E,F,G,H,I):
* Chain [[33],36]: 2*it(33)+1
  Such that:it(33) =< C

  with precondition: [E=2,A=F,B+1=G,D=I,0>=H,C>=1,2*H+1>=0,B>=2*C+1,A>=B+1] 

* Chain [[33],35]: 2*it(33)+0
  Such that:it(33) =< C

  with precondition: [E=3,C>=1,B>=2*C+1,A>=B+1] 

* Chain [[33],34]: 2*it(33)+2
  Such that:it(33) =< C-H

  with precondition: [E=4,A=F,B+1=G,D=I,H>=1,B>=2*C+1,C>=2*H+1,A>=B+1] 

* Chain [36]: 1
  with precondition: [E=2,I=D,A=F,B+1=G,C=H,0>=C,A>=3,B>=1,2*C+1>=0,A>=B+1,2*A+2*C>=B+4] 

* Chain [35]: 0
  with precondition: [E=3,A>=3,B>=1,2*C+1>=0,B>=2*C+1,A>=B+1,2*A+2*C>=B+4] 

* Chain [34]: 2
  with precondition: [E=4,I=D,A=F,B+1=G,C=H,C>=1,B>=2*C+1,A>=B+1] 


#### Cost of chains of n_evalrealheapsortbb3in___24(A,B,C,D,E,F,G,H,I):
* Chain [[37],43]: 5*it(37)+4*s(6)+4
  Such that:it(37) =< 1
aux(2) =< 3/2
s(7) =< it(37)*aux(2)
s(6) =< s(7)

  with precondition: [A=3,B=1,C=1,E=10,F=3,G=0,H=0,D=I] 

* Chain [[37],42]: 5*it(37)+4*s(6)+2*s(8)+2
  Such that:it(37) =< A-C
aux(3) =< A/2
s(8) =< aux(3)
s(7) =< it(37)*aux(3)
s(6) =< s(7)

  with precondition: [E=3,B=C,B>=1,A>=B+2] 

* Chain [[37],41]: 5*it(37)+4*s(6)+3
  Such that:it(37) =< -B+H
aux(2) =< H/2+1/2
s(7) =< it(37)*aux(2)
s(6) =< s(7)

  with precondition: [E=10,G=0,B=C,A=F,A=H+1,D=I,B>=1,A>=B+2] 

* Chain [[37],40]: 5*it(37)+4*s(6)+2*s(9)+4
  Such that:it(37) =< -B+F
aux(4) =< F/2
s(9) =< aux(4)
s(7) =< it(37)*aux(4)
s(6) =< s(7)

  with precondition: [E=10,G=0,B=C,A=F,D=I,0>=H,A>=4,B>=1,2*H+1>=0,A>=B+2] 

* Chain [[37],39]: 5*it(37)+4*s(6)+2*s(10)+5
  Such that:it(37) =< -B+F
aux(5) =< F/2
s(10) =< aux(5)
s(7) =< it(37)*aux(5)
s(6) =< s(7)

  with precondition: [E=10,G=0,B=C,A=F,D=I,B>=1,H>=1,A>=4*H+4,A>=B+2] 

* Chain [[37],38]: 5*it(37)+4*s(6)+5
  Such that:it(37) =< -B+F
aux(2) =< F/2
s(7) =< it(37)*aux(2)
s(6) =< s(7)

  with precondition: [E=10,G=0,B=C,A=F,D=I,B>=1,H>=1,A>=2*H+2,2*H+3>=A,A>=B+2] 

* Chain [42]: 2*s(8)+2
  Such that:s(8) =< B/2

  with precondition: [E=3,C=B,A>=3,C>=1,A>=C+1] 


#### Cost of chains of n_evalrealheapsortbb16in___7(A,B,C,D,E,F,G,H,I):
* Chain [46]: 2
  with precondition: [C=0,D=1,E=9,B+2=A,B>=1] 

* Chain [45]: 0
  with precondition: [C=0,E=3,B>=1,D>=1,A>=B+D+1] 

* Chain [44]: 1
  with precondition: [C=0,E=8,H=0,A=F,B=G,D=I,B>=1,D>=1,A>=B+3,A>=B+D+1] 


#### Cost of chains of n_evalrealheapsortbb16in___11(A,B,C,D,E,F,G,H,I):
* Chain [[47,48],53]: 4*it(47)+4*it(48)+0
  Such that:it(47) =< A/3-B/3-2/3*D
aux(12) =< A/4-D/2
aux(14) =< A/2-B/2-D/2
aux(15) =< A/4-B/4-D/2
aux(16) =< 2/3*A-2/3*B-2/3*D
it(48) =< aux(15)
it(47) =< aux(16)
it(48) =< aux(16)
it(47) =< aux(15)
it(47) =< aux(14)
it(48) =< aux(14)
it(47) =< aux(12)
it(48) =< aux(12)

  with precondition: [E=3,C=D,B>=0,C>=1,A>=2*C+B+4] 

* Chain [[47,48],52]: 4*it(47)+4*it(48)+4
  Such that:it(47) =< -2/3*C-G/3+H/3
aux(10) =< -C/2-G/4+H/4
aux(12) =< -C/2+H/4
aux(17) =< -2/3*C+I/3
aux(18) =< -C/2+I/4
it(48) =< aux(18)
it(47) =< aux(17)
it(48) =< aux(17)
it(47) =< aux(10)
it(48) =< aux(10)
it(47) =< aux(18)
it(47) =< aux(12)
it(48) =< aux(12)

  with precondition: [E=5,C=D,A=F,B=G,A=H,B>=0,C>=1,I>=4*C+4,A>=B+I+2] 

* Chain [[47,48],51]: 4*it(47)+4*it(48)+4
  Such that:it(47) =< -2/3*C-G/3+H/3
aux(10) =< -C/2-G/4+H/4
aux(12) =< -C/2+H/4
aux(19) =< -2/3*C+I/3
aux(20) =< -C/2+I/4
it(48) =< aux(20)
it(47) =< aux(19)
it(48) =< aux(19)
it(47) =< aux(10)
it(48) =< aux(10)
it(47) =< aux(20)
it(47) =< aux(12)
it(48) =< aux(12)

  with precondition: [E=5,C=D,A=F,B=G,A=H,B>=0,C>=1,I>=4*C+3,A>=B+I+3] 

* Chain [[47,48],50]: 4*it(47)+4*it(48)+1
  Such that:it(47) =< A/3-2/3*D-G/3+1/3
aux(12) =< A/4-D/2
aux(21) =< A/4-D/2-G/4+1/4
aux(22) =< -2/3*D+2/3*I
aux(23) =< -D/2+I/2
it(48) =< aux(21)
it(47) =< aux(22)
it(48) =< aux(22)
it(47) =< aux(21)
it(47) =< aux(23)
it(48) =< aux(23)
it(47) =< aux(12)
it(48) =< aux(12)

  with precondition: [E=6,C=D,A=F,B+1=G,H=I,B>=0,C>=1,H>=2*C+1,A>=2*C+B+4,B+2*H+2>=A,A>=B+H+2] 

* Chain [[47,48],49]: 4*it(47)+4*it(48)+2
  Such that:it(47) =< -2/3*D+I/3+2/3
aux(12) =< -D/2+G/4+I/4+1/2
aux(10) =< -D/2+I/4+1/2
aux(24) =< -2/3*D+I/3
aux(25) =< -D/2+I/4
it(48) =< aux(25)
it(47) =< aux(24)
it(48) =< aux(24)
it(47) =< aux(10)
it(48) =< aux(10)
it(47) =< aux(25)
it(47) =< aux(12)
it(48) =< aux(12)

  with precondition: [E=7,C=D,A=F,B=G,A=2*H+B+3,A=B+I+2,B>=0,C>=1,A>=4*C+B+5] 

* Chain [53]: 0
  with precondition: [E=3,D=C,B>=0,D>=1,A>=B+4,A>=B+D+2] 

* Chain [52]: 4
  with precondition: [E=5,D=C,A=F,B=G,A=H,2*D+2=I,B>=0,D>=1,A>=2*D+B+4] 

* Chain [51]: 4
  with precondition: [E=5,D=C,A=F,B=G,A=H,2*D+1=I,B>=0,D>=1,A>=2*D+B+4] 

* Chain [50]: 1
  with precondition: [E=6,D=C,A=F,B+1=G,D=H,D=I,B>=0,A>=B+4,B+2*D+2>=A,A>=B+D+2] 

* Chain [49]: 2
  with precondition: [E=7,C=D,A=F,C=H,2*C+1=I,B+2*C+3=A,G+2*C+3=A,C>=1,A>=2*C+3] 


#### Cost of chains of n_evalrealheapsortbb9in___16(A,B,C,D,E,F,G,H,I):
* Chain [[54,55,56,57,58,59,60,61,62,63],68]: 90*it(54)+8*s(93)+8*s(94)+8*s(100)+8*s(101)+16*s(107)+8*s(108)+8*s(109)+4
  Such that:aux(45) =< A/3-B/3
aux(46) =< A/4
aux(62) =< A-B
it(54) =< aux(62)
aux(58) =< aux(45)* (3/2)-1/2
aux(51) =< aux(46)
aux(50) =< aux(45)
aux(53) =< aux(45)-2/3
aux(48) =< aux(45)-1/3
aux(47) =< it(54)*aux(45)
s(95) =< it(54)*aux(46)
aux(59) =< it(54)*aux(58)
aux(52) =< it(54)*aux(50)
s(102) =< it(54)*aux(51)
aux(54) =< it(54)*aux(53)
aux(49) =< it(54)*aux(48)
s(97) =< aux(47)* (3/4)
s(114) =< aux(59)* (4/3)
s(104) =< aux(52)* (3/4)
s(103) =< aux(54)* (3/4)
s(96) =< aux(49)* (3/4)
s(108) =< aux(52)
s(109) =< s(104)
s(108) =< s(114)
s(109) =< s(114)
s(108) =< s(104)
s(108) =< aux(59)
s(109) =< aux(59)
s(108) =< s(102)
s(109) =< s(102)
s(107) =< aux(52)
s(107) =< s(104)
s(107) =< s(102)
s(100) =< aux(52)
s(101) =< s(103)
s(100) =< aux(54)
s(101) =< aux(54)
s(100) =< s(104)
s(101) =< s(104)
s(100) =< s(103)
s(100) =< s(102)
s(101) =< s(102)
s(93) =< aux(47)
s(94) =< s(96)
s(93) =< aux(49)
s(94) =< aux(49)
s(93) =< s(97)
s(94) =< s(97)
s(93) =< s(96)
s(93) =< s(95)
s(94) =< s(95)

  with precondition: [C=0,E=3,B>=0,A>=B+4] 

* Chain [[54,55,56,57,58,59,60,61,62,63],67]: 90*it(54)+8*s(93)+8*s(94)+8*s(100)+8*s(101)+16*s(107)+8*s(108)+8*s(109)+48*s(115)+32*s(133)+9
  Such that:aux(79) =< 2*A-2*B
aux(45) =< A/3-B/3
aux(80) =< A-B
aux(81) =< A/4
s(133) =< aux(80)
s(133) =< aux(79)
s(133) =< aux(81)
s(115) =< aux(80)
s(115) =< aux(81)
it(54) =< aux(80)
aux(58) =< aux(45)* (3/2)-1/2
aux(51) =< aux(81)
aux(50) =< aux(45)
aux(53) =< aux(45)-2/3
aux(48) =< aux(45)-1/3
aux(47) =< it(54)*aux(45)
s(95) =< it(54)*aux(81)
aux(59) =< it(54)*aux(58)
aux(52) =< it(54)*aux(50)
s(102) =< it(54)*aux(51)
aux(54) =< it(54)*aux(53)
aux(49) =< it(54)*aux(48)
s(97) =< aux(47)* (3/4)
s(114) =< aux(59)* (4/3)
s(104) =< aux(52)* (3/4)
s(103) =< aux(54)* (3/4)
s(96) =< aux(49)* (3/4)
s(108) =< aux(52)
s(109) =< s(104)
s(108) =< s(114)
s(109) =< s(114)
s(108) =< s(104)
s(108) =< aux(59)
s(109) =< aux(59)
s(108) =< s(102)
s(109) =< s(102)
s(107) =< aux(52)
s(107) =< s(104)
s(107) =< s(102)
s(100) =< aux(52)
s(101) =< s(103)
s(100) =< aux(54)
s(101) =< aux(54)
s(100) =< s(104)
s(101) =< s(104)
s(100) =< s(103)
s(100) =< s(102)
s(101) =< s(102)
s(93) =< aux(47)
s(94) =< s(96)
s(93) =< aux(49)
s(94) =< aux(49)
s(93) =< s(97)
s(94) =< s(97)
s(93) =< s(96)
s(93) =< s(95)
s(94) =< s(95)

  with precondition: [C=0,E=3,B>=0,A>=B+5] 

* Chain [[54,55,56,57,58,59,60,61,62,63],66]: 90*it(54)+8*s(93)+8*s(94)+8*s(100)+8*s(101)+16*s(107)+8*s(108)+8*s(109)+8
  Such that:aux(45) =< A/3-B/3
aux(46) =< A/4
aux(82) =< A-B
it(54) =< aux(82)
aux(58) =< aux(45)* (3/2)-1/2
aux(51) =< aux(46)
aux(50) =< aux(45)
aux(53) =< aux(45)-2/3
aux(48) =< aux(45)-1/3
aux(47) =< it(54)*aux(45)
s(95) =< it(54)*aux(46)
aux(59) =< it(54)*aux(58)
aux(52) =< it(54)*aux(50)
s(102) =< it(54)*aux(51)
aux(54) =< it(54)*aux(53)
aux(49) =< it(54)*aux(48)
s(97) =< aux(47)* (3/4)
s(114) =< aux(59)* (4/3)
s(104) =< aux(52)* (3/4)
s(103) =< aux(54)* (3/4)
s(96) =< aux(49)* (3/4)
s(108) =< aux(52)
s(109) =< s(104)
s(108) =< s(114)
s(109) =< s(114)
s(108) =< s(104)
s(108) =< aux(59)
s(109) =< aux(59)
s(108) =< s(102)
s(109) =< s(102)
s(107) =< aux(52)
s(107) =< s(104)
s(107) =< s(102)
s(100) =< aux(52)
s(101) =< s(103)
s(100) =< aux(54)
s(101) =< aux(54)
s(100) =< s(104)
s(101) =< s(104)
s(100) =< s(103)
s(100) =< s(102)
s(101) =< s(102)
s(93) =< aux(47)
s(94) =< s(96)
s(93) =< aux(49)
s(94) =< aux(49)
s(93) =< s(97)
s(94) =< s(97)
s(93) =< s(96)
s(93) =< s(95)
s(94) =< s(95)

  with precondition: [C=0,E=3,B>=0,A>=B+6] 

* Chain [[54,55,56,57,58,59,60,61,62,63],65]: 90*it(54)+8*s(93)+8*s(94)+8*s(100)+8*s(101)+16*s(107)+8*s(108)+8*s(109)+8
  Such that:aux(45) =< A/3-B/3
aux(46) =< A/4
aux(83) =< A-B
it(54) =< aux(83)
aux(58) =< aux(45)* (3/2)-1/2
aux(51) =< aux(46)
aux(50) =< aux(45)
aux(53) =< aux(45)-2/3
aux(48) =< aux(45)-1/3
aux(47) =< it(54)*aux(45)
s(95) =< it(54)*aux(46)
aux(59) =< it(54)*aux(58)
aux(52) =< it(54)*aux(50)
s(102) =< it(54)*aux(51)
aux(54) =< it(54)*aux(53)
aux(49) =< it(54)*aux(48)
s(97) =< aux(47)* (3/4)
s(114) =< aux(59)* (4/3)
s(104) =< aux(52)* (3/4)
s(103) =< aux(54)* (3/4)
s(96) =< aux(49)* (3/4)
s(108) =< aux(52)
s(109) =< s(104)
s(108) =< s(114)
s(109) =< s(114)
s(108) =< s(104)
s(108) =< aux(59)
s(109) =< aux(59)
s(108) =< s(102)
s(109) =< s(102)
s(107) =< aux(52)
s(107) =< s(104)
s(107) =< s(102)
s(100) =< aux(52)
s(101) =< s(103)
s(100) =< aux(54)
s(101) =< aux(54)
s(100) =< s(104)
s(101) =< s(104)
s(100) =< s(103)
s(100) =< s(102)
s(101) =< s(102)
s(93) =< aux(47)
s(94) =< s(96)
s(93) =< aux(49)
s(94) =< aux(49)
s(93) =< s(97)
s(94) =< s(97)
s(93) =< s(96)
s(93) =< s(95)
s(94) =< s(95)

  with precondition: [C=0,E=3,B>=0,A>=B+8] 

* Chain [[54,55,56,57,58,59,60,61,62,63],64]: 90*it(54)+8*s(93)+8*s(94)+8*s(100)+8*s(101)+16*s(107)+8*s(108)+8*s(109)+6
  Such that:aux(45) =< A/3-B/3
aux(46) =< A/4
aux(84) =< A-B
it(54) =< aux(84)
aux(58) =< aux(45)* (3/2)-1/2
aux(51) =< aux(46)
aux(50) =< aux(45)
aux(53) =< aux(45)-2/3
aux(48) =< aux(45)-1/3
aux(47) =< it(54)*aux(45)
s(95) =< it(54)*aux(46)
aux(59) =< it(54)*aux(58)
aux(52) =< it(54)*aux(50)
s(102) =< it(54)*aux(51)
aux(54) =< it(54)*aux(53)
aux(49) =< it(54)*aux(48)
s(97) =< aux(47)* (3/4)
s(114) =< aux(59)* (4/3)
s(104) =< aux(52)* (3/4)
s(103) =< aux(54)* (3/4)
s(96) =< aux(49)* (3/4)
s(108) =< aux(52)
s(109) =< s(104)
s(108) =< s(114)
s(109) =< s(114)
s(108) =< s(104)
s(108) =< aux(59)
s(109) =< aux(59)
s(108) =< s(102)
s(109) =< s(102)
s(107) =< aux(52)
s(107) =< s(104)
s(107) =< s(102)
s(100) =< aux(52)
s(101) =< s(103)
s(100) =< aux(54)
s(101) =< aux(54)
s(100) =< s(104)
s(101) =< s(104)
s(100) =< s(103)
s(100) =< s(102)
s(101) =< s(102)
s(93) =< aux(47)
s(94) =< s(96)
s(93) =< aux(49)
s(94) =< aux(49)
s(93) =< s(97)
s(94) =< s(97)
s(93) =< s(96)
s(93) =< s(95)
s(94) =< s(95)

  with precondition: [C=0,E=9,B>=0,A>=B+4] 

* Chain [68]: 4
  with precondition: [C=0,E=3,B>=0,A>=B+3] 

* Chain [67]: 48*s(115)+16*s(133)+16*s(138)+9
  Such that:aux(75) =< A/2-B/2
aux(76) =< A/3-B/3
aux(77) =< A/4
aux(78) =< A/4-B/4
aux(79) =< 2/3*A-2/3*B
s(133) =< aux(76)
s(138) =< aux(78)
s(133) =< aux(79)
s(138) =< aux(79)
s(133) =< aux(78)
s(133) =< aux(75)
s(138) =< aux(75)
s(133) =< aux(77)
s(138) =< aux(77)
s(115) =< aux(76)
s(115) =< aux(78)
s(115) =< aux(77)

  with precondition: [C=0,E=3,B>=0,A>=B+4] 

* Chain [66]: 8
  with precondition: [C=0,E=3,B+5=A,B>=0] 

* Chain [65]: 8
  with precondition: [C=0,E=3,B+7=A,B>=0] 

* Chain [64]: 6
  with precondition: [C=0,E=9,B+3=A,B>=0] 


#### Cost of chains of n_evalrealheapsortbb9in___16_loop_cont(A,B,C,D,E,F):
* Chain [70]: 0
  with precondition: [A=3] 

* Chain [69]: 0
  with precondition: [A=9] 


#### Cost of chains of n_evalrealheapsortbb16in___17(A,B,C,D,E):
* Chain [72]: 32*s(305)+48*s(306)+450*s(307)+40*s(325)+40*s(326)+80*s(327)+40*s(328)+40*s(329)+40*s(330)+40*s(331)+16*s(332)+16*s(333)+48*s(334)+10
  Such that:s(298) =< 2*A
s(299) =< A/2
s(301) =< 2/3*A
aux(89) =< A
aux(90) =< A/3
aux(91) =< A/4
s(305) =< aux(89)
s(305) =< s(298)
s(305) =< aux(91)
s(306) =< aux(89)
s(306) =< aux(91)
s(307) =< aux(89)
s(308) =< aux(90)* (3/2)-1/2
s(309) =< aux(91)
s(310) =< aux(90)
s(311) =< aux(90)-2/3
s(312) =< aux(90)-1/3
s(313) =< s(307)*aux(90)
s(314) =< s(307)*aux(91)
s(315) =< s(307)*s(308)
s(316) =< s(307)*s(310)
s(317) =< s(307)*s(309)
s(318) =< s(307)*s(311)
s(319) =< s(307)*s(312)
s(320) =< s(313)* (3/4)
s(321) =< s(315)* (4/3)
s(322) =< s(316)* (3/4)
s(323) =< s(318)* (3/4)
s(324) =< s(319)* (3/4)
s(325) =< s(316)
s(326) =< s(322)
s(325) =< s(321)
s(326) =< s(321)
s(325) =< s(322)
s(325) =< s(315)
s(326) =< s(315)
s(325) =< s(317)
s(326) =< s(317)
s(327) =< s(316)
s(327) =< s(322)
s(327) =< s(317)
s(328) =< s(316)
s(329) =< s(323)
s(328) =< s(318)
s(329) =< s(318)
s(328) =< s(322)
s(329) =< s(322)
s(328) =< s(323)
s(328) =< s(317)
s(329) =< s(317)
s(330) =< s(313)
s(331) =< s(324)
s(330) =< s(319)
s(331) =< s(319)
s(330) =< s(320)
s(331) =< s(320)
s(330) =< s(324)
s(330) =< s(314)
s(331) =< s(314)
s(332) =< aux(90)
s(333) =< aux(91)
s(332) =< s(301)
s(333) =< s(301)
s(332) =< aux(91)
s(332) =< s(299)
s(333) =< s(299)
s(334) =< aux(90)
s(334) =< aux(91)

  with precondition: [B=0,C=0,A>=3] 

* Chain [71]: 9
  with precondition: [A=5,B=0,C=0] 


#### Cost of chains of n_evalrealheapsortbb3in___24_loop_cont(A,B,C,D,E,F):
* Chain [74]: 0
  with precondition: [A=3] 

* Chain [73]: 32*s(405)+48*s(406)+450*s(407)+40*s(425)+40*s(426)+80*s(427)+40*s(428)+40*s(429)+40*s(430)+40*s(431)+16*s(432)+16*s(433)+48*s(434)+11
  Such that:s(399) =< B
s(400) =< 2*B
s(401) =< B/2
s(402) =< B/3
s(403) =< B/4
s(404) =< 2/3*B
s(405) =< s(399)
s(405) =< s(400)
s(405) =< s(403)
s(406) =< s(399)
s(406) =< s(403)
s(407) =< s(399)
s(408) =< s(402)* (3/2)-1/2
s(409) =< s(403)
s(410) =< s(402)
s(411) =< s(402)-2/3
s(412) =< s(402)-1/3
s(413) =< s(407)*s(402)
s(414) =< s(407)*s(403)
s(415) =< s(407)*s(408)
s(416) =< s(407)*s(410)
s(417) =< s(407)*s(409)
s(418) =< s(407)*s(411)
s(419) =< s(407)*s(412)
s(420) =< s(413)* (3/4)
s(421) =< s(415)* (4/3)
s(422) =< s(416)* (3/4)
s(423) =< s(418)* (3/4)
s(424) =< s(419)* (3/4)
s(425) =< s(416)
s(426) =< s(422)
s(425) =< s(421)
s(426) =< s(421)
s(425) =< s(422)
s(425) =< s(415)
s(426) =< s(415)
s(425) =< s(417)
s(426) =< s(417)
s(427) =< s(416)
s(427) =< s(422)
s(427) =< s(417)
s(428) =< s(416)
s(429) =< s(423)
s(428) =< s(418)
s(429) =< s(418)
s(428) =< s(422)
s(429) =< s(422)
s(428) =< s(423)
s(428) =< s(417)
s(429) =< s(417)
s(430) =< s(413)
s(431) =< s(424)
s(430) =< s(419)
s(431) =< s(419)
s(430) =< s(420)
s(431) =< s(420)
s(430) =< s(424)
s(430) =< s(414)
s(431) =< s(414)
s(432) =< s(402)
s(433) =< s(403)
s(432) =< s(404)
s(433) =< s(404)
s(432) =< s(403)
s(432) =< s(401)
s(433) =< s(401)
s(434) =< s(402)
s(434) =< s(403)

  with precondition: [A=10,C=0,B>=3] 


#### Cost of chains of n_evalrealheapsortbb6in___26(A,B,C,D,E):
* Chain [75]: 5*s(435)+4*s(438)+32*s(445)+48*s(446)+450*s(447)+40*s(465)+40*s(466)+80*s(467)+40*s(468)+40*s(469)+40*s(470)+40*s(471)+16*s(472)+16*s(473)+48*s(474)+1825*s(475)+2*s(477)+6*s(478)+20*s(480)+128*s(491)+192*s(492)+160*s(511)+160*s(512)+320*s(513)+160*s(514)+160*s(515)+160*s(516)+160*s(517)+64*s(518)+64*s(519)+192*s(520)+17
  Such that:aux(92) =< 1
s(444) =< 2
s(439) =< 3
s(440) =< 6
s(477) =< 1/2
aux(93) =< 3/2
s(443) =< 3/4
aux(102) =< A
aux(103) =< 2*A
aux(104) =< A/2
aux(105) =< A/3
aux(106) =< A/4
aux(107) =< 2/3*A
s(475) =< aux(102)
s(435) =< aux(92)
s(445) =< s(439)
s(445) =< s(440)
s(445) =< s(443)
s(446) =< s(439)
s(446) =< s(443)
s(447) =< s(439)
s(448) =< aux(92)* (3/2)-1/2
s(449) =< s(443)
s(450) =< aux(92)
s(451) =< aux(92)-2/3
s(452) =< aux(92)-1/3
s(453) =< s(447)*aux(92)
s(454) =< s(447)*s(443)
s(455) =< s(447)*s(448)
s(456) =< s(447)*s(450)
s(457) =< s(447)*s(449)
s(458) =< s(447)*s(451)
s(459) =< s(447)*s(452)
s(460) =< s(453)* (3/4)
s(461) =< s(455)* (4/3)
s(462) =< s(456)* (3/4)
s(463) =< s(458)* (3/4)
s(464) =< s(459)* (3/4)
s(465) =< s(456)
s(466) =< s(462)
s(465) =< s(461)
s(466) =< s(461)
s(465) =< s(462)
s(465) =< s(455)
s(466) =< s(455)
s(465) =< s(457)
s(466) =< s(457)
s(467) =< s(456)
s(467) =< s(462)
s(467) =< s(457)
s(468) =< s(456)
s(469) =< s(463)
s(468) =< s(458)
s(469) =< s(458)
s(468) =< s(462)
s(469) =< s(462)
s(468) =< s(463)
s(468) =< s(457)
s(469) =< s(457)
s(470) =< s(453)
s(471) =< s(464)
s(470) =< s(459)
s(471) =< s(459)
s(470) =< s(460)
s(471) =< s(460)
s(470) =< s(464)
s(470) =< s(454)
s(471) =< s(454)
s(472) =< aux(92)
s(473) =< s(443)
s(472) =< s(444)
s(473) =< s(444)
s(472) =< s(443)
s(472) =< aux(93)
s(473) =< aux(93)
s(474) =< aux(92)
s(474) =< s(443)
s(437) =< s(435)*aux(93)
s(438) =< s(437)
s(478) =< aux(104)
s(479) =< s(475)*aux(104)
s(480) =< s(479)
s(491) =< aux(102)
s(491) =< aux(103)
s(491) =< aux(106)
s(492) =< aux(102)
s(492) =< aux(106)
s(494) =< aux(105)* (3/2)-1/2
s(495) =< aux(106)
s(496) =< aux(105)
s(497) =< aux(105)-2/3
s(498) =< aux(105)-1/3
s(499) =< s(475)*aux(105)
s(500) =< s(475)*aux(106)
s(501) =< s(475)*s(494)
s(502) =< s(475)*s(496)
s(503) =< s(475)*s(495)
s(504) =< s(475)*s(497)
s(505) =< s(475)*s(498)
s(506) =< s(499)* (3/4)
s(507) =< s(501)* (4/3)
s(508) =< s(502)* (3/4)
s(509) =< s(504)* (3/4)
s(510) =< s(505)* (3/4)
s(511) =< s(502)
s(512) =< s(508)
s(511) =< s(507)
s(512) =< s(507)
s(511) =< s(508)
s(511) =< s(501)
s(512) =< s(501)
s(511) =< s(503)
s(512) =< s(503)
s(513) =< s(502)
s(513) =< s(508)
s(513) =< s(503)
s(514) =< s(502)
s(515) =< s(509)
s(514) =< s(504)
s(515) =< s(504)
s(514) =< s(508)
s(515) =< s(508)
s(514) =< s(509)
s(514) =< s(503)
s(515) =< s(503)
s(516) =< s(499)
s(517) =< s(510)
s(516) =< s(505)
s(517) =< s(505)
s(516) =< s(506)
s(517) =< s(506)
s(516) =< s(510)
s(516) =< s(500)
s(517) =< s(500)
s(518) =< aux(105)
s(519) =< aux(106)
s(518) =< aux(107)
s(519) =< aux(107)
s(518) =< aux(106)
s(518) =< aux(104)
s(519) =< aux(104)
s(520) =< aux(105)
s(520) =< aux(106)

  with precondition: [B=1,A>=3] 


#### Cost of chains of n_evalrealheapsortentryin___27(A,B,C,D,E):
* Chain [77]: 1
  with precondition: [2>=A] 

* Chain [76]: 2*s(647)+1825*s(656)+5*s(657)+32*s(658)+48*s(659)+450*s(660)+40*s(678)+40*s(679)+80*s(680)+40*s(681)+40*s(682)+40*s(683)+40*s(684)+16*s(685)+16*s(686)+48*s(687)+4*s(689)+6*s(690)+20*s(692)+128*s(693)+192*s(694)+160*s(712)+160*s(713)+320*s(714)+160*s(715)+160*s(716)+160*s(717)+160*s(718)+64*s(719)+64*s(720)+192*s(721)+18
  Such that:s(643) =< 1
s(644) =< 2
s(645) =< 3
s(646) =< 6
s(647) =< 1/2
s(648) =< 3/2
s(649) =< 3/4
s(650) =< A
s(651) =< 2*A
s(652) =< A/2
s(653) =< A/3
s(654) =< A/4
s(655) =< 2/3*A
s(656) =< s(650)
s(657) =< s(643)
s(658) =< s(645)
s(658) =< s(646)
s(658) =< s(649)
s(659) =< s(645)
s(659) =< s(649)
s(660) =< s(645)
s(661) =< s(643)* (3/2)-1/2
s(662) =< s(649)
s(663) =< s(643)
s(664) =< s(643)-2/3
s(665) =< s(643)-1/3
s(666) =< s(660)*s(643)
s(667) =< s(660)*s(649)
s(668) =< s(660)*s(661)
s(669) =< s(660)*s(663)
s(670) =< s(660)*s(662)
s(671) =< s(660)*s(664)
s(672) =< s(660)*s(665)
s(673) =< s(666)* (3/4)
s(674) =< s(668)* (4/3)
s(675) =< s(669)* (3/4)
s(676) =< s(671)* (3/4)
s(677) =< s(672)* (3/4)
s(678) =< s(669)
s(679) =< s(675)
s(678) =< s(674)
s(679) =< s(674)
s(678) =< s(675)
s(678) =< s(668)
s(679) =< s(668)
s(678) =< s(670)
s(679) =< s(670)
s(680) =< s(669)
s(680) =< s(675)
s(680) =< s(670)
s(681) =< s(669)
s(682) =< s(676)
s(681) =< s(671)
s(682) =< s(671)
s(681) =< s(675)
s(682) =< s(675)
s(681) =< s(676)
s(681) =< s(670)
s(682) =< s(670)
s(683) =< s(666)
s(684) =< s(677)
s(683) =< s(672)
s(684) =< s(672)
s(683) =< s(673)
s(684) =< s(673)
s(683) =< s(677)
s(683) =< s(667)
s(684) =< s(667)
s(685) =< s(643)
s(686) =< s(649)
s(685) =< s(644)
s(686) =< s(644)
s(685) =< s(649)
s(685) =< s(648)
s(686) =< s(648)
s(687) =< s(643)
s(687) =< s(649)
s(688) =< s(657)*s(648)
s(689) =< s(688)
s(690) =< s(652)
s(691) =< s(656)*s(652)
s(692) =< s(691)
s(693) =< s(650)
s(693) =< s(651)
s(693) =< s(654)
s(694) =< s(650)
s(694) =< s(654)
s(695) =< s(653)* (3/2)-1/2
s(696) =< s(654)
s(697) =< s(653)
s(698) =< s(653)-2/3
s(699) =< s(653)-1/3
s(700) =< s(656)*s(653)
s(701) =< s(656)*s(654)
s(702) =< s(656)*s(695)
s(703) =< s(656)*s(697)
s(704) =< s(656)*s(696)
s(705) =< s(656)*s(698)
s(706) =< s(656)*s(699)
s(707) =< s(700)* (3/4)
s(708) =< s(702)* (4/3)
s(709) =< s(703)* (3/4)
s(710) =< s(705)* (3/4)
s(711) =< s(706)* (3/4)
s(712) =< s(703)
s(713) =< s(709)
s(712) =< s(708)
s(713) =< s(708)
s(712) =< s(709)
s(712) =< s(702)
s(713) =< s(702)
s(712) =< s(704)
s(713) =< s(704)
s(714) =< s(703)
s(714) =< s(709)
s(714) =< s(704)
s(715) =< s(703)
s(716) =< s(710)
s(715) =< s(705)
s(716) =< s(705)
s(715) =< s(709)
s(716) =< s(709)
s(715) =< s(710)
s(715) =< s(704)
s(716) =< s(704)
s(717) =< s(700)
s(718) =< s(711)
s(717) =< s(706)
s(718) =< s(706)
s(717) =< s(707)
s(718) =< s(707)
s(717) =< s(711)
s(717) =< s(701)
s(718) =< s(701)
s(719) =< s(653)
s(720) =< s(654)
s(719) =< s(655)
s(720) =< s(655)
s(719) =< s(654)
s(719) =< s(652)
s(720) =< s(652)
s(721) =< s(653)
s(721) =< s(654)

  with precondition: [A>=3] 


#### Cost of chains of pyRinit(A,B,C,D,E):
* Chain [79]: 3
  with precondition: [2>=A] 

* Chain [78]: 2*s(726)+1825*s(735)+5*s(736)+32*s(737)+48*s(738)+450*s(739)+40*s(757)+40*s(758)+80*s(759)+40*s(760)+40*s(761)+40*s(762)+40*s(763)+16*s(764)+16*s(765)+48*s(766)+4*s(768)+6*s(769)+20*s(771)+128*s(772)+192*s(773)+160*s(791)+160*s(792)+320*s(793)+160*s(794)+160*s(795)+160*s(796)+160*s(797)+64*s(798)+64*s(799)+192*s(800)+20
  Such that:s(722) =< 1
s(723) =< 2
s(724) =< 3
s(725) =< 6
s(726) =< 1/2
s(727) =< 3/2
s(728) =< 3/4
s(729) =< A
s(730) =< 2*A
s(731) =< A/2
s(732) =< A/3
s(733) =< A/4
s(734) =< 2/3*A
s(735) =< s(729)
s(736) =< s(722)
s(737) =< s(724)
s(737) =< s(725)
s(737) =< s(728)
s(738) =< s(724)
s(738) =< s(728)
s(739) =< s(724)
s(740) =< s(722)* (3/2)-1/2
s(741) =< s(728)
s(742) =< s(722)
s(743) =< s(722)-2/3
s(744) =< s(722)-1/3
s(745) =< s(739)*s(722)
s(746) =< s(739)*s(728)
s(747) =< s(739)*s(740)
s(748) =< s(739)*s(742)
s(749) =< s(739)*s(741)
s(750) =< s(739)*s(743)
s(751) =< s(739)*s(744)
s(752) =< s(745)* (3/4)
s(753) =< s(747)* (4/3)
s(754) =< s(748)* (3/4)
s(755) =< s(750)* (3/4)
s(756) =< s(751)* (3/4)
s(757) =< s(748)
s(758) =< s(754)
s(757) =< s(753)
s(758) =< s(753)
s(757) =< s(754)
s(757) =< s(747)
s(758) =< s(747)
s(757) =< s(749)
s(758) =< s(749)
s(759) =< s(748)
s(759) =< s(754)
s(759) =< s(749)
s(760) =< s(748)
s(761) =< s(755)
s(760) =< s(750)
s(761) =< s(750)
s(760) =< s(754)
s(761) =< s(754)
s(760) =< s(755)
s(760) =< s(749)
s(761) =< s(749)
s(762) =< s(745)
s(763) =< s(756)
s(762) =< s(751)
s(763) =< s(751)
s(762) =< s(752)
s(763) =< s(752)
s(762) =< s(756)
s(762) =< s(746)
s(763) =< s(746)
s(764) =< s(722)
s(765) =< s(728)
s(764) =< s(723)
s(765) =< s(723)
s(764) =< s(728)
s(764) =< s(727)
s(765) =< s(727)
s(766) =< s(722)
s(766) =< s(728)
s(767) =< s(736)*s(727)
s(768) =< s(767)
s(769) =< s(731)
s(770) =< s(735)*s(731)
s(771) =< s(770)
s(772) =< s(729)
s(772) =< s(730)
s(772) =< s(733)
s(773) =< s(729)
s(773) =< s(733)
s(774) =< s(732)* (3/2)-1/2
s(775) =< s(733)
s(776) =< s(732)
s(777) =< s(732)-2/3
s(778) =< s(732)-1/3
s(779) =< s(735)*s(732)
s(780) =< s(735)*s(733)
s(781) =< s(735)*s(774)
s(782) =< s(735)*s(776)
s(783) =< s(735)*s(775)
s(784) =< s(735)*s(777)
s(785) =< s(735)*s(778)
s(786) =< s(779)* (3/4)
s(787) =< s(781)* (4/3)
s(788) =< s(782)* (3/4)
s(789) =< s(784)* (3/4)
s(790) =< s(785)* (3/4)
s(791) =< s(782)
s(792) =< s(788)
s(791) =< s(787)
s(792) =< s(787)
s(791) =< s(788)
s(791) =< s(781)
s(792) =< s(781)
s(791) =< s(783)
s(792) =< s(783)
s(793) =< s(782)
s(793) =< s(788)
s(793) =< s(783)
s(794) =< s(782)
s(795) =< s(789)
s(794) =< s(784)
s(795) =< s(784)
s(794) =< s(788)
s(795) =< s(788)
s(794) =< s(789)
s(794) =< s(783)
s(795) =< s(783)
s(796) =< s(779)
s(797) =< s(790)
s(796) =< s(785)
s(797) =< s(785)
s(796) =< s(786)
s(797) =< s(786)
s(796) =< s(790)
s(796) =< s(780)
s(797) =< s(780)
s(798) =< s(732)
s(799) =< s(733)
s(798) =< s(734)
s(799) =< s(734)
s(798) =< s(733)
s(798) =< s(731)
s(799) =< s(731)
s(800) =< s(732)
s(800) =< s(733)

  with precondition: [A>=3] 


Closed-form bounds of pyRinit(A,B,C,D,E): 
-------------------------------------
* Chain [79] with precondition: [2>=A] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [78] with precondition: [A>=3] 
    - Upper bound: 2145*A+2478+ (40*A-80)*A+ (40*A-40)*A+3*A+10*A*A+256/3*A+920/3*A*A+16*A 
    - Complexity: n^2 

### Maximum cost of pyRinit(A,B,C,D,E): nat(A)*2145+2475+nat(-2/3+nat(A/3))*120*nat(A)+nat(-1/3+nat(A/3))*120*nat(A)+nat(A/2)*6+nat(A/2)*20*nat(A)+nat(A/3)*256+nat(A/3)*920*nat(A)+nat(A/4)*64+3 
Asymptotic class: n^2 
* Total analysis performed in 4106 ms.


-- stats
realtime 0:04.41
usertime 4.29
systime 0.01

