WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_evalperfectbb4in___6/9]
1. recursive  : [n_evalperfectbb4in___6_loop_cont/10,n_evalperfectbb4in___7/9,n_evalperfectbb4in___8/9,n_evalperfectbb5in___4/9,n_evalperfectbb5in___5/9,n_evalperfectbb8in___2/9,n_evalperfectbb8in___3/9]
2. non_recursive  : [exit_location/1]
3. non_recursive  : [n_evalperfectstop___9/5]
4. non_recursive  : [n_evalperfectbb9in___1/5]
5. non_recursive  : [n_evalperfectbb4in___8_loop_cont/6]
6. non_recursive  : [n_evalperfectbb8in___10/5]
7. non_recursive  : [n_evalperfectentryin___11/5]
8. non_recursive  : [n_evalperfectstart/5]
9. non_recursive  : [pyRinit/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_evalperfectbb4in___6/9
1. SCC is partially evaluated into n_evalperfectbb4in___8/9
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_evalperfectbb9in___1/5
5. SCC is partially evaluated into n_evalperfectbb4in___8_loop_cont/6
6. SCC is partially evaluated into n_evalperfectbb8in___10/5
7. SCC is partially evaluated into n_evalperfectentryin___11/5
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into pyRinit/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalperfectbb4in___6/9 
* CE 15 is refined into CE [19] 
* CE 14 is refined into CE [20] 
* CE 13 is refined into CE [21] 


### Cost equations --> "Loop" of n_evalperfectbb4in___6/9 
* CEs [21] --> Loop 18 
* CEs [19] --> Loop 19 
* CEs [20] --> Loop 20 

### Ranking functions of CR n_evalperfectbb4in___6(A,B,C,D,E,F,G,H,I) 
* RF of phase [18]: [-C+D+1,D]

#### Partial ranking functions of CR n_evalperfectbb4in___6(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    -C+D+1
    D


### Specialization of cost equations n_evalperfectbb4in___8/9 
* CE 7 is refined into CE [22,23] 
* CE 8 is refined into CE [24] 
* CE 10 is refined into CE [25] 
* CE 5 is refined into CE [26,27] 
* CE 6 is refined into CE [28,29] 
* CE 9 is refined into CE [30] 


### Cost equations --> "Loop" of n_evalperfectbb4in___8/9 
* CEs [29] --> Loop 21 
* CEs [26] --> Loop 22 
* CEs [27] --> Loop 23 
* CEs [30] --> Loop 24 
* CEs [28] --> Loop 25 
* CEs [24,25] --> Loop 26 
* CEs [23] --> Loop 27 
* CEs [22] --> Loop 28 

### Ranking functions of CR n_evalperfectbb4in___8(A,B,C,D,E,F,G,H,I) 
* RF of phase [21,23]: [C-1]
* RF of phase [22]: [-A/3+C,-B/3+C,C-1,C-D/3]
* RF of phase [24]: [-A/2+C,-B/2+C,C-1,C-D/2]

#### Partial ranking functions of CR n_evalperfectbb4in___8(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [21,23]:
  - RF of loop [21:1,23:1]:
    C-1
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    -A/3+C
    -B/3+C
    C-1
    C-D/3
* Partial RF of phase [24]:
  - RF of loop [24:1]:
    -A/2+C
    -B/2+C
    C-1
    C-D/2


### Specialization of cost equations n_evalperfectbb9in___1/5 
* CE 17 is refined into CE [31] 
* CE 16 is refined into CE [32] 
* CE 18 is refined into CE [33] 


### Cost equations --> "Loop" of n_evalperfectbb9in___1/5 
* CEs [31] --> Loop 29 
* CEs [32] --> Loop 30 
* CEs [33] --> Loop 31 

### Ranking functions of CR n_evalperfectbb9in___1(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalperfectbb9in___1(A,B,C,D,E) 


### Specialization of cost equations n_evalperfectbb4in___8_loop_cont/6 
* CE 12 is refined into CE [34,35,36] 
* CE 11 is refined into CE [37] 


### Cost equations --> "Loop" of n_evalperfectbb4in___8_loop_cont/6 
* CEs [36] --> Loop 32 
* CEs [35] --> Loop 33 
* CEs [34] --> Loop 34 
* CEs [37] --> Loop 35 

### Ranking functions of CR n_evalperfectbb4in___8_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalperfectbb4in___8_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations n_evalperfectbb8in___10/5 
* CE 4 is refined into CE [38,39,40,41,42,43,44,45,46,47] 


### Cost equations --> "Loop" of n_evalperfectbb8in___10/5 
* CEs [43,44] --> Loop 36 
* CEs [41] --> Loop 37 
* CEs [40] --> Loop 38 
* CEs [39] --> Loop 39 
* CEs [38,42,45,46,47] --> Loop 40 

### Ranking functions of CR n_evalperfectbb8in___10(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalperfectbb8in___10(A,B,C,D,E) 


### Specialization of cost equations n_evalperfectentryin___11/5 
* CE 2 is refined into CE [48,49,50,51] 
* CE 3 is refined into CE [52] 


### Cost equations --> "Loop" of n_evalperfectentryin___11/5 
* CEs [52] --> Loop 41 
* CEs [51] --> Loop 42 
* CEs [50] --> Loop 43 
* CEs [48,49] --> Loop 44 

### Ranking functions of CR n_evalperfectentryin___11(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalperfectentryin___11(A,B,C,D,E) 


### Specialization of cost equations pyRinit/5 
* CE 1 is refined into CE [53,54,55] 


### Cost equations --> "Loop" of pyRinit/5 
* CEs [55] --> Loop 45 
* CEs [53,54] --> Loop 46 

### Ranking functions of CR pyRinit(A,B,C,D,E) 

#### Partial ranking functions of CR pyRinit(A,B,C,D,E) 


Computing Bounds
=====================================

#### Cost of chains of n_evalperfectbb4in___6(A,B,C,D,E,F,G,H,I):
* Chain [[18],20]: 1*it(18)+1
  Such that:it(18) =< D-H+1

  with precondition: [E=2,A=F,B=G,C=H,I>=0,A>=B,C>=I+1,A>=2*C+D,D>=C+I] 

* Chain [[18],19]: 1*it(18)+0
  Such that:it(18) =< -C+D+1

  with precondition: [E=3,C>=1,A>=B,D>=C,A>=2*C+D] 

* Chain [20]: 1
  with precondition: [E=2,A=F,B=G,C=H,D=I,D>=0,A>=B,C>=D+1,A>=2*C+D] 

* Chain [19]: 0
  with precondition: [E=3,C>=1,D>=0,A>=B,A>=2*C+D] 


#### Cost of chains of n_evalperfectbb4in___8(A,B,C,D,E,F,G,H,I):
* Chain [[24],[22],[21,23],27]: 10*it(21)+5*it(22)+4*it(24)+1*s(2)+1*s(7)+1*s(8)+5
  Such that:aux(5) =< A
it(24) =< -A/2+C
aux(6) =< A/2
it(22) =< A/6
s(2) =< aux(5)
it(21) =< aux(6)
aux(2) =< aux(5)+2
s(7) =< it(21)*aux(5)
s(8) =< it(21)*aux(2)

  with precondition: [E=4,H=0,I=0,A=B,A=D,F=G,A>=7,2*C>=A+1,A>=C+1,A>=F+1] 

* Chain [[24],[22],[21,23],26]: 10*it(21)+5*it(22)+4*it(24)+1*s(7)+1*s(8)+1*s(9)+2
  Such that:it(24) =< C-D/2
aux(8) =< D
aux(7) =< D/2
it(22) =< D/6
s(9) =< aux(8)
it(21) =< aux(7)
aux(2) =< aux(8)+2
s(7) =< it(21)*aux(8)
s(8) =< it(21)*aux(2)

  with precondition: [E=3,A=B,A=D,A>=7,2*C>=A+1,A>=C+1] 

* Chain [[24],[22],27]: 5*it(22)+4*it(24)+1*s(2)+5
  Such that:s(2) =< 5
it(22) =< 1/3
it(24) =< C

  with precondition: [A=5,B=5,D=5,E=4,F=4,G=4,H=0,I=0,4>=C,C>=3] 

* Chain [[24],[22],26]: 5*it(22)+4*it(24)+1*s(9)+2
  Such that:s(9) =< 3
it(24) =< C-D/2
it(22) =< D/6

  with precondition: [E=3,A=B,A=D,A>=5,2*C>=A+1,A>=C+1] 

* Chain [[24],27]: 4*it(24)+1*s(2)+5
  Such that:s(2) =< 3
it(24) =< 1/2

  with precondition: [A=3,B=3,C=2,D=3,E=4,F=2,G=2,H=0,I=0] 

* Chain [[24],26]: 4*it(24)+1*s(9)+2
  Such that:s(9) =< -B/2+5/2
it(24) =< C-D/2

  with precondition: [E=3,A=B,A=D,2*C>=A+1,A>=C+1] 

* Chain [[24],25,[22],[21,23],27]: 10*it(21)+5*it(22)+4*it(24)+1*s(2)+1*s(7)+1*s(8)+10
  Such that:aux(5) =< A
it(24) =< -A/2+C
aux(6) =< A/2
it(22) =< A/6
s(2) =< aux(5)
it(21) =< aux(6)
aux(2) =< aux(5)+2
s(7) =< it(21)*aux(5)
s(8) =< it(21)*aux(2)

  with precondition: [E=4,H=0,I=0,A=B,A=D,F=G,A>=8,A>=2*F+2,2*C>=A+2,A>=C+1] 

* Chain [[24],25,[22],[21,23],26]: 10*it(21)+5*it(22)+4*it(24)+1*s(7)+1*s(8)+1*s(9)+7
  Such that:it(24) =< C-D/2
aux(8) =< D
aux(7) =< D/2
it(22) =< D/6
s(9) =< aux(8)
it(21) =< aux(7)
aux(2) =< aux(8)+2
s(7) =< it(21)*aux(8)
s(8) =< it(21)*aux(2)

  with precondition: [E=3,A=B,A=D,A>=8,2*C>=A+2,A>=C+1] 

* Chain [[24],25,[22],26]: 5*it(22)+4*it(24)+1*s(9)+7
  Such that:s(9) =< 3
it(24) =< C-D/2
it(22) =< D/6

  with precondition: [E=3,A=B,A=D,A>=8,2*C>=A+2,A>=C+1] 

* Chain [[24],25,[21,23],27]: 10*it(21)+4*it(24)+1*s(2)+1*s(7)+1*s(8)+10
  Such that:aux(6) =< 2
aux(5) =< 6
it(24) =< C
s(2) =< aux(5)
it(21) =< aux(6)
aux(2) =< aux(5)+2
s(7) =< it(21)*aux(5)
s(8) =< it(21)*aux(2)

  with precondition: [A=6,B=6,D=6,E=4,H=0,I=0,F=G,5>=C,0>=F,C>=4] 

* Chain [[24],25,[21,23],26]: 10*it(21)+4*it(24)+1*s(7)+1*s(8)+1*s(9)+7
  Such that:aux(7) =< 2
aux(8) =< 6
it(24) =< C
s(9) =< aux(8)
it(21) =< aux(7)
aux(2) =< aux(8)+2
s(7) =< it(21)*aux(8)
s(8) =< it(21)*aux(2)

  with precondition: [A=6,B=6,D=6,E=3,5>=C,C>=4] 

* Chain [[24],25,27]: 4*it(24)+1*s(2)+10
  Such that:it(24) =< 1
s(2) =< 4

  with precondition: [A=4,B=4,C=3,D=4,E=4,F=1,G=1,H=0,I=0] 

* Chain [[24],25,26]: 4*it(24)+1*s(9)+7
  Such that:s(9) =< -A/2+4
it(24) =< C-D/2

  with precondition: [E=3,A=B,A=D,2*C>=A+2,A>=C+1] 

* Chain [28]: 5
  with precondition: [A=2,B=2,C=1,D=2,E=4,F=1,G=1,H=0,I=0] 

* Chain [26]: 1*s(9)+2
  Such that:s(9) =< A-3*C+1

  with precondition: [E=3,D=A,C>=1,D>=B,D>=C+1] 


#### Cost of chains of n_evalperfectbb9in___1(A,B,C,D,E):
* Chain [31]: 1
  with precondition: [A=0,B=0,C=0,D=0] 

* Chain [30]: 1
  with precondition: [C=0,D=0,A=B,0>=A+1] 

* Chain [29]: 1
  with precondition: [C=0,D=0,A=B,A>=1] 


#### Cost of chains of n_evalperfectbb4in___8_loop_cont(A,B,C,D,E,F):
* Chain [35]: 0
  with precondition: [A=3] 

* Chain [34]: 1
  with precondition: [A=4,B=0,C=0,D=0,E=0] 

* Chain [33]: 1
  with precondition: [A=4,D=0,E=0,B=C,0>=B+1] 

* Chain [32]: 1
  with precondition: [A=4,D=0,E=0,B=C,B>=1] 


#### Cost of chains of n_evalperfectbb8in___10(A,B,C,D,E):
* Chain [40]: 1*s(67)+1*s(68)+1*s(69)+6*s(70)+2*s(76)+44*s(77)+20*s(78)+1*s(79)+10*s(80)+1*s(82)+1*s(83)+2*s(87)+2*s(88)+24*s(93)+30*s(94)+6*s(95)+60*s(96)+6*s(98)+6*s(99)+12
  Such that:s(65) =< 2
s(71) =< 3
s(66) =< 6
aux(18) =< A
aux(19) =< A/2
s(75) =< A/6
s(67) =< -2*B+4
s(68) =< -B/2+4
s(69) =< -B/2+5/2
aux(20) =< C+1
aux(21) =< C/2
aux(22) =< C/2+1/2
aux(23) =< C/6+1/6
s(70) =< aux(18)
s(76) =< s(71)
s(77) =< aux(19)
s(78) =< s(75)
s(79) =< s(66)
s(80) =< s(65)
s(81) =< s(66)+2
s(82) =< s(80)*s(66)
s(83) =< s(80)*s(81)
s(86) =< aux(18)+2
s(87) =< s(77)*aux(18)
s(88) =< s(77)*s(86)
s(93) =< aux(21)
s(94) =< aux(23)
s(95) =< aux(20)
s(96) =< aux(22)
s(97) =< aux(20)+2
s(98) =< s(96)*aux(20)
s(99) =< s(96)*s(97)

  with precondition: [B=A,B=C+1,B>=2] 

* Chain [39]: 1*s(122)+4*s(123)+7
  Such that:s(122) =< 3
s(123) =< 1/2

  with precondition: [A=3,B=3,C=2] 

* Chain [38]: 4*s(124)+1*s(125)+12
  Such that:s(124) =< 1
s(125) =< 4

  with precondition: [A=4,B=4,C=3] 

* Chain [37]: 1*s(126)+5*s(127)+4*s(128)+7
  Such that:s(128) =< 4
s(126) =< 5
s(127) =< 1/3

  with precondition: [A=5,B=5,C=4] 

* Chain [36]: 160
  with precondition: [A=6,B=6,C=5] 


#### Cost of chains of n_evalperfectentryin___11(A,B,C,D,E):
* Chain [44]: 4*s(181)+1*s(185)+1*s(186)+1*s(187)+3*s(193)+12*s(194)+128*s(195)+50*s(196)+1*s(197)+10*s(198)+1*s(200)+1*s(201)+8*s(203)+8*s(204)+4*s(212)+1*s(213)+13
  Such that:s(212) =< 1
s(179) =< 2
s(192) =< 3
s(213) =< 4
s(180) =< 6
s(181) =< 1/2
s(185) =< -2*A+4
aux(28) =< A
s(186) =< -A/2+4
s(187) =< -A/2+5/2
aux(29) =< A/2
aux(30) =< A/6
s(193) =< s(192)
s(194) =< aux(28)
s(195) =< aux(29)
s(196) =< aux(30)
s(197) =< s(180)
s(198) =< s(179)
s(199) =< s(180)+2
s(200) =< s(198)*s(180)
s(201) =< s(198)*s(199)
s(202) =< aux(28)+2
s(203) =< s(195)*aux(28)
s(204) =< s(195)*s(202)

  with precondition: [A>=2] 

* Chain [43]: 4*s(214)+1*s(215)+5*s(216)+8
  Such that:s(214) =< 4
s(215) =< 5
s(216) =< 1/3

  with precondition: [A=5] 

* Chain [42]: 161
  with precondition: [A=6] 

* Chain [41]: 1
  with precondition: [1>=A] 


#### Cost of chains of pyRinit(A,B,C,D,E):
* Chain [46]: 4*s(244)+1*s(247)+4*s(249)+5*s(250)+1*s(251)+1*s(253)+1*s(254)+5*s(258)+3*s(259)+12*s(260)+128*s(261)+50*s(262)+1*s(263)+10*s(264)+1*s(266)+1*s(267)+8*s(269)+8*s(270)+163
  Such that:s(244) =< 1
s(245) =< 2
s(246) =< 3
s(257) =< 4
s(247) =< 5
s(248) =< 6
s(249) =< 1/2
s(250) =< 1/3
s(251) =< -2*A+4
s(252) =< A
s(253) =< -A/2+4
s(254) =< -A/2+5/2
s(255) =< A/2
s(256) =< A/6
s(258) =< s(257)
s(259) =< s(246)
s(260) =< s(252)
s(261) =< s(255)
s(262) =< s(256)
s(263) =< s(248)
s(264) =< s(245)
s(265) =< s(248)+2
s(266) =< s(264)*s(248)
s(267) =< s(264)*s(265)
s(268) =< s(252)+2
s(269) =< s(261)*s(252)
s(270) =< s(261)*s(268)

  with precondition: [A>=2] 

* Chain [45]: 3
  with precondition: [1>=A] 


Closed-form bounds of pyRinit(A,B,C,D,E): 
-------------------------------------
* Chain [46] with precondition: [A>=2] 
    - Upper bound: 12*A+776/3+A/2* (16*A)+nat(-A/2+4)+nat(-A/2+5/2)+72*A+25/3*A 
    - Complexity: n^2 
* Chain [45] with precondition: [1>=A] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of pyRinit(A,B,C,D,E): 767/3+nat(A)*12+nat(A)*16*nat(A/2)+nat(-A/2+4)+nat(-A/2+5/2)+nat(A/2)*144+nat(A/6)*50+3 
Asymptotic class: n^2 
* Total analysis performed in 1213 ms.


-- stats
realtime 0:01.31
usertime 1.28
systime 0.00

