WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_evalspeedpldi2bb2in___2/7,n_evalspeedpldi2bb5in___3/7]
1. recursive  : [n_evalspeedpldi2bb2in___4/7,n_evalspeedpldi2bb5in___1/7,n_evalspeedpldi2bb5in___3_loop_cont/8]
2. non_recursive  : [exit_location/1]
3. non_recursive  : [n_evalspeedpldi2stop___5/4]
4. non_recursive  : [n_evalspeedpldi2bb2in___4_loop_cont/5]
5. non_recursive  : [n_evalspeedpldi2bb5in___6/4]
6. non_recursive  : [n_evalspeedpldi2entryin___7/4]
7. non_recursive  : [n_evalspeedpldi2start/4]
8. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_evalspeedpldi2bb5in___3/7
1. SCC is partially evaluated into n_evalspeedpldi2bb2in___4/7
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_evalspeedpldi2bb2in___4_loop_cont/5
5. SCC is partially evaluated into n_evalspeedpldi2bb5in___6/4
6. SCC is partially evaluated into n_evalspeedpldi2entryin___7/4
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalspeedpldi2bb5in___3/7 
* CE 16 is refined into CE [17] 
* CE 14 is refined into CE [18] 
* CE 15 is refined into CE [19] 
* CE 13 is refined into CE [20] 


### Cost equations --> "Loop" of n_evalspeedpldi2bb5in___3/7 
* CEs [20] --> Loop 16 
* CEs [17] --> Loop 17 
* CEs [18] --> Loop 18 
* CEs [19] --> Loop 19 

### Ranking functions of CR n_evalspeedpldi2bb5in___3(A,B,C,D,E,F,G) 
* RF of phase [16]: [A-B,C]

#### Partial ranking functions of CR n_evalspeedpldi2bb5in___3(A,B,C,D,E,F,G) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    A-B
    C


### Specialization of cost equations n_evalspeedpldi2bb2in___4/7 
* CE 7 is refined into CE [21] 
* CE 10 is refined into CE [22] 
* CE 8 is refined into CE [23,24] 
* CE 9 is refined into CE [25,26] 


### Cost equations --> "Loop" of n_evalspeedpldi2bb2in___4/7 
* CEs [26] --> Loop 20 
* CEs [25] --> Loop 21 
* CEs [21,22] --> Loop 22 
* CEs [24] --> Loop 23 
* CEs [23] --> Loop 24 

### Ranking functions of CR n_evalspeedpldi2bb2in___4(A,B,C,D,E,F,G) 
* RF of phase [20]: [-A/2+C/2,C/2-1]
* RF of phase [21]: [C-1]

#### Partial ranking functions of CR n_evalspeedpldi2bb2in___4(A,B,C,D,E,F,G) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    -A/2+C/2
    C/2-1
* Partial RF of phase [21]:
  - RF of loop [21:1]:
    C-1


### Specialization of cost equations n_evalspeedpldi2bb2in___4_loop_cont/5 
* CE 11 is refined into CE [27] 
* CE 12 is refined into CE [28] 


### Cost equations --> "Loop" of n_evalspeedpldi2bb2in___4_loop_cont/5 
* CEs [27] --> Loop 25 
* CEs [28] --> Loop 26 

### Ranking functions of CR n_evalspeedpldi2bb2in___4_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalspeedpldi2bb2in___4_loop_cont(A,B,C,D,E) 


### Specialization of cost equations n_evalspeedpldi2bb5in___6/4 
* CE 5 is refined into CE [29,30,31,32,33] 
* CE 6 is refined into CE [34] 


### Cost equations --> "Loop" of n_evalspeedpldi2bb5in___6/4 
* CEs [31] --> Loop 27 
* CEs [34] --> Loop 28 
* CEs [29,30,32,33] --> Loop 29 

### Ranking functions of CR n_evalspeedpldi2bb5in___6(A,B,C,D) 

#### Partial ranking functions of CR n_evalspeedpldi2bb5in___6(A,B,C,D) 


### Specialization of cost equations n_evalspeedpldi2entryin___7/4 
* CE 2 is refined into CE [35,36] 
* CE 4 is refined into CE [37] 
* CE 3 is refined into CE [38] 


### Cost equations --> "Loop" of n_evalspeedpldi2entryin___7/4 
* CEs [36] --> Loop 30 
* CEs [37] --> Loop 31 
* CEs [38] --> Loop 32 
* CEs [35] --> Loop 33 

### Ranking functions of CR n_evalspeedpldi2entryin___7(A,B,C,D) 

#### Partial ranking functions of CR n_evalspeedpldi2entryin___7(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [39,40,41,42] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [42] --> Loop 34 
* CEs [41] --> Loop 35 
* CEs [40] --> Loop 36 
* CEs [39] --> Loop 37 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_evalspeedpldi2bb5in___3(A,B,C,D,E,F,G):
* Chain [[16],19]: 2*it(16)+1
  Such that:it(16) =< C

  with precondition: [D=3,B>=1,C>=1,A>=B+C] 

* Chain [[16],18]: 2*it(16)+2
  Such that:it(16) =< A-B

  with precondition: [D=2,F=0,A=E,A+G=B+C,B>=1,A>=B+1,B+C>=A+1] 

* Chain [[16],17]: 2*it(16)+0
  Such that:it(16) =< C

  with precondition: [D=4,B>=1,C>=1,A>=B+1] 

* Chain [19]: 1
  with precondition: [C=0,D=3,B>=1,A>=B] 

* Chain [18]: 2
  with precondition: [D=2,F=0,B=A,B=E,C=G,B>=1,C>=1] 

* Chain [17]: 0
  with precondition: [D=4,B>=1,C>=0,A>=B] 


#### Cost of chains of n_evalspeedpldi2bb2in___4(A,B,C,D,E,F,G):
* Chain [[21],24]: 4*it(21)+2
  Such that:it(21) =< C

  with precondition: [A=1,B=0,D=3,C>=2] 

* Chain [[21],22]: 6*it(21)+1
  Such that:aux(1) =< C
it(21) =< aux(1)

  with precondition: [A=1,B=0,D=4,C>=2] 

* Chain [[20],24]: 4*it(20)+2*s(5)+2
  Such that:it(20) =< -A/2+C/2
s(5) =< C

  with precondition: [B=0,D=3,A>=2,C>=A+1] 

* Chain [[20],23]: 4*it(20)+4*s(5)+2
  Such that:it(20) =< -A/2+C/2
aux(2) =< C
s(5) =< aux(2)

  with precondition: [B=0,D=3,A>=2,C>=A+2] 

* Chain [[20],22]: 8*it(20)+1
  Such that:aux(3) =< C
it(20) =< aux(3)

  with precondition: [B=0,D=4,A>=2,C>=A+1] 

* Chain [24]: 2
  with precondition: [B=0,C=1,D=3,A>=1] 

* Chain [23]: 2*s(6)+2
  Such that:s(6) =< C

  with precondition: [B=0,D=3,C>=2,A>=C] 

* Chain [22]: 2*s(2)+1
  Such that:s(2) =< C

  with precondition: [B=0,D=4,A>=1,C>=1] 


#### Cost of chains of n_evalspeedpldi2bb2in___4_loop_cont(A,B,C,D,E):
* Chain [26]: 0
  with precondition: [A=3] 

* Chain [25]: 0
  with precondition: [A=4] 


#### Cost of chains of n_evalspeedpldi2bb5in___6(A,B,C,D):
* Chain [29]: 28*s(17)+8*s(22)+3
  Such that:s(20) =< -A/2+C/2
aux(7) =< C
s(17) =< aux(7)
s(22) =< s(20)

  with precondition: [B=0,A>=1,C>=1] 

* Chain [28]: 1
  with precondition: [B=0,C=0,A>=1] 

* Chain [27]: 3
  with precondition: [B=0,C=1,A>=1] 


#### Cost of chains of n_evalspeedpldi2entryin___7(A,B,C,D):
* Chain [33]: 2
  with precondition: [A=0,B>=1] 

* Chain [32]: 1
  with precondition: [0>=A+1] 

* Chain [31]: 1
  with precondition: [0>=B] 

* Chain [30]: 28*s(31)+8*s(32)+4
  Such that:s(30) =< A
s(29) =< A/2-B/2
s(31) =< s(30)
s(32) =< s(29)

  with precondition: [A>=1,B>=1] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [37]: 4
  with precondition: [A=0,B>=1] 

* Chain [36]: 3
  with precondition: [0>=A+1] 

* Chain [35]: 3
  with precondition: [0>=B] 

* Chain [34]: 28*s(35)+8*s(36)+6
  Such that:s(33) =< A
s(34) =< A/2-B/2
s(35) =< s(33)
s(36) =< s(34)

  with precondition: [A>=1,B>=1] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [37] with precondition: [A=0,B>=1] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [36] with precondition: [0>=A+1] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [35] with precondition: [0>=B] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [34] with precondition: [A>=1,B>=1] 
    - Upper bound: 28*A+6+nat(A/2-B/2)*8 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C,D): max([1,nat(A)*28+3+nat(A/2-B/2)*8])+3 
Asymptotic class: n 
* Total analysis performed in 377 ms.


-- stats
realtime 0:00.46
usertime 0.41
systime 0.01

