MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [n_evalrealshellsortstop___22/6]
1. non_recursive  : [n_evalrealshellsortbb8in___23/6]
2. recursive  : [n_evalrealshellsortbb3in___14/11,n_evalrealshellsortbb4in___12/11]
3. recursive  : [n_evalrealshellsortbb3in___11/11,n_evalrealshellsortbb4in___9/11,n_evalrealshellsortbb6in___13/11]
4. recursive  : [n_evalrealshellsortbb3in___14_loop_cont/12,n_evalrealshellsortbb3in___18/11,n_evalrealshellsortbb4in___16/11,n_evalrealshellsortbb6in___13_loop_cont/12,n_evalrealshellsortbb6in___15/11]
5. recursive  : [n_evalrealshellsortbb3in___18_loop_cont/12,n_evalrealshellsortbb6in___19/11]
6. recursive  : [n_evalrealshellsortbb3in___20/11,n_evalrealshellsortbb6in___19_loop_cont/12,n_evalrealshellsortbb6in___5/11,n_evalrealshellsortbb7in___1/11,n_evalrealshellsortbb7in___10/11,n_evalrealshellsortbb7in___17/11,n_evalrealshellsortbb8in___7/11]
7. non_recursive  : [exit_location/1]
8. recursive  : [n_evalrealshellsortbb6in___2/11,n_evalrealshellsortbb7in___4/11,n_evalrealshellsortbb8in___3/11]
9. non_recursive  : [n_evalrealshellsortbb7in___4_loop_cont/7]
10. non_recursive  : [n_evalrealshellsortbb8in___6/6]
11. non_recursive  : [n_evalrealshellsortbb8in___8/6]
12. non_recursive  : [n_evalrealshellsortbb3in___20_loop_cont/7]
13. non_recursive  : [n_evalrealshellsortbb6in___21/6]
14. non_recursive  : [n_evalrealshellsortbb8in___24/6]
15. non_recursive  : [n_evalrealshellsortbb8in___25/6]
16. non_recursive  : [n_evalrealshellsortentryin___26/6]
17. non_recursive  : [n_evalrealshellsortstart/6]
18. non_recursive  : [pyRinit/6]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into n_evalrealshellsortbb3in___14/11
3. SCC is partially evaluated into n_evalrealshellsortbb6in___13/11
4. SCC is partially evaluated into n_evalrealshellsortbb3in___18/11
5. SCC is partially evaluated into n_evalrealshellsortbb6in___19/11
6. SCC is partially evaluated into n_evalrealshellsortbb3in___20/11
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into n_evalrealshellsortbb7in___4/11
9. SCC is partially evaluated into n_evalrealshellsortbb7in___4_loop_cont/7
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into n_evalrealshellsortbb3in___20_loop_cont/7
13. SCC is partially evaluated into n_evalrealshellsortbb6in___21/6
14. SCC is partially evaluated into n_evalrealshellsortbb8in___24/6
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into n_evalrealshellsortentryin___26/6
17. SCC is completely evaluated into other SCCs
18. SCC is partially evaluated into pyRinit/6

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalrealshellsortbb3in___14/11 
* CE 55 is refined into CE [59] 
* CE 58 is refined into CE [60] 
* CE 57 is refined into CE [61] 
* CE 56 is refined into CE [62] 


### Cost equations --> "Loop" of n_evalrealshellsortbb3in___14/11 
* CEs [62] --> Loop 44 
* CEs [59] --> Loop 45 
* CEs [60] --> Loop 46 
* CEs [61] --> Loop 47 

### Ranking functions of CR n_evalrealshellsortbb3in___14(A,B,C,D,E,F,G,H,I,J,K) 

#### Partial ranking functions of CR n_evalrealshellsortbb3in___14(A,B,C,D,E,F,G,H,I,J,K) 


### Specialization of cost equations n_evalrealshellsortbb6in___13/11 
* CE 53 is refined into CE [63] 
* CE 52 is refined into CE [64] 
* CE 54 is refined into CE [65] 
* CE 51 is refined into CE [66] 


### Cost equations --> "Loop" of n_evalrealshellsortbb6in___13/11 
* CEs [66] --> Loop 48 
* CEs [63] --> Loop 49 
* CEs [64] --> Loop 50 
* CEs [65] --> Loop 51 

### Ranking functions of CR n_evalrealshellsortbb6in___13(A,B,C,D,E,F,G,H,I,J,K) 
* RF of phase [48]: [A-C,A-E-1]

#### Partial ranking functions of CR n_evalrealshellsortbb6in___13(A,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [48]:
  - RF of loop [48:1]:
    A-C
    A-E-1


### Specialization of cost equations n_evalrealshellsortbb3in___18/11 
* CE 44 is refined into CE [67,68,69,70] 
* CE 45 is refined into CE [71,72] 
* CE 48 is refined into CE [73] 
* CE 47 is refined into CE [74,75] 
* CE 38 is refined into CE [76,77,78,79] 
* CE 39 is refined into CE [80,81] 
* CE 46 is refined into CE [82] 
* CE 50 is refined into CE [83] 
* CE 40 is refined into CE [84,85,86,87,88,89] 
* CE 41 is refined into CE [90,91,92] 
* CE 42 is refined into CE [93,94,95,96] 
* CE 43 is refined into CE [97,98] 
* CE 49 is refined into CE [99] 


### Cost equations --> "Loop" of n_evalrealshellsortbb3in___18/11 
* CEs [95] --> Loop 52 
* CEs [93] --> Loop 53 
* CEs [99] --> Loop 54 
* CEs [97] --> Loop 55 
* CEs [98] --> Loop 56 
* CEs [96] --> Loop 57 
* CEs [94] --> Loop 58 
* CEs [72] --> Loop 59 
* CEs [70] --> Loop 60 
* CEs [68] --> Loop 61 
* CEs [81] --> Loop 62 
* CEs [79] --> Loop 63 
* CEs [77] --> Loop 64 
* CEs [92] --> Loop 65 
* CEs [89] --> Loop 66 
* CEs [86] --> Loop 67 
* CEs [69] --> Loop 68 
* CEs [67] --> Loop 69 
* CEs [71] --> Loop 70 
* CEs [73] --> Loop 71 
* CEs [75] --> Loop 72 
* CEs [74] --> Loop 73 
* CEs [76,78,80,82,83] --> Loop 74 
* CEs [84] --> Loop 75 
* CEs [88] --> Loop 76 
* CEs [87] --> Loop 77 
* CEs [91] --> Loop 78 
* CEs [85] --> Loop 79 
* CEs [90] --> Loop 80 

### Ranking functions of CR n_evalrealshellsortbb3in___18(A,B,C,D,E,F,G,H,I,J,K) 

#### Partial ranking functions of CR n_evalrealshellsortbb3in___18(A,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [52,53,54,55,56,57,58]:
  - RF of loop [52:1]:
    A/3-C/3-1 depends on loops [56:1,57:1,58:1] 
  - RF of loop [53:1]:
    A/2-C/2-1 depends on loops [56:1,57:1,58:1] 
    A/2-E/2-1 depends on loops [56:1,57:1,58:1] 
  - RF of loop [54:1]:
    B-C depends on loops [56:1,57:1,58:1] 
    B-E depends on loops [56:1,57:1,58:1] 
  - RF of loop [54:1,55:1]:
    A-C-1 depends on loops [56:1,57:1,58:1] 
    A-E-1 depends on loops [56:1,57:1,58:1] 


### Specialization of cost equations n_evalrealshellsortbb6in___19/11 
* CE 31 is refined into CE [100] 
* CE 29 is refined into CE [101,102,103,104,105,106,107,108,109,110] 
* CE 27 is refined into CE [111,112,113] 
* CE 30 is refined into CE [114,115,116,117,118,119] 
* CE 32 is refined into CE [120] 
* CE 28 is refined into CE [121,122,123,124,125,126,127,128,129,130,131] 


### Cost equations --> "Loop" of n_evalrealshellsortbb6in___19/11 
* CEs [127,128,129,130,131] --> Loop 81 
* CEs [126] --> Loop 82 
* CEs [123,125] --> Loop 83 
* CEs [121] --> Loop 84 
* CEs [122,124] --> Loop 85 
* CEs [100] --> Loop 86 
* CEs [105] --> Loop 87 
* CEs [104] --> Loop 88 
* CEs [101,103] --> Loop 89 
* CEs [102] --> Loop 90 
* CEs [111,112] --> Loop 91 
* CEs [114,120] --> Loop 92 
* CEs [106,107,108,109,110] --> Loop 93 
* CEs [113] --> Loop 94 
* CEs [115,116,117,118,119] --> Loop 95 

### Ranking functions of CR n_evalrealshellsortbb6in___19(A,B,C,D,E,F,G,H,I,J,K) 

#### Partial ranking functions of CR n_evalrealshellsortbb6in___19(A,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [81,82,83,84,85]:
  - RF of loop [84:1]:
    A-C depends on loops [81:1,82:1,83:1,85:1] 
    2*B-C depends on loops [81:1,82:1,83:1,85:1] 


### Specialization of cost equations n_evalrealshellsortbb3in___20/11 
* CE 8 is refined into CE [132,133,134,135] 
* CE 13 is refined into CE [136,137,138] 
* CE 9 is refined into CE [139,140,141,142] 
* CE 14 is refined into CE [143,144,145] 
* CE 12 is refined into CE [146,147,148] 
* CE 17 is refined into CE [149,150] 
* CE 10 is refined into CE [151,152,153,154] 
* CE 15 is refined into CE [155,156,157] 
* CE 19 is refined into CE [158,159,160] 
* CE 20 is refined into CE [161,162,163] 
* CE 21 is refined into CE [164] 
* CE 11 is refined into CE [165,166,167,168] 
* CE 16 is refined into CE [169,170,171] 
* CE 18 is refined into CE [172,173,174] 


### Cost equations --> "Loop" of n_evalrealshellsortbb3in___20/11 
* CEs [167,168,170,171,174] --> Loop 96 
* CEs [165,166,169,173] --> Loop 97 
* CEs [172] --> Loop 98 
* CEs [133,136] --> Loop 99 
* CEs [132] --> Loop 100 
* CEs [140,143] --> Loop 101 
* CEs [139] --> Loop 102 
* CEs [149] --> Loop 103 
* CEs [146] --> Loop 104 
* CEs [151,152,155,159] --> Loop 105 
* CEs [161,164] --> Loop 106 
* CEs [158] --> Loop 107 
* CEs [134,135,137,138] --> Loop 108 
* CEs [141,142,144,145] --> Loop 109 
* CEs [147,148,150] --> Loop 110 
* CEs [153,154,156,157,160] --> Loop 111 
* CEs [162,163] --> Loop 112 

### Ranking functions of CR n_evalrealshellsortbb3in___20(A,B,C,D,E,F,G,H,I,J,K) 
* RF of phase [98]: [B-1]

#### Partial ranking functions of CR n_evalrealshellsortbb3in___20(A,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [98]:
  - RF of loop [98:1]:
    B-1


### Specialization of cost equations n_evalrealshellsortbb7in___4/11 
* CE 35 is refined into CE [175] 
* CE 33 is refined into CE [176] 
* CE 34 is refined into CE [177] 


### Cost equations --> "Loop" of n_evalrealshellsortbb7in___4/11 
* CEs [177] --> Loop 113 
* CEs [175] --> Loop 114 
* CEs [176] --> Loop 115 

### Ranking functions of CR n_evalrealshellsortbb7in___4(A,B,C,D,E,F,G,H,I,J,K) 
* RF of phase [113]: [B-1]

#### Partial ranking functions of CR n_evalrealshellsortbb7in___4(A,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [113]:
  - RF of loop [113:1]:
    B-1


### Specialization of cost equations n_evalrealshellsortbb7in___4_loop_cont/7 
* CE 37 is refined into CE [178] 
* CE 36 is refined into CE [179] 


### Cost equations --> "Loop" of n_evalrealshellsortbb7in___4_loop_cont/7 
* CEs [178] --> Loop 116 
* CEs [179] --> Loop 117 

### Ranking functions of CR n_evalrealshellsortbb7in___4_loop_cont(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR n_evalrealshellsortbb7in___4_loop_cont(A,B,C,D,E,F,G) 


### Specialization of cost equations n_evalrealshellsortbb3in___20_loop_cont/7 
* CE 25 is refined into CE [180] 
* CE 24 is refined into CE [181] 
* CE 23 is refined into CE [182,183,184] 
* CE 26 is refined into CE [185] 
* CE 22 is refined into CE [186] 


### Cost equations --> "Loop" of n_evalrealshellsortbb3in___20_loop_cont/7 
* CEs [180] --> Loop 118 
* CEs [181] --> Loop 119 
* CEs [182,183,184] --> Loop 120 
* CEs [185] --> Loop 121 
* CEs [186] --> Loop 122 

### Ranking functions of CR n_evalrealshellsortbb3in___20_loop_cont(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR n_evalrealshellsortbb3in___20_loop_cont(A,B,C,D,E,F,G) 


### Specialization of cost equations n_evalrealshellsortbb6in___21/6 
* CE 7 is refined into CE [187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206] 


### Cost equations --> "Loop" of n_evalrealshellsortbb6in___21/6 
* CEs [195,196,197,198,199,200,201,202,203,204,205,206] --> Loop 123 
* CEs [187,188,189,190,191,192,193,194] --> Loop 124 

### Ranking functions of CR n_evalrealshellsortbb6in___21(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalrealshellsortbb6in___21(A,B,C,D,E,F) 


### Specialization of cost equations n_evalrealshellsortbb8in___24/6 
* CE 5 is refined into CE [207,208] 
* CE 6 is refined into CE [209] 


### Cost equations --> "Loop" of n_evalrealshellsortbb8in___24/6 
* CEs [207] --> Loop 125 
* CEs [209] --> Loop 126 
* CEs [208] --> Loop 127 

### Ranking functions of CR n_evalrealshellsortbb8in___24(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalrealshellsortbb8in___24(A,B,C,D,E,F) 


### Specialization of cost equations n_evalrealshellsortentryin___26/6 
* CE 3 is refined into CE [210,211,212] 
* CE 2 is refined into CE [213] 
* CE 4 is refined into CE [214] 


### Cost equations --> "Loop" of n_evalrealshellsortentryin___26/6 
* CEs [211] --> Loop 128 
* CEs [213] --> Loop 129 
* CEs [210] --> Loop 130 
* CEs [214] --> Loop 131 
* CEs [212] --> Loop 132 

### Ranking functions of CR n_evalrealshellsortentryin___26(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalrealshellsortentryin___26(A,B,C,D,E,F) 


### Specialization of cost equations pyRinit/6 
* CE 1 is refined into CE [215,216,217,218,219] 


### Cost equations --> "Loop" of pyRinit/6 
* CEs [219] --> Loop 133 
* CEs [218] --> Loop 134 
* CEs [217] --> Loop 135 
* CEs [216] --> Loop 136 
* CEs [215] --> Loop 137 

### Ranking functions of CR pyRinit(A,B,C,D,E,F) 

#### Partial ranking functions of CR pyRinit(A,B,C,D,E,F) 


Computing Bounds
=====================================

#### Cost of chains of n_evalrealshellsortbb3in___14(A,B,C,D,E,F,G,H,I,J,K):
* Chain [[44]]...: 2*it(44)+0
  with precondition: [A>=C+1,E>=B,E>=0,F>=2,4>=F] 

* Chain [[44],47]: 2*it(44)+1
  with precondition: [F=2,A=G,B=H,C+1=I,D=J,K>=0,A>=C+1,B>=K+1,E>=B+K] 

* Chain [[44],46]: 2*it(44)+0
  with precondition: [F=3,E>=0,E>=B,A>=C+1] 

* Chain [[44],45]: 2*it(44)+2
  with precondition: [F=4,A=G,B=H,C+1=I,D=J,E>=0,E>=B,K>=B,A>=C+1] 

* Chain [47]: 1
  with precondition: [F=2,J=D,A=G,B=H,C+1=I,E=K,E>=0,A>=C+1,B>=E+1] 

* Chain [46]: 0
  with precondition: [F=3] 

* Chain [45]: 2
  with precondition: [F=4,J=D,A=G,B=H,C+1=I,E=K,E>=0,E>=B,A>=C+1] 


#### Cost of chains of n_evalrealshellsortbb6in___13(A,B,C,D,E,F,G,H,I,J,K):
* Chain [[48],51]: 3*it(48)+0
  Such that:it(48) =< A-E

  with precondition: [F=3,C=E+1,C>=B+1,A>=C+1] 

* Chain [[48],50]: 3*it(48)+3
  Such that:it(48) =< -C+I

  with precondition: [F=5,C=E+1,A=G,B=H,B+K=I,C>=B+1,I>=C+1,A>=I+1] 

* Chain [[48],49]: 3*it(48)+1
  Such that:it(48) =< A-C

  with precondition: [F=6,C=E+1,A=G,B=H,A=I,A=K+1,C>=B+1,A>=C+1] 

* Chain [51]: 0
  with precondition: [F=3,E+1=C,E>=B,A>=E+1] 

* Chain [50]: 3
  with precondition: [F=5,E+1=C,A=G,B=H,E+1=I,E+1=B+K,E>=B,A>=E+2] 

* Chain [49]: 1
  with precondition: [F=6,C=A,J=D,C=E+1,C=G,B=H,C=I,C=K+1,C>=B+1] 


#### Cost of chains of n_evalrealshellsortbb3in___18(A,B,C,D,E,F,G,H,I,J,K):
* Chain [[52,53,54,55,56,57,58]]...: 47*it(52)+0
  with precondition: [C=E,A>=C+1,F>=2,7>=F] 

* Chain [[52,53,54,55,56,57,58],80]: 47*it(52)+3
  with precondition: [F=2,C=E,H+K+1=I,A>=B+1,A>=C+1,I>=H+1,G>=I,2*H>=I,A+2*H>=2*B+I,2*A+2*H>=2*B+C+I+2] 

* Chain [[52,53,54,55,56,57,58],79]: 49*it(52)+6
  with precondition: [F=2,C=E,K>=0,A>=2*B+1,A>=B+1,A>=C+1,G>=I,H>=K+1,I>=2*H+K+1] 

* Chain [[52,53,54,55,56,57,58],78]: 49*it(52)+3
  with precondition: [F=2,C=E,K>=0,A>=2*B+1,A>=B+1,A>=C+1,G>=I,H>=K+1,I>=2*H+K+1] 

* Chain [[52,53,54,55,56,57,58],77]: 47*it(52)+3*s(30)+6
  Such that:s(30) =< G-H

  with precondition: [F=2,C=E,H+K+1=I,A>=B+1,A>=C+1,I>=H+3,G>=I,2*H>=I,3*A+4*H>=5*B+2*I+3,A+2*H>=2*B+I,4*A+6*H>=6*B+3*I+C+4] 

* Chain [[52,53,54,55,56,57,58],76]: 49*it(52)+3*s(31)+6
  Such that:s(31) =< G-H

  with precondition: [F=2,C=E,K>=0,A>=2*B+1,A>=B+1,A>=C+1,I>=H+3,G>=I,H>=K+1,I>=2*H+K+1] 

* Chain [[52,53,54,55,56,57,58],75]: 47*it(52)+6
  with precondition: [F=2,C=E,H+K+1=I,A>=B+1,A>=C+1,I>=H+2,G>=I,2*H>=I,2*A+2*H>=3*B+I+2,A+2*H>=2*B+I,3*A+4*H>=4*B+2*I+C+3] 

* Chain [[52,53,54,55,56,57,58],74]: 44*it(52)+5*it([74])+3*s(20)+3*s(25)+6*s(39)+0
  Such that:it([74]) =< 1

  with precondition: [F=3,C=E,A>=C+1] 

* Chain [[52,53,54,55,56,57,58],73]: 47*it(52)+3
  with precondition: [F=6,C=E,G=I,G=K+1,A>=B+1,A>=C+1,G>=H+1] 

* Chain [[52,53,54,55,56,57,58],72]: 47*it(52)+3*s(41)+3
  Such that:s(41) =< G-H

  with precondition: [F=6,C=E,G=I,G=K+1,A>=B+1,A>=C+1,G>=H+2] 

* Chain [[52,53,54,55,56,57,58],71]: 47*it(52)+2
  with precondition: [F=7,C=E,G=I,G=K+1,A>=C+1,H>=G,A+H>=B+G,H+2*A>=B+C+G+2] 

* Chain [[52,53,54,55,56,57,58],70]: 48*it(52)+3
  with precondition: [F=7,C=E,G=I,A>=2*B+1,G>=2*H+1,A>=B+1,A>=C+1,G>=H+1,K>=H] 

* Chain [[52,53,54,55,56,57,58],69]: 48*it(52)+6
  with precondition: [F=7,C=E,G=I,A>=2*B+1,G>=2*H+1,A>=B+1,A>=C+1,G>=H+2,K>=H] 

* Chain [[52,53,54,55,56,57,58],68]: 48*it(52)+3*s(44)+6
  Such that:s(44) =< G-H

  with precondition: [F=7,C=E,G=I,A>=2*B+1,G>=2*H+1,A>=B+1,A>=C+1,G>=H+3,K>=H] 

* Chain [[52,53,54,55,56,57,58],67]...: 49*it(52)+5
  with precondition: [F=2,C=E,A>=2*B+1,A>=B+1,A>=C+1] 

* Chain [[52,53,54,55,56,57,58],66]...: 43*it(52)+5*it([66])+3*s(20)+3*s(25)+3*s(49)+0
  Such that:it([66]) =< 1

  with precondition: [F=2,C=E,A>=2*B+1,A>=B+1,A>=C+1] 

* Chain [[52,53,54,55,56,57,58],65]...: 49*it(52)+2
  with precondition: [F=2,C=E,A>=2*B+1,A>=B+1,A>=C+1] 

* Chain [[52,53,54,55,56,57,58],64]...: 49*it(52)+5
  with precondition: [F=3,C=E,A>=2*B+1,A>=B+1,A>=C+1] 

* Chain [[52,53,54,55,56,57,58],63]...: 43*it(52)+5*it([63])+3*s(20)+3*s(25)+3*s(55)+0
  Such that:it([63]) =< 1

  with precondition: [F=3,C=E,A>=2*B+1,A>=B+1,A>=C+1] 

* Chain [[52,53,54,55,56,57,58],62]...: 49*it(52)+2
  with precondition: [F=3,C=E,A>=2*B+1,A>=B+1,A>=C+1] 

* Chain [[52,53,54,55,56,57,58],61]...: 49*it(52)+6
  with precondition: [F=7,C=E,G=I,A>=2*B+1,A>=B+1,A>=C+1] 

* Chain [[52,53,54,55,56,57,58],60]...: 43*it(52)+6*it([60])+3*s(20)+3*s(25)+3*s(61)+0
  Such that:it([60]) =< 1

  with precondition: [F=7,C=E,G=I,A>=2*B+1,A>=B+1,A>=C+1] 

* Chain [[52,53,54,55,56,57,58],59]...: 49*it(52)+3
  with precondition: [F=7,C=E,G=I,A>=2*B+1,A>=B+1,A>=C+1] 

* Chain [80]: 3
  with precondition: [F=2,E=C,J=D,A=G,B=H,E+1=I,E=B+K,E>=B,A>=E+1,2*B>=E+1] 

* Chain [79]: 2*s(28)+6
  with precondition: [F=2,E=C,A=G,B=H,E+2=I,K>=0,A>=E+2,B>=K+1,E+1>=2*B+K] 

* Chain [78]: 2*s(29)+3
  with precondition: [F=2,E=C,J=D,A=G,B=H,E+1=I,K>=0,A>=E+1,B>=K+1,E>=2*B+K] 

* Chain [77]: 3*s(30)+6
  Such that:s(30) =< A-E

  with precondition: [F=2,E=C,A=G,B=H,B+K+1=I,E>=B,I>=E+3,A>=I,2*B>=I] 

* Chain [76]: 3*s(31)+2*s(32)+6
  Such that:s(31) =< A-E

  with precondition: [F=2,E=C,A=G,B=H,K>=0,E>=B,I>=E+3,A>=I,B>=K+1,I>=2*B+K+1] 

* Chain [75]: 6
  with precondition: [F=2,E=C,A=G,B=H,E+2=I,E+1=B+K,E>=B,A>=E+2,2*B>=E+2] 

* Chain [74]: 3*s(33)+6*s(34)+5
  Such that:aux(12) =< A-C
s(34) =< aux(12)

  with precondition: [F=3,E=C,A>=E+1] 

* Chain [73]: 3
  with precondition: [F=6,C+1=A,J=D,C=E,C+1=G,B=H,C+1=I,C=K,C>=B] 

* Chain [72]: 3*s(41)+3
  Such that:s(41) =< A-E

  with precondition: [F=6,E=C,A=G,B=H,A=I,A=K+1,E>=B,A>=E+2] 

* Chain [71]: 2
  with precondition: [F=7,C+1=A,J=D,C=E,C+1=G,B=H,C+1=I,C=K,B>=C+1] 

* Chain [70]: 1*s(42)+3
  with precondition: [F=7,C+1=A,J=D,C=E,C+1=G,B=H,C+1=I,C>=2*B,C>=B,K>=B] 

* Chain [69]: 1*s(43)+6
  with precondition: [F=7,C+2=A,C=E,C+2=G,B=H,C+2=I,C+1>=2*B,C>=B,K>=B] 

* Chain [68]: 3*s(44)+1*s(45)+6
  Such that:s(44) =< A-E

  with precondition: [F=7,E=C,A=G,B=H,A=I,A>=2*B+1,E>=B,K>=B,A>=E+3] 

* Chain [67]...: 2*s(46)+5
  with precondition: [F=2,E=C,E+1>=2*B,E>=B,A>=E+2] 

* Chain [66]...: 3*s(47)+2*s(48)+5
  Such that:s(47) =< A-E

  with precondition: [F=2,E=C,A>=2*B+1,E>=B,A>=E+3] 

* Chain [65]...: 2*s(51)+2
  with precondition: [F=2,E=C,E>=2*B,E>=B,A>=E+1] 

* Chain [64]...: 2*s(52)+5
  with precondition: [F=3,E=C,E+1>=2*B,E>=B,A>=E+2] 

* Chain [63]...: 3*s(53)+2*s(54)+5
  Such that:s(53) =< A-E

  with precondition: [F=3,E=C,A>=2*B+1,E>=B,A>=E+3] 

* Chain [62]...: 2*s(57)+2
  with precondition: [F=3,E=C,E>=2*B,E>=B,A>=E+1] 

* Chain [61]...: 2*s(58)+6
  with precondition: [F=7,E=C,I=G,E+1>=2*B,E>=B,A>=E+2] 

* Chain [60]...: 3*s(59)+2*s(60)+6
  Such that:s(59) =< A-E

  with precondition: [F=7,E=C,I=G,A>=2*B+1,E>=B,A>=E+3] 

* Chain [59]...: 2*s(63)+3
  with precondition: [F=7,E=C,I=G,E>=2*B,E>=B,A>=E+1] 


#### Cost of chains of n_evalrealshellsortbb6in___19(A,B,C,D,E,F,G,H,I,J,K):
* Chain [[81,82,83,84,85]]...: 286*it(81)+0
  with precondition: [A>=C+1,B>=E+1,E>=0,F>=3,8>=F] 

* Chain [[81,82,83,84,85],95]...: 325*it(81)+6*it([95])+3*s(136)+3*s(137)+3*s(138)+3*s(140)+3*s(142)+3*s(151)+0
  Such that:it([95]) =< 1

  with precondition: [F=3,E>=0,A>=C+1,B>=E+1] 

* Chain [[81,82,83,84,85],94]...: 333*it(81)+1
  with precondition: [F=6,E>=0,A>=C+1,B>=E+1] 

* Chain [[81,82,83,84,85],93]...: 325*it(81)+7*it([93])+3*s(136)+3*s(137)+3*s(138)+3*s(140)+3*s(142)+3*s(160)+0
  Such that:it([93]) =< 1

  with precondition: [F=7,E>=0,A>=C+1,B>=E+1] 

* Chain [[81,82,83,84,85],92]: 330*it(81)+11*it([92])+3*s(136)+3*s(137)+3*s(138)+3*s(140)+3*s(142)+6*s(166)+0
  Such that:aux(125) =< 1
it([92]) =< aux(125)

  with precondition: [F=3,E>=0,A>=C+1,B>=E+1] 

* Chain [[81,82,83,84,85],91]: 368*it(81)+4*it([91])+3*s(136)+3*s(137)+3*s(138)+3*s(140)+3*s(142)+3*s(173)+0
  Such that:it([91]) =< 1

  with precondition: [F=6,G=I,G=K+1,E>=0,A>=C+1,B>=E+1,G>=H+1] 

* Chain [[81,82,83,84,85],90]: 286*it(81)+3
  with precondition: [F=7,I=G,I=K+1,E>=0,H>=1,A>=C+1,B>=E+1,H>=I] 

* Chain [[81,82,83,84,85],89]: 287*aux(141)+0
  with precondition: [F=7,I=G,E>=0,I>=2*H+1,A>=C+1,B>=E+1,I>=H+1,K>=H] 

* Chain [[81,82,83,84,85],88]: 287*it(81)+3*s(177)+7
  Such that:s(177) =< -H+I

  with precondition: [F=7,I=G,E>=0,H>=1,I>=2*H+1,A>=C+1,B>=E+1,I>=H+3,K>=H] 

* Chain [[81,82,83,84,85],87]: 333*it(81)+3
  with precondition: [F=7,G=I,G=K+1,E>=0,A>=C+1,B>=E+1,H>=G] 

* Chain [[81,82,83,84,85],86]: 286*it(81)+1
  with precondition: [F=8,E>=0,K>=0,A>=C+1,B>=E+1,I>=G,H>=K+1] 

* Chain [95]...: 54*s(144)+3*s(145)+6
  Such that:s(145) =< A-C

  with precondition: [F=3,E>=0,A>=C+1,B>=E+1] 

* Chain [94]...: 47*s(152)+1
  with precondition: [F=6,E>=0,A>=C+1,B>=E+1] 

* Chain [93]...: 54*s(153)+3*s(154)+7
  Such that:s(154) =< A-C

  with precondition: [F=7,E>=0,A>=C+1,B>=E+1] 

* Chain [92]: 5*s(161)+6*s(163)+59*s(164)+6
  Such that:s(161) =< 1
s(162) =< A-C
s(163) =< s(162)

  with precondition: [F=3] 

* Chain [91]: 97*s(169)+3*s(171)+4
  Such that:s(171) =< A-C

  with precondition: [F=6,G=I,G=K+1,E>=0,A>=B+1,A>=C+1,B>=E+1,G>=H+1] 

* Chain [90]: 3
  with precondition: [F=7,A=C+1,A=G,B=H,A=I,A=K+1,E>=0,B>=A,B>=E+1] 

* Chain [89]: 1*aux(141)+0
  with precondition: [F=7,G=I,E>=0,A>=2*B+1,G>=2*H+1,A>=C+1,B>=E+1,G>=H+1,K>=H] 

* Chain [88]: 3*s(177)+1*s(178)+7
  Such that:s(177) =< A-C

  with precondition: [F=7,A=G,B=H,A=I,E>=0,A>=2*B+1,C>=B,K>=B,A>=C+3,B>=E+1] 

* Chain [87]: 47*s(179)+3
  with precondition: [F=7,G=I,G=K+1,E>=0,A>=C+1,B>=E+1,H>=G,A+H>=B+G,H+2*A>=B+C+G+2] 

* Chain [86]: 1
  with precondition: [F=8,J=D,A=G,B=H,C=I,E=K,E>=0,C>=A,B>=E+1] 


#### Cost of chains of n_evalrealshellsortbb3in___20(A,B,C,D,E,F,G,H,I,J,K):
* Chain [[96,97]]...: 2647*it(96)+0
  with precondition: [A>=2,B>=1,C=0,E=0] 

* Chain [[96,97],[98],107]: 2635*it(96)+4*it([[98],107])+3*s(258)+6*s(261)+3*s(262)+5*s(265)+0
  Such that:it([[98],107]) =< 1

  with precondition: [C=0,E=0,F=9,A>=2,B>=1] 

* Chain [[96,97],[98],106]: 3045*it(96)+29*it([[98],106])+3*s(258)+6*s(261)+3*s(262)+5*s(271)+0
  Such that:aux(184) =< 1
it([[98],106]) =< aux(184)

  with precondition: [C=0,E=0,F=3,A>=2,B>=1] 

* Chain [[96,97],112]...: 3318*it(96)+13*it([112])+3*s(258)+6*s(261)+3*s(262)+3*s(280)+0
  Such that:aux(195) =< 1
it([112]) =< aux(195)

  with precondition: [C=0,E=0,F=3,A>=2,B>=1] 

* Chain [[96,97],111]...: 3891*it(96)+17*it([111])+3*s(258)+6*s(261)+3*s(262)+3*s(290)+0
  Such that:aux(206) =< 1
it([111]) =< aux(206)

  with precondition: [C=0,E=0,F=9,A>=2,B>=1] 

* Chain [[96,97],110]...: 3604*it(96)+18*it([110])+3*s(258)+6*s(261)+3*s(262)+3*s(298)+0
  Such that:aux(217) =< 1
it([110]) =< aux(217)

  with precondition: [C=0,E=0,F=10,I=0,0>=G,A>=2,B>=1,H>=1] 

* Chain [[96,97],109]...: 3605*it(96)+16*it([109])+3*s(258)+6*s(261)+3*s(262)+3*s(307)+0
  Such that:aux(228) =< 1
it([109]) =< aux(228)

  with precondition: [C=0,E=0,F=11,G=I,0>=H,A>=2,B>=1] 

* Chain [[96,97],108]...: 3605*it(96)+16*it([108])+3*s(258)+6*s(261)+3*s(262)+3*s(316)+0
  Such that:aux(239) =< 1
it([108]) =< aux(239)

  with precondition: [C=0,E=0,F=12,H=0,G=I,A>=2,B>=1] 

* Chain [[96,97],107]: 2647*it(96)+4
  with precondition: [C=0,E=0,F=9,A>=2,B>=1] 

* Chain [[96,97],106]: 3045*it(96)+23*it([106])+3*s(258)+6*s(261)+3*s(262)+6*s(319)+0
  Such that:aux(250) =< 1
it([106]) =< aux(250)

  with precondition: [C=0,E=0,F=3,A>=2,B>=1] 

* Chain [[96,97],105]: 3984*it(96)+14*it([105])+3*s(258)+6*s(261)+3*s(262)+6*s(332)+0
  Such that:aux(262) =< 1
it([105]) =< aux(262)

  with precondition: [C=0,E=0,F=9,A>=2,B>=1] 

* Chain [[96,97],104]: 2648*it(96)+4
  with precondition: [C=0,E=0,F=10,I=0,K+1=G,0>=K+1,A>=2,B>=1,H>=1] 

* Chain [[96,97],103]: 2933*it(96)+5
  with precondition: [C=0,E=0,F=10,I=0,0>=G,A>=2,B>=1,H>=1,K>=0,2*H>=K] 

* Chain [[96,97],102]: 2648*it(96)+2
  with precondition: [C=0,E=0,F=11,K+1=G,K+1=I,0>=H,0>=K+2,A>=2,B>=1,2*H>=K+1] 

* Chain [[96,97],101]: 3697*it(96)+13*it([101])+3*s(258)+6*s(261)+3*s(262)+6*s(344)+0
  Such that:aux(274) =< 1
it([101]) =< aux(274)

  with precondition: [C=0,E=0,F=11,I=G,0>=H,A>=2,B>=1,I>=2*H,K+1>=2*H] 

* Chain [[96,97],100]: 2648*it(96)+2
  with precondition: [C=0,E=0,F=12,H=0,K+1=G,K+1=I,0>=K+1,A>=2,B>=1] 

* Chain [[96,97],99]: 3697*it(96)+13*it([99])+3*s(258)+6*s(261)+3*s(262)+6*s(355)+0
  Such that:aux(286) =< 1
it([99]) =< aux(286)

  with precondition: [C=0,E=0,F=12,H=0,I=G,A>=2,B>=1,I>=1,K>=0] 

* Chain [112]...: 6*s(275)+3*s(276)+683*s(277)+7
  Such that:s(275) =< 1
s(276) =< A

  with precondition: [C=0,E=0,F=3,A>=2,B>=1] 

* Chain [111]...: 7*s(282)+3*s(283)+1256*s(284)+10
  Such that:s(282) =< 1
s(283) =< A

  with precondition: [C=0,E=0,F=9,A>=2,B>=1] 

* Chain [110]...: 7*s(292)+3*s(293)+969*s(294)+11
  Such that:s(292) =< 1
s(293) =< A

  with precondition: [C=0,E=0,F=10,I=0,0>=G,A>=2,B>=1,H>=1] 

* Chain [109]...: 7*s(300)+3*s(301)+970*s(302)+9
  Such that:s(300) =< 1
s(301) =< A

  with precondition: [C=0,E=0,F=11,I=G,0>=H,A>=2,B>=1] 

* Chain [108]...: 7*s(309)+3*s(310)+970*s(311)+9
  Such that:s(309) =< 1
s(310) =< A

  with precondition: [C=0,E=0,F=12,H=0,I=G,A>=2,B>=1] 

* Chain [106]: 16*s(268)+6*s(269)+410*s(270)+7
  Such that:s(267) =< 1
s(266) =< A
s(268) =< s(267)
s(269) =< s(266)

  with precondition: [C=0,E=0,F=3,A>=1,B>=1] 

* Chain [105]: 1349*s(323)+6*s(324)+4*s(327)+10
  Such that:s(327) =< 1
aux(251) =< A
s(324) =< aux(251)

  with precondition: [C=0,E=0,F=9,A>=2,B>=1] 

* Chain [104]: 1*s(335)+4
  with precondition: [C=0,E=0,F=10,I=0,G=K+1,0>=G,A>=2,B>=1,H>=1] 

* Chain [103]: 286*s(336)+5
  with precondition: [C=0,E=0,F=10,I=0,0>=G,A>=2,B>=1,H>=1,K>=0,2*H>=K] 

* Chain [102]: 1*s(337)+2
  with precondition: [C=0,E=0,F=11,G=I,G=K+1,0>=G+1,0>=H,A>=2,B>=1,2*H>=G] 

* Chain [101]: 6*s(338)+1062*s(339)+4*s(341)+9
  Such that:s(341) =< 1
aux(263) =< A
s(338) =< aux(263)

  with precondition: [C=0,E=0,F=11,G=I,0>=H,A>=2,B>=1,G>=2*H,K+1>=2*H] 

* Chain [100]: 1*s(348)+2
  with precondition: [C=0,E=0,F=12,H=0,G=I,G=K+1,0>=G,A>=2,B>=1] 

* Chain [99]: 6*s(349)+1062*s(350)+4*s(352)+9
  Such that:s(352) =< 1
aux(275) =< A
s(349) =< aux(275)

  with precondition: [C=0,E=0,F=12,H=0,G=I,A>=2,B>=1,G>=1,K>=0] 


#### Cost of chains of n_evalrealshellsortbb7in___4(A,B,C,D,E,F,G,H,I,J,K):
* Chain [[113],115]: 3*it(113)+2
  Such that:it(113) =< B

  with precondition: [C=0,F=9,0>=A,B>=2] 

* Chain [[113],114]: 3*it(113)+0
  Such that:it(113) =< B

  with precondition: [C=0,F=3,0>=A,B>=2] 

* Chain [115]: 2
  with precondition: [B=1,C=0,F=9,0>=A] 

* Chain [114]: 0
  with precondition: [F=3] 


#### Cost of chains of n_evalrealshellsortbb7in___4_loop_cont(A,B,C,D,E,F,G):
* Chain [117]: 0
  with precondition: [A=3] 

* Chain [116]: 0
  with precondition: [A=9] 


#### Cost of chains of n_evalrealshellsortbb3in___20_loop_cont(A,B,C,D,E,F,G):
* Chain [122]: 0
  with precondition: [A=3] 

* Chain [121]: 0
  with precondition: [A=9] 

* Chain [120]: 6*s(457)+2
  Such that:aux(298) =< C
s(457) =< aux(298)

  with precondition: [A=10] 

* Chain [119]: 1
  with precondition: [A=11,D=B,0>=C] 

* Chain [118]: 1
  with precondition: [A=12,C=0,D=B] 


#### Cost of chains of n_evalrealshellsortbb6in___21(A,B,C,D,E,F):
* Chain [124]: 124*s(461)+24*s(462)+26755*s(463)+11
  Such that:aux(299) =< 1
aux(300) =< A
s(461) =< aux(299)
s(462) =< aux(300)

  with precondition: [C=0,B>=1,A>=2*B,2*B+1>=A] 

* Chain [123]...: 15*s(487)+114*s(489)+36193*s(490)+14
  Such that:aux(301) =< 1
aux(302) =< A
s(489) =< aux(301)
s(487) =< aux(302)

  with precondition: [C=0,B>=1,A>=2*B,2*B+1>=A] 


#### Cost of chains of n_evalrealshellsortbb8in___24(A,B,C,D,E,F):
* Chain [127]...: 114*s(530)+15*s(531)+36193*s(532)+15
  Such that:s(528) =< 1
s(529) =< A
s(530) =< s(528)
s(531) =< s(529)

  with precondition: [B>=1,A>=2*B,2*B+1>=A] 

* Chain [126]: 1
  with precondition: [A=1,B=0] 

* Chain [125]: 124*s(535)+24*s(536)+26755*s(537)+12
  Such that:s(533) =< 1
s(534) =< A
s(535) =< s(533)
s(536) =< s(534)

  with precondition: [B>=1,A>=2*B,2*B+1>=A] 


#### Cost of chains of n_evalrealshellsortentryin___26(A,B,C,D,E,F):
* Chain [132]...: 114*s(540)+15*s(541)+36193*s(542)+16
  Such that:s(538) =< 1
s(539) =< A
s(540) =< s(538)
s(541) =< s(539)

  with precondition: [A>=2] 

* Chain [131]: 2
  with precondition: [A=0] 

* Chain [130]: 2
  with precondition: [A=1] 

* Chain [129]: 2
  with precondition: [0>=A+1] 

* Chain [128]: 124*s(545)+24*s(546)+26755*s(547)+13
  Such that:s(543) =< 1
s(544) =< A
s(545) =< s(543)
s(546) =< s(544)

  with precondition: [A>=2] 


#### Cost of chains of pyRinit(A,B,C,D,E,F):
* Chain [137]: 4
  with precondition: [A=0] 

* Chain [136]: 4
  with precondition: [A=1] 

* Chain [135]: 4
  with precondition: [0>=A+1] 

* Chain [134]: 124*s(550)+24*s(551)+26755*s(552)+15
  Such that:s(548) =< 1
s(549) =< A
s(550) =< s(548)
s(551) =< s(549)

  with precondition: [A>=2] 

* Chain [133]...: 114*s(555)+15*s(556)+36193*s(557)+18
  Such that:s(553) =< 1
s(554) =< A
s(555) =< s(553)
s(556) =< s(554)

  with precondition: [A>=2] 


Closed-form bounds of pyRinit(A,B,C,D,E,F): 
-------------------------------------
* Chain [137] with precondition: [A=0] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [136] with precondition: [A=1] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [135] with precondition: [0>=A+1] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [134] with precondition: [A>=2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [133]... with precondition: [A>=2] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of pyRinit(A,B,C,D,E,F): inf 
Asymptotic class: infinity 
* Total analysis performed in 9199 ms.


-- stats
realtime 0:09.72
usertime 9.40
systime 0.12

