WORST_CASE(?,O(n^4))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_evalfbb4in___7/11]
1. recursive  : [n_evalfbb4in___10/11,n_evalfbb4in___7_loop_cont/12,n_evalfbb4in___8/11,n_evalfbb6in___3/11,n_evalfbb6in___6/11,n_evalfbb8in___5/11]
2. recursive  : [n_evalfbb6in___1/11,n_evalfbb8in___9/11]
3. recursive  : [n_evalfbb10in___2/11,n_evalfbb10in___4/11,n_evalfbb4in___10_loop_cont/12,n_evalfbb6in___11/11,n_evalfbb8in___13/11,n_evalfbb8in___9_loop_cont/12]
4. non_recursive  : [exit_location/1]
5. non_recursive  : [n_evalfstop___12/6]
6. non_recursive  : [n_evalfbb8in___13_loop_cont/7]
7. non_recursive  : [n_evalfbb10in___14/6]
8. non_recursive  : [n_evalfstart/6]
9. non_recursive  : [pyRinit/6]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_evalfbb4in___7/11
1. SCC is partially evaluated into n_evalfbb4in___10/11
2. SCC is partially evaluated into n_evalfbb8in___9/11
3. SCC is partially evaluated into n_evalfbb8in___13/11
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into n_evalfbb8in___13_loop_cont/7
7. SCC is partially evaluated into n_evalfbb10in___14/6
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into pyRinit/6

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalfbb4in___7/11 
* CE 21 is refined into CE [22] 
* CE 20 is refined into CE [23] 
* CE 19 is refined into CE [24] 


### Cost equations --> "Loop" of n_evalfbb4in___7/11 
* CEs [24] --> Loop 20 
* CEs [22] --> Loop 21 
* CEs [23] --> Loop 22 

### Ranking functions of CR n_evalfbb4in___7(A,B,C,D,E,F,G,H,I,J,K) 
* RF of phase [20]: [B-E+1,D-E+1]

#### Partial ranking functions of CR n_evalfbb4in___7(A,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    B-E+1
    D-E+1


### Specialization of cost equations n_evalfbb4in___10/11 
* CE 16 is refined into CE [25,26] 
* CE 17 is refined into CE [27] 
* CE 18 is refined into CE [28] 
* CE 14 is refined into CE [29,30] 
* CE 15 is refined into CE [31] 


### Cost equations --> "Loop" of n_evalfbb4in___10/11 
* CEs [30] --> Loop 23 
* CEs [31] --> Loop 24 
* CEs [29] --> Loop 25 
* CEs [26] --> Loop 26 
* CEs [27,28] --> Loop 27 
* CEs [25] --> Loop 28 

### Ranking functions of CR n_evalfbb4in___10(A,B,C,D,E,F,G,H,I,J,K) 

#### Partial ranking functions of CR n_evalfbb4in___10(A,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [23,24]:
  - RF of loop [23:1]:
    B-D depends on loops [24:1] 
  - RF of loop [24:1]:
    A-C
    B-C-1
    -C+D-1 depends on loops [23:1] 


### Specialization of cost equations n_evalfbb8in___9/11 
* CE 12 is refined into CE [32] 
* CE 13 is refined into CE [33] 
* CE 11 is refined into CE [34] 


### Cost equations --> "Loop" of n_evalfbb8in___9/11 
* CEs [34] --> Loop 29 
* CEs [32] --> Loop 30 
* CEs [33] --> Loop 31 

### Ranking functions of CR n_evalfbb8in___9(A,B,C,D,E,F,G,H,I,J,K) 
* RF of phase [29]: [A-C+1,B-C+1,-C+D]

#### Partial ranking functions of CR n_evalfbb8in___9(A,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [29]:
  - RF of loop [29:1]:
    A-C+1
    B-C+1
    -C+D


### Specialization of cost equations n_evalfbb8in___13/11 
* CE 7 is refined into CE [35,36] 
* CE 6 is refined into CE [37,38] 
* CE 4 is refined into CE [39] 
* CE 8 is refined into CE [40] 
* CE 5 is refined into CE [41,42,43,44] 


### Cost equations --> "Loop" of n_evalfbb8in___13/11 
* CEs [44] --> Loop 32 
* CEs [43] --> Loop 33 
* CEs [42] --> Loop 34 
* CEs [41] --> Loop 35 
* CEs [36] --> Loop 36 
* CEs [37,38,39,40] --> Loop 37 
* CEs [35] --> Loop 38 

### Ranking functions of CR n_evalfbb8in___13(A,B,C,D,E,F,G,H,I,J,K) 
* RF of phase [32]: [-A+B,-A+D-1,-A+E-1]

#### Partial ranking functions of CR n_evalfbb8in___13(A,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [32]:
  - RF of loop [32:1]:
    -A+B
    -A+D-1
    -A+E-1


### Specialization of cost equations n_evalfbb8in___13_loop_cont/7 
* CE 9 is refined into CE [45] 
* CE 10 is refined into CE [46] 


### Cost equations --> "Loop" of n_evalfbb8in___13_loop_cont/7 
* CEs [45] --> Loop 39 
* CEs [46] --> Loop 40 

### Ranking functions of CR n_evalfbb8in___13_loop_cont(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR n_evalfbb8in___13_loop_cont(A,B,C,D,E,F,G) 


### Specialization of cost equations n_evalfbb10in___14/6 
* CE 2 is refined into CE [47,48,49,50,51,52,53] 
* CE 3 is refined into CE [54] 


### Cost equations --> "Loop" of n_evalfbb10in___14/6 
* CEs [54] --> Loop 41 
* CEs [50,51] --> Loop 42 
* CEs [49] --> Loop 43 
* CEs [47,48,52,53] --> Loop 44 

### Ranking functions of CR n_evalfbb10in___14(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalfbb10in___14(A,B,C,D,E,F) 


### Specialization of cost equations pyRinit/6 
* CE 1 is refined into CE [55,56,57] 


### Cost equations --> "Loop" of pyRinit/6 
* CEs [57] --> Loop 45 
* CEs [55,56] --> Loop 46 

### Ranking functions of CR pyRinit(A,B,C,D,E,F) 

#### Partial ranking functions of CR pyRinit(A,B,C,D,E,F) 


Computing Bounds
=====================================

#### Cost of chains of n_evalfbb4in___7(A,B,C,D,E,F,G,H,I,J,K):
* Chain [[20],22]: 1*it(20)+1
  Such that:it(20) =< -E+K

  with precondition: [F=2,A=G,B=H,C=I,D+1=J,D+1=K,C>=1,E>=3,D>=A+1,A>=C,B>=D,D>=E] 

* Chain [[20],21]: 1*it(20)+0
  Such that:it(20) =< D-E+1

  with precondition: [F=3,C>=1,E>=3,D>=A+1,A>=C,B>=D,D>=E] 

* Chain [22]: 1
  with precondition: [F=2,E=D+1,A=G,B=H,C=I,E=J,E=K,C>=1,E>=A+2,A>=C,B+1>=E] 

* Chain [21]: 0
  with precondition: [F=3,C>=1,E>=3,D>=A+1,A>=C,B>=D,D+1>=E] 


#### Cost of chains of n_evalfbb4in___10(A,B,C,D,E,F,G,H,I,J,K):
* Chain [[23,24],27]: 4*it(23)+6*it(24)+1*s(2)+1*s(7)+1*s(8)+2
  Such that:aux(9) =< -A+B
it(24) =< A-C
aux(3) =< B+1
aux(2) =< B-D
aux(12) =< B
s(2) =< aux(12)
aux(1) =< it(24)*aux(9)
s(8) =< it(24)*aux(12)
it(23) =< aux(1)+aux(2)
s(7) =< it(23)*aux(3)

  with precondition: [E=1,F=3,C>=1,D>=3,D>=A+1,A>=C,B>=D,A+B>=C+D+1] 

* Chain [[23,24],26]: 4*it(23)+6*it(24)+1*s(7)+1*s(8)+1*s(9)+5
  Such that:it(24) =< -C+I
aux(2) =< -D+K
aux(9) =< -I+K
aux(13) =< K
s(9) =< aux(13)
aux(1) =< it(24)*aux(9)
s(8) =< it(24)*aux(13)
it(23) =< aux(1)+aux(2)
s(7) =< it(23)*aux(13)

  with precondition: [E=1,F=4,A+1=G,B=H,A+1=I,B+1=J,B+1=K,C>=1,D>=3,D>=A+1,A>=C,B>=D,A+B>=C+D+1] 

* Chain [28]: 5
  with precondition: [A=1,B=2,C=1,D=2,E=1,F=4,G=2,H=2,I=2,J=3,K=3] 

* Chain [27]: 1*s(2)+2
  Such that:s(2) =< D

  with precondition: [E=1,F=3,C>=1,D>=A+1,A>=C,B>=D] 

* Chain [25,[23,24],27]: 4*it(23)+1*s(2)+1*s(7)+6
  Such that:aux(3) =< B+1
aux(14) =< B
s(2) =< aux(14)
it(23) =< aux(14)
s(7) =< it(23)*aux(3)

  with precondition: [A=1,C=1,D=2,E=1,F=3,B>=4] 

* Chain [25,[23,24],26]: 4*it(23)+6*it(24)+1*s(7)+1*s(8)+1*s(9)+9
  Such that:it(24) =< 1
aux(15) =< K
s(9) =< aux(15)
aux(1) =< it(24)*aux(15)
s(8) =< it(24)*aux(15)
it(23) =< aux(1)+aux(15)
s(7) =< it(23)*aux(15)

  with precondition: [A=1,C=1,D=2,E=1,F=4,G=2,I=2,B=H,B+1=J,B+1=K,B>=4] 

* Chain [25,27]: 1*s(2)+6
  Such that:s(2) =< 3

  with precondition: [A=1,C=1,D=2,E=1,F=3,B>=3] 

* Chain [25,26]: 1*s(9)+9
  Such that:s(9) =< 3

  with precondition: [A=1,B=3,C=1,D=2,E=1,F=4,G=2,H=3,I=2,J=4,K=4] 


#### Cost of chains of n_evalfbb8in___9(A,B,C,D,E,F,G,H,I,J,K):
* Chain [[29],31]: 2*it(29)+0
  Such that:it(29) =< A-C+1

  with precondition: [F=3,A=B,A+1=D,C>=2,A>=C] 

* Chain [[29],30]: 2*it(29)+1
  Such that:it(29) =< -C+J

  with precondition: [F=5,A=B,A+1=D,A+1=G,A=H,A+1=I,A+1=J,E=K,C>=2,A>=C] 

* Chain [31]: 0
  with precondition: [F=3,A=B,A+1=D,C>=2,A+1>=C] 

* Chain [30]: 1
  with precondition: [F=5,A=B,A+1=C,A+1=D,K=E,A+1=G,A=H,A+1=I,A+1=J,A>=1] 


#### Cost of chains of n_evalfbb8in___13(A,B,C,D,E,F,G,H,I,J,K):
* Chain [38]: 4
  with precondition: [A=1,B=1,C=1,F=6] 

* Chain [37]: 1*s(18)+1*s(21)+8*s(22)+1*s(23)+6*s(25)+1*s(31)+4*s(32)+1*s(33)+8
  Such that:s(18) =< 3
aux(16) =< -A+B
s(25) =< A
s(21) =< A+1
aux(17) =< B
aux(18) =< B+1
s(22) =< aux(17)
s(23) =< s(22)*aux(18)
s(30) =< s(25)*aux(16)
s(31) =< s(25)*aux(17)
s(32) =< s(30)+aux(16)
s(33) =< s(32)*aux(18)

  with precondition: [C=1,F=3,A>=1,B>=A] 

* Chain [35,37]: 2*s(18)+14*s(22)+1*s(23)+1*s(31)+16
  Such that:aux(19) =< 2
aux(20) =< 3
s(22) =< aux(19)
s(18) =< aux(20)
s(23) =< s(22)*aux(20)
s(31) =< s(22)*aux(19)

  with precondition: [A=1,B=2,C=1,F=3] 

* Chain [35,36]: 2*s(35)+12
  Such that:s(35) =< 3

  with precondition: [A=1,B=2,C=1,F=6] 

* Chain [34,[32],37]: 8*it(32)+2*s(18)+15*s(21)+2*s(23)+4*s(32)+1*s(33)+6*s(53)+1*s(54)+1*s(55)+4*s(56)+1*s(57)+20
  Such that:aux(26) =< 2
aux(27) =< 4
aux(28) =< 3
s(18) =< aux(28)
it(32) =< aux(26)
s(21) =< aux(27)
s(23) =< s(21)*aux(27)
s(30) =< s(21)*aux(26)
s(32) =< s(30)+aux(26)
s(33) =< s(32)*aux(27)
aux(24) =< aux(27)
aux(22) =< aux(26)
s(53) =< it(32)*aux(27)
s(60) =< it(32)*aux(24)
s(58) =< it(32)*aux(22)
s(54) =< s(60)
s(59) =< s(53)*aux(26)
s(55) =< s(53)*aux(27)
s(56) =< s(59)+s(58)
s(57) =< s(56)*aux(27)

  with precondition: [A=1,B=3,C=1,F=3] 

* Chain [34,[32],36]: 8*it(32)+2*s(35)+6*s(53)+1*s(54)+1*s(55)+4*s(56)+1*s(57)+1*s(61)+16
  Such that:aux(29) =< 2
s(61) =< 3
aux(30) =< 4
it(32) =< aux(29)
s(35) =< aux(30)
aux(24) =< aux(30)
aux(22) =< aux(29)
s(53) =< it(32)*aux(30)
s(60) =< it(32)*aux(24)
s(58) =< it(32)*aux(22)
s(54) =< s(60)
s(59) =< s(53)*aux(29)
s(55) =< s(53)*aux(30)
s(56) =< s(59)+s(58)
s(57) =< s(56)*aux(30)

  with precondition: [A=1,B=3,C=1,F=6] 

* Chain [34,37]: 11*s(18)+1*s(23)+6*s(25)+1*s(31)+4*s(32)+1*s(33)+20
  Such that:aux(16) =< 1
s(25) =< 2
aux(18) =< 4
aux(31) =< 3
s(18) =< aux(31)
s(23) =< s(18)*aux(18)
s(30) =< s(25)*aux(16)
s(31) =< s(25)*aux(31)
s(32) =< s(30)+aux(16)
s(33) =< s(32)*aux(18)

  with precondition: [A=1,B=3,C=1,F=3] 

* Chain [33,[32],37]: 8*it(32)+1*s(18)+16*s(21)+2*s(23)+4*s(32)+1*s(33)+6*s(53)+1*s(54)+1*s(55)+4*s(56)+1*s(57)+6*s(62)+1*s(66)+4*s(67)+1*s(68)+20
  Such that:s(62) =< 1
s(18) =< 3
aux(26) =< B
aux(32) =< B+1
it(32) =< aux(26)
s(21) =< aux(32)
s(23) =< s(21)*aux(32)
s(30) =< s(21)*aux(26)
s(32) =< s(30)+aux(26)
s(33) =< s(32)*aux(32)
aux(24) =< aux(32)
aux(22) =< aux(26)
s(53) =< it(32)*aux(32)
s(60) =< it(32)*aux(24)
s(58) =< it(32)*aux(22)
s(54) =< s(60)
s(59) =< s(53)*aux(26)
s(55) =< s(53)*aux(32)
s(56) =< s(59)+s(58)
s(57) =< s(56)*aux(32)
s(65) =< s(62)*aux(32)
s(66) =< s(62)*aux(32)
s(67) =< s(65)+aux(32)
s(68) =< s(67)*aux(32)

  with precondition: [A=1,C=1,F=3,B>=4] 

* Chain [33,[32],36]: 8*it(32)+3*s(35)+6*s(53)+1*s(54)+1*s(55)+4*s(56)+1*s(57)+6*s(62)+1*s(66)+4*s(67)+1*s(68)+16
  Such that:s(62) =< 1
aux(29) =< B
aux(33) =< B+1
it(32) =< aux(29)
s(35) =< aux(33)
aux(24) =< aux(33)
aux(22) =< aux(29)
s(53) =< it(32)*aux(33)
s(60) =< it(32)*aux(24)
s(58) =< it(32)*aux(22)
s(54) =< s(60)
s(59) =< s(53)*aux(29)
s(55) =< s(53)*aux(33)
s(56) =< s(59)+s(58)
s(57) =< s(56)*aux(33)
s(65) =< s(62)*aux(33)
s(66) =< s(62)*aux(33)
s(67) =< s(65)+aux(33)
s(68) =< s(67)*aux(33)

  with precondition: [A=1,C=1,F=6,B>=4] 

* Chain [33,37]: 2*s(18)+8*s(22)+1*s(23)+6*s(25)+1*s(31)+4*s(32)+1*s(33)+6*s(62)+1*s(64)+1*s(66)+4*s(67)+1*s(68)+20
  Such that:s(62) =< 1
s(25) =< 2
aux(34) =< 3
aux(35) =< B
aux(36) =< B+1
s(18) =< aux(34)
s(22) =< aux(35)
s(23) =< s(22)*aux(36)
s(30) =< s(25)*aux(35)
s(31) =< s(25)*aux(35)
s(32) =< s(30)+aux(35)
s(33) =< s(32)*aux(36)
s(64) =< aux(36)
s(65) =< s(62)*aux(36)
s(66) =< s(62)*aux(36)
s(67) =< s(65)+aux(36)
s(68) =< s(67)*aux(36)

  with precondition: [A=1,C=1,F=3,B>=4] 


#### Cost of chains of n_evalfbb8in___13_loop_cont(A,B,C,D,E,F,G):
* Chain [40]: 0
  with precondition: [A=3] 

* Chain [39]: 0
  with precondition: [A=6] 


#### Cost of chains of n_evalfbb10in___14(A,B,C,D,E,F):
* Chain [44]: 24*s(160)+21*s(161)+6*s(165)+1*s(167)+1*s(168)+32*s(169)+14*s(170)+1*s(172)+4*s(173)+1*s(174)+1*s(185)+4*s(186)+1*s(187)+20*s(188)+3*s(190)+12*s(191)+3*s(192)+2*s(193)+4*s(195)+1*s(196)+2*s(201)+2*s(203)+8*s(204)+2*s(205)+21
  Such that:aux(47) =< 1
aux(48) =< 2
aux(49) =< 3
aux(50) =< B
aux(51) =< B+1
s(160) =< aux(47)
s(161) =< aux(48)
s(165) =< aux(49)
s(167) =< s(161)*aux(49)
s(168) =< s(161)*aux(48)
s(169) =< aux(50)
s(170) =< s(169)*aux(51)
s(171) =< s(160)*aux(50)
s(172) =< s(160)*aux(50)
s(173) =< s(171)+aux(50)
s(174) =< s(173)*aux(51)
s(184) =< s(161)*aux(50)
s(185) =< s(161)*aux(50)
s(186) =< s(184)+aux(50)
s(187) =< s(186)*aux(51)
s(188) =< aux(51)
s(189) =< s(160)*aux(51)
s(190) =< s(160)*aux(51)
s(191) =< s(189)+aux(51)
s(192) =< s(191)*aux(51)
s(193) =< s(188)*aux(51)
s(194) =< s(188)*aux(50)
s(195) =< s(194)+aux(50)
s(196) =< s(195)*aux(51)
s(197) =< aux(51)
s(198) =< aux(50)
s(199) =< s(169)*s(197)
s(200) =< s(169)*s(198)
s(201) =< s(199)
s(202) =< s(170)*aux(50)
s(203) =< s(170)*aux(51)
s(204) =< s(202)+s(200)
s(205) =< s(204)*aux(51)

  with precondition: [A=1,B>=1] 

* Chain [43]: 2*s(225)+13
  Such that:s(225) =< 3

  with precondition: [A=1,B=2] 

* Chain [42]: 825
  with precondition: [A=1,B=3] 

* Chain [41]: 1
  with precondition: [A=1,0>=B] 


#### Cost of chains of pyRinit(A,B,C,D,E,F):
* Chain [46]: 8*s(285)+24*s(286)+21*s(287)+1*s(288)+1*s(289)+32*s(290)+14*s(291)+1*s(293)+4*s(294)+1*s(295)+1*s(297)+4*s(298)+1*s(299)+20*s(300)+3*s(302)+12*s(303)+3*s(304)+2*s(305)+4*s(307)+1*s(308)+2*s(313)+2*s(315)+8*s(316)+2*s(317)+827
  Such that:s(280) =< 1
s(281) =< 2
s(284) =< 3
s(282) =< B
s(283) =< B+1
s(285) =< s(284)
s(286) =< s(280)
s(287) =< s(281)
s(288) =< s(287)*s(284)
s(289) =< s(287)*s(281)
s(290) =< s(282)
s(291) =< s(290)*s(283)
s(292) =< s(286)*s(282)
s(293) =< s(286)*s(282)
s(294) =< s(292)+s(282)
s(295) =< s(294)*s(283)
s(296) =< s(287)*s(282)
s(297) =< s(287)*s(282)
s(298) =< s(296)+s(282)
s(299) =< s(298)*s(283)
s(300) =< s(283)
s(301) =< s(286)*s(283)
s(302) =< s(286)*s(283)
s(303) =< s(301)+s(283)
s(304) =< s(303)*s(283)
s(305) =< s(300)*s(283)
s(306) =< s(300)*s(282)
s(307) =< s(306)+s(282)
s(308) =< s(307)*s(283)
s(309) =< s(283)
s(310) =< s(282)
s(311) =< s(290)*s(309)
s(312) =< s(290)*s(310)
s(313) =< s(311)
s(314) =< s(291)*s(282)
s(315) =< s(291)*s(283)
s(316) =< s(314)+s(312)
s(317) =< s(316)*s(283)

  with precondition: [B>=1] 

* Chain [45]: 3
  with precondition: [0>=B] 


Closed-form bounds of pyRinit(A,B,C,D,E,F): 
-------------------------------------
* Chain [46] with precondition: [B>=1] 
    - Upper bound: 59*B+927+8*B*B+ (B+1)* (4*B)+ (B+1)* (8*B)*B+ (47*B+47)+ (22*B+22)*B+ (2*B+2)*B*B+ (B+1)* ((B+1)*B)+ (B+1)* ((2*B+2)*B)*B+ (8*B+8)* (B+1)+ (2*B+2)* (B+1)*B 
    - Complexity: n^4 
* Chain [45] with precondition: [0>=B] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of pyRinit(A,B,C,D,E,F): nat(B)*59+924+nat(B)*8*nat(B)+nat(B)*4*nat(B+1)+nat(B)*8*nat(B+1)*nat(B)+nat(B+1)*47+nat(B+1)*22*nat(B)+nat(B+1)*2*nat(B)*nat(B)+nat(B+1)*nat(B)*nat(B+1)+nat(B+1)*2*nat(B)*nat(B+1)*nat(B)+nat(B+1)*8*nat(B+1)+nat(B+1)*2*nat(B+1)*nat(B)+3 
Asymptotic class: n^4 
* Total analysis performed in 1443 ms.


-- stats
realtime 0:01.61
usertime 1.52
systime 0.01

