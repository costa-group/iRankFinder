WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalspeedpldi4bb2in/5,evalspeedpldi4bb3in/5,evalspeedpldi4bb4in/5,evalspeedpldi4bb5in/5]
1. non_recursive  : [evalspeedpldi4stop/3]
2. non_recursive  : [evalspeedpldi4returnin/3]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [evalspeedpldi4bb5in_loop_cont/4]
5. non_recursive  : [evalspeedpldi4entryin/3]
6. non_recursive  : [evalspeedpldi4start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalspeedpldi4bb5in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into evalspeedpldi4bb5in_loop_cont/4
5. SCC is partially evaluated into evalspeedpldi4entryin/3
6. SCC is partially evaluated into evalspeedpldi4start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalspeedpldi4bb5in/5 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 6 is refined into CE [13] 
* CE 5 is refined into CE [14] 


### Cost equations --> "Loop" of evalspeedpldi4bb5in/5 
* CEs [13] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [11] --> Loop 13 
* CEs [12] --> Loop 14 

### Ranking functions of CR evalspeedpldi4bb5in(A,B,C,D,E) 
* RF of phase [11]: [-A+B+1,B]
* RF of phase [12]: [B]

#### Partial ranking functions of CR evalspeedpldi4bb5in(A,B,C,D,E) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    -A+B+1
    B
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    B


### Specialization of cost equations evalspeedpldi4bb5in_loop_cont/4 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


### Cost equations --> "Loop" of evalspeedpldi4bb5in_loop_cont/4 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

### Ranking functions of CR evalspeedpldi4bb5in_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR evalspeedpldi4bb5in_loop_cont(A,B,C,D) 


### Specialization of cost equations evalspeedpldi4entryin/3 
* CE 3 is refined into CE [17] 
* CE 4 is refined into CE [18,19] 
* CE 2 is refined into CE [20] 


### Cost equations --> "Loop" of evalspeedpldi4entryin/3 
* CEs [17] --> Loop 17 
* CEs [18,19] --> Loop 18 
* CEs [20] --> Loop 19 

### Ranking functions of CR evalspeedpldi4entryin(A,B,C) 

#### Partial ranking functions of CR evalspeedpldi4entryin(A,B,C) 


### Specialization of cost equations evalspeedpldi4start/3 
* CE 1 is refined into CE [21,22,23] 


### Cost equations --> "Loop" of evalspeedpldi4start/3 
* CEs [23] --> Loop 20 
* CEs [22] --> Loop 21 
* CEs [21] --> Loop 22 

### Ranking functions of CR evalspeedpldi4start(A,B,C) 

#### Partial ranking functions of CR evalspeedpldi4start(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of evalspeedpldi4bb5in(A,B,C,D,E):
* Chain [[11],[12],14]: 3*it(11)+3*it(12)+1
  Such that:it(12) =< B-D
it(11) =< B-D+1

  with precondition: [C=2,E=0,A=D,A>=2,B>=A+1] 

* Chain [[11],[12],13]: 3*it(11)+3*it(12)+0
  Such that:it(12) =< -A+B
it(11) =< -A+B+1

  with precondition: [C=3,A>=2,B>=A+1] 

* Chain [[11],14]: 3*it(11)+1
  Such that:it(11) =< -A+B+1

  with precondition: [C=2,E=0,A=D,A>=1,B>=A] 

* Chain [[11],13]: 3*it(11)+0
  Such that:it(11) =< -A+B+1

  with precondition: [C=3,A>=1,B>=A] 

* Chain [13]: 0
  with precondition: [C=3,A>=1] 


#### Cost of chains of evalspeedpldi4bb5in_loop_cont(A,B,C,D):
* Chain [16]: 1
  with precondition: [A=2] 

* Chain [15]: 0
  with precondition: [A=3] 


#### Cost of chains of evalspeedpldi4entryin(A,B,C):
* Chain [19]: 2
  with precondition: [0>=A] 

* Chain [18]: 12*s(7)+6*s(8)+3
  Such that:aux(3) =< -A+B
aux(4) =< -A+B+1
s(8) =< aux(3)
s(7) =< aux(4)

  with precondition: [A>=1,B>=A+1] 

* Chain [17]: 2
  with precondition: [A>=B] 


#### Cost of chains of evalspeedpldi4start(A,B,C):
* Chain [22]: 3
  with precondition: [0>=A] 

* Chain [21]: 6*s(15)+12*s(16)+4
  Such that:s(13) =< -A+B
s(14) =< -A+B+1
s(15) =< s(13)
s(16) =< s(14)

  with precondition: [A>=1,B>=A+1] 

* Chain [20]: 3
  with precondition: [A>=B] 


Closed-form bounds of evalspeedpldi4start(A,B,C): 
-------------------------------------
* Chain [22] with precondition: [0>=A] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [21] with precondition: [A>=1,B>=A+1] 
    - Upper bound: -18*A+18*B+16 
    - Complexity: n 
* Chain [20] with precondition: [A>=B] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of evalspeedpldi4start(A,B,C): nat(-A+B)*6+1+nat(-A+B+1)*12+3 
Asymptotic class: n 
* Total analysis performed in 169 ms.


-- stats
realtime 0:00.24
usertime 0.21
systime 0.00

