WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalspeedpldi2bb2in/7,evalspeedpldi2bb3in/7,evalspeedpldi2bb5in/7]
1. non_recursive  : [evalspeedpldi2stop/4]
2. non_recursive  : [evalspeedpldi2returnin/4]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [evalspeedpldi2bb5in_loop_cont/5]
5. non_recursive  : [evalspeedpldi2entryin/4]
6. non_recursive  : [evalspeedpldi2start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalspeedpldi2bb5in/7
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into evalspeedpldi2bb5in_loop_cont/5
5. SCC is partially evaluated into evalspeedpldi2entryin/4
6. SCC is partially evaluated into evalspeedpldi2start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalspeedpldi2bb5in/7 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 6 is refined into CE [13] 
* CE 5 is refined into CE [14] 


### Cost equations --> "Loop" of evalspeedpldi2bb5in/7 
* CEs [13] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [11] --> Loop 13 
* CEs [12] --> Loop 14 

### Ranking functions of CR evalspeedpldi2bb5in(A,B,C,D,E,F,G) 
* RF of phase [11,12]: [B+2*C-1]

#### Partial ranking functions of CR evalspeedpldi2bb5in(A,B,C,D,E,F,G) 
* Partial RF of phase [11,12]:
  - RF of loop [11:1]:
    A-B depends on loops [12:1] 
    C
  - RF of loop [12:1]:
    -A+B+1 depends on loops [11:1] 
    B depends on loops [11:1] 


### Specialization of cost equations evalspeedpldi2bb5in_loop_cont/5 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


### Cost equations --> "Loop" of evalspeedpldi2bb5in_loop_cont/5 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

### Ranking functions of CR evalspeedpldi2bb5in_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR evalspeedpldi2bb5in_loop_cont(A,B,C,D,E) 


### Specialization of cost equations evalspeedpldi2entryin/4 
* CE 2 is refined into CE [17,18,19] 
* CE 4 is refined into CE [20] 
* CE 3 is refined into CE [21] 


### Cost equations --> "Loop" of evalspeedpldi2entryin/4 
* CEs [20] --> Loop 17 
* CEs [21] --> Loop 18 
* CEs [17,18,19] --> Loop 19 

### Ranking functions of CR evalspeedpldi2entryin(A,B,C,D) 

#### Partial ranking functions of CR evalspeedpldi2entryin(A,B,C,D) 


### Specialization of cost equations evalspeedpldi2start/4 
* CE 1 is refined into CE [22,23,24] 


### Cost equations --> "Loop" of evalspeedpldi2start/4 
* CEs [24] --> Loop 20 
* CEs [23] --> Loop 21 
* CEs [22] --> Loop 22 

### Ranking functions of CR evalspeedpldi2start(A,B,C,D) 

#### Partial ranking functions of CR evalspeedpldi2start(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of evalspeedpldi2bb5in(A,B,C,D,E,F,G):
* Chain [[11,12],14]: 3*it(11)+2*it(12)+1
  Such that:aux(11) =< B+2*C
aux(12) =< B+2*C-F
it(11) =< C
it(11) =< aux(11)
it(12) =< aux(11)
it(11) =< aux(12)
it(12) =< aux(12)

  with precondition: [D=2,G=0,A=E,A>=1,B>=0,C>=1,A>=F,B+C>=F] 

* Chain [[11,12],13]: 3*it(11)+2*it(12)+0
  Such that:it(11) =< C
aux(14) =< B+2*C
it(11) =< aux(14)
it(12) =< aux(14)

  with precondition: [D=3,A>=1,B>=0,C>=1] 

* Chain [14]: 1
  with precondition: [C=0,D=2,G=0,A=E,B=F,A>=1,B>=0] 

* Chain [13]: 0
  with precondition: [D=3,A>=1,B>=0,C>=0] 


#### Cost of chains of evalspeedpldi2bb5in_loop_cont(A,B,C,D,E):
* Chain [16]: 1
  with precondition: [A=2] 

* Chain [15]: 0
  with precondition: [A=3] 


#### Cost of chains of evalspeedpldi2entryin(A,B,C,D):
* Chain [19]: 6*s(6)+4*s(7)+3
  Such that:aux(15) =< A
aux(16) =< 2*A
s(6) =< aux(15)
s(6) =< aux(16)
s(7) =< aux(16)

  with precondition: [A>=0,B>=1] 

* Chain [18]: 2
  with precondition: [0>=A+1] 

* Chain [17]: 2
  with precondition: [0>=B] 


#### Cost of chains of evalspeedpldi2start(A,B,C,D):
* Chain [22]: 3
  with precondition: [0>=A+1] 

* Chain [21]: 3
  with precondition: [0>=B] 

* Chain [20]: 6*s(13)+4*s(14)+4
  Such that:s(11) =< A
s(12) =< 2*A
s(13) =< s(11)
s(13) =< s(12)
s(14) =< s(12)

  with precondition: [A>=0,B>=1] 


Closed-form bounds of evalspeedpldi2start(A,B,C,D): 
-------------------------------------
* Chain [22] with precondition: [0>=A+1] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [21] with precondition: [0>=B] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [20] with precondition: [A>=0,B>=1] 
    - Upper bound: 14*A+4 
    - Complexity: n 

### Maximum cost of evalspeedpldi2start(A,B,C,D): nat(A)*6+1+nat(2*A)*4+3 
Asymptotic class: n 
* Total analysis performed in 209 ms.


-- stats
realtime 0:00.32
usertime 0.25
systime 0.00

