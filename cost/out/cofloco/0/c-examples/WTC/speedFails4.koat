MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalspeedFails4bb3in/9,evalspeedFails4bb4in/9,evalspeedFails4bb5in/9,evalspeedFails4bb6in/9]
1. non_recursive  : [evalspeedFails4stop/5]
2. non_recursive  : [evalspeedFails4returnin/5]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [evalspeedFails4bb6in_loop_cont/6]
5. non_recursive  : [evalspeedFails4entryin/5]
6. non_recursive  : [evalspeedFails4start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalspeedFails4bb6in/9
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into evalspeedFails4bb6in_loop_cont/6
5. SCC is partially evaluated into evalspeedFails4entryin/5
6. SCC is partially evaluated into evalspeedFails4start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalspeedFails4bb6in/9 
* CE 7 is refined into CE [10] 
* CE 6 is refined into CE [11] 
* CE 4 is refined into CE [12] 
* CE 5 is refined into CE [13] 


### Cost equations --> "Loop" of evalspeedFails4bb6in/9 
* CEs [12] --> Loop 10 
* CEs [13] --> Loop 11 
* CEs [10] --> Loop 12 
* CEs [11] --> Loop 13 

### Ranking functions of CR evalspeedFails4bb6in(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR evalspeedFails4bb6in(A,B,C,D,E,F,G,H,I) 


### Specialization of cost equations evalspeedFails4bb6in_loop_cont/6 
* CE 9 is refined into CE [14] 
* CE 8 is refined into CE [15] 


### Cost equations --> "Loop" of evalspeedFails4bb6in_loop_cont/6 
* CEs [14] --> Loop 14 
* CEs [15] --> Loop 15 

### Ranking functions of CR evalspeedFails4bb6in_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR evalspeedFails4bb6in_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations evalspeedFails4entryin/5 
* CE 2 is refined into CE [16,17,18,19,20] 
* CE 3 is refined into CE [21,22,23,24,25] 


### Cost equations --> "Loop" of evalspeedFails4entryin/5 
* CEs [19,20] --> Loop 16 
* CEs [24,25] --> Loop 17 
* CEs [16,17,18] --> Loop 18 
* CEs [21,22,23] --> Loop 19 

### Ranking functions of CR evalspeedFails4entryin(A,B,C,D,E) 

#### Partial ranking functions of CR evalspeedFails4entryin(A,B,C,D,E) 


### Specialization of cost equations evalspeedFails4start/5 
* CE 1 is refined into CE [26,27,28,29] 


### Cost equations --> "Loop" of evalspeedFails4start/5 
* CEs [29] --> Loop 20 
* CEs [28] --> Loop 21 
* CEs [27] --> Loop 22 
* CEs [26] --> Loop 23 

### Ranking functions of CR evalspeedFails4start(A,B,C,D,E) 

#### Partial ranking functions of CR evalspeedFails4start(A,B,C,D,E) 


Computing Bounds
=====================================

#### Cost of chains of evalspeedFails4bb6in(A,B,C,D,E,F,G,H,I):
* Chain [[11]]...: 3*it(11)+0
  with precondition: [1>=A,B>=D,A+1>=0,0>=C] 

* Chain [[11],13]: 3*it(11)+1
  with precondition: [A+1=0,E=2,F+1=0,B=G,C=H,B+1=I,0>=C,B>=D] 

* Chain [[11],12]: 3*it(11)+0
  with precondition: [E=3,1>=A,0>=C,A+1>=0,B>=D] 

* Chain [[10]]...: 3*it(10)+0
  with precondition: [1>=A,B>=D,A+1>=0,C>=1] 

* Chain [[10],13]: 3*it(10)+1
  with precondition: [A=1,E=2,F=1,B=G,C=H,B+1=I,C>=1,B>=D] 

* Chain [[10],12]: 3*it(10)+0
  with precondition: [E=3,1>=A,A+1>=0,C>=1,B>=D] 

* Chain [13]: 1
  with precondition: [E=2,H=C,A=F,B=G,D=I,1>=A,A+1>=0,D>=B+1] 

* Chain [12]: 0
  with precondition: [E=3,1>=A,A+1>=0] 


#### Cost of chains of evalspeedFails4bb6in_loop_cont(A,B,C,D,E,F):
* Chain [15]: 1
  with precondition: [A=2] 

* Chain [14]: 0
  with precondition: [A=3] 


#### Cost of chains of evalspeedFails4entryin(A,B,C,D,E):
* Chain [19]: 1*aux(2)+0
  with precondition: [0>=A] 

* Chain [18]: 1*aux(3)+0
  with precondition: [A>=1] 

* Chain [17]...: 1*aux(4)+0
  with precondition: [0>=A,C>=B] 

* Chain [16]...: 1*aux(5)+0
  with precondition: [A>=1,C>=B] 


#### Cost of chains of evalspeedFails4start(A,B,C,D,E):
* Chain [23]: 1*s(11)+1
  with precondition: [0>=A] 

* Chain [22]: 1*s(12)+1
  with precondition: [A>=1] 

* Chain [21]...: 1*s(13)+1
  with precondition: [0>=A,C>=B] 

* Chain [20]...: 1*s(14)+1
  with precondition: [A>=1,C>=B] 


Closed-form bounds of evalspeedFails4start(A,B,C,D,E): 
-------------------------------------
* Chain [23] with precondition: [0>=A] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [22] with precondition: [A>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [21]... with precondition: [0>=A,C>=B] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [20]... with precondition: [A>=1,C>=B] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of evalspeedFails4start(A,B,C,D,E): inf 
Asymptotic class: infinity 
* Total analysis performed in 259 ms.


-- stats
realtime 0:00.32
usertime 0.30
systime 0.00

