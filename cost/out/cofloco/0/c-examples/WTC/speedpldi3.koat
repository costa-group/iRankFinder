WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalspeedpldi3bb2in/9,evalspeedpldi3bb3in/9,evalspeedpldi3bb4in/9,evalspeedpldi3bb5in/9]
1. non_recursive  : [evalspeedpldi3stop/5]
2. non_recursive  : [evalspeedpldi3returnin/5]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [evalspeedpldi3bb5in_loop_cont/6]
5. non_recursive  : [evalspeedpldi3entryin/5]
6. non_recursive  : [evalspeedpldi3start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalspeedpldi3bb5in/9
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into evalspeedpldi3bb5in_loop_cont/6
5. SCC is partially evaluated into evalspeedpldi3entryin/5
6. SCC is partially evaluated into evalspeedpldi3start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalspeedpldi3bb5in/9 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 5 is refined into CE [13] 
* CE 6 is refined into CE [14] 


### Cost equations --> "Loop" of evalspeedpldi3bb5in/9 
* CEs [13] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [11] --> Loop 13 
* CEs [12] --> Loop 14 

### Ranking functions of CR evalspeedpldi3bb5in(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR evalspeedpldi3bb5in(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [11,12]:
  - RF of loop [11:1]:
    A-C depends on loops [12:1] 
    B-C-1 depends on loops [12:1] 
  - RF of loop [12:1]:
    -A+C+1 depends on loops [11:1] 
    B-D
    C depends on loops [11:1] 


### Specialization of cost equations evalspeedpldi3bb5in_loop_cont/6 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


### Cost equations --> "Loop" of evalspeedpldi3bb5in_loop_cont/6 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

### Ranking functions of CR evalspeedpldi3bb5in_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR evalspeedpldi3bb5in_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations evalspeedpldi3entryin/5 
* CE 3 is refined into CE [17] 
* CE 4 is refined into CE [18,19] 
* CE 2 is refined into CE [20] 


### Cost equations --> "Loop" of evalspeedpldi3entryin/5 
* CEs [17] --> Loop 17 
* CEs [18,19] --> Loop 18 
* CEs [20] --> Loop 19 

### Ranking functions of CR evalspeedpldi3entryin(A,B,C,D,E) 

#### Partial ranking functions of CR evalspeedpldi3entryin(A,B,C,D,E) 


### Specialization of cost equations evalspeedpldi3start/5 
* CE 1 is refined into CE [21,22,23] 


### Cost equations --> "Loop" of evalspeedpldi3start/5 
* CEs [23] --> Loop 20 
* CEs [22] --> Loop 21 
* CEs [21] --> Loop 22 

### Ranking functions of CR evalspeedpldi3start(A,B,C,D,E) 

#### Partial ranking functions of CR evalspeedpldi3start(A,B,C,D,E) 


Computing Bounds
=====================================

#### Cost of chains of evalspeedpldi3bb5in(A,B,C,D,E,F,G,H,I):
* Chain [[11,12],14]: 3*it(11)+3*it(12)+1
  Such that:aux(4) =< B-C
it(12) =< -D+G
aux(12) =< G
aux(3) =< it(12)*aux(12)
it(11) =< aux(3)+aux(4)

  with precondition: [E=2,H=0,A=F,B=G,B=I,A>=1,C>=0,D>=0,B>=A+1,B>=D+1] 

* Chain [[11,12],13]: 3*it(11)+3*it(12)+0
  Such that:aux(12) =< B
aux(4) =< B-C
it(12) =< B-D
aux(3) =< it(12)*aux(12)
it(11) =< aux(3)+aux(4)

  with precondition: [E=3,A>=1,C>=0,D>=0,B>=A+1,B>=D+1] 

* Chain [13]: 0
  with precondition: [E=3,A>=1,C>=0,D>=0,B>=A+1] 


#### Cost of chains of evalspeedpldi3bb5in_loop_cont(A,B,C,D,E,F):
* Chain [16]: 1
  with precondition: [A=2] 

* Chain [15]: 0
  with precondition: [A=3] 


#### Cost of chains of evalspeedpldi3entryin(A,B,C,D,E):
* Chain [19]: 2
  with precondition: [0>=A] 

* Chain [18]: 6*s(7)+6*s(10)+3
  Such that:aux(15) =< B
s(7) =< aux(15)
s(9) =< s(7)*aux(15)
s(10) =< s(9)+aux(15)

  with precondition: [A>=1,B>=A+1] 

* Chain [17]: 2
  with precondition: [A>=B] 


#### Cost of chains of evalspeedpldi3start(A,B,C,D,E):
* Chain [22]: 3
  with precondition: [0>=A] 

* Chain [21]: 6*s(17)+6*s(19)+4
  Such that:s(16) =< B
s(17) =< s(16)
s(18) =< s(17)*s(16)
s(19) =< s(18)+s(16)

  with precondition: [A>=1,B>=A+1] 

* Chain [20]: 3
  with precondition: [A>=B] 


Closed-form bounds of evalspeedpldi3start(A,B,C,D,E): 
-------------------------------------
* Chain [22] with precondition: [0>=A] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [21] with precondition: [A>=1,B>=A+1] 
    - Upper bound: 12*B+4+6*B*B 
    - Complexity: n^2 
* Chain [20] with precondition: [A>=B] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of evalspeedpldi3start(A,B,C,D,E): nat(B)*12+1+nat(B)*6*nat(B)+3 
Asymptotic class: n^2 
* Total analysis performed in 294 ms.


-- stats
realtime 0:00.39
usertime 0.35
systime 0.00

