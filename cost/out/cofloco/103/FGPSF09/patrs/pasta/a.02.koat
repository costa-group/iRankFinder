MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval___3/5]
1. non_recursive  : [exit_location/1]
2. recursive  : [n_eval___2/5]
3. recursive  : [n_eval___1/3,n_eval___2_loop_cont/4]
4. non_recursive  : [n_eval___1_loop_cont/2]
5. non_recursive  : [n_eval___4/3]
6. non_recursive  : [n_eval___3_loop_cont/4]
7. non_recursive  : [n_eval___5/3]
8. non_recursive  : [n_start/3]
9. non_recursive  : [pyRinit/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval___3/5
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into n_eval___2/5
3. SCC is partially evaluated into n_eval___1/3
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into n_eval___4/3
6. SCC is partially evaluated into n_eval___3_loop_cont/4
7. SCC is partially evaluated into n_eval___5/3
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into pyRinit/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval___3/5 
* CE 5 is refined into CE [19] 
* CE 6 is refined into CE [20] 
* CE 4 is refined into CE [21] 


### Cost equations --> "Loop" of n_eval___3/5 
* CEs [21] --> Loop 14 
* CEs [19] --> Loop 15 
* CEs [20] --> Loop 16 

### Ranking functions of CR n_eval___3(A,B,C,D,E) 
* RF of phase [14]: [-2*A+2*B-1,2*A+2*B-3,2*B-2]

#### Partial ranking functions of CR n_eval___3(A,B,C,D,E) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    -2*A+2*B-1
    2*A+2*B-3
    2*B-2


### Specialization of cost equations n_eval___2/5 
* CE 14 is refined into CE [22] 
* CE 12 is refined into CE [23] 
* CE 13 is refined into CE [24] 


### Cost equations --> "Loop" of n_eval___2/5 
* CEs [24] --> Loop 17 
* CEs [22] --> Loop 18 
* CEs [23] --> Loop 19 

### Ranking functions of CR n_eval___2(A,B,C,D,E) 

#### Partial ranking functions of CR n_eval___2(A,B,C,D,E) 


### Specialization of cost equations n_eval___1/3 
* CE 15 is refined into CE [25,26] 
* CE 18 is refined into CE [27] 
* CE 16 is refined into CE [28,29] 
* CE 17 is refined into CE [30] 


### Cost equations --> "Loop" of n_eval___1/3 
* CEs [28] --> Loop 20 
* CEs [30] --> Loop 21 
* CEs [29] --> Loop 22 
* CEs [25,27] --> Loop 23 
* CEs [26] --> Loop 24 

### Ranking functions of CR n_eval___1(A,B,C) 

#### Partial ranking functions of CR n_eval___1(A,B,C) 
* Partial RF of phase [20,21,22]:
  - RF of loop [20:1]:
    -A+2*B-6 depends on loops [22:1] 
    2*B-9 depends on loops [22:1] 
  - RF of loop [21:1]:
    -2*A+2*B-1 depends on loops [20:1,22:1] 
    2*A+2*B-13 depends on loops [20:1,22:1] 
    2*B-7 depends on loops [22:1] 


### Specialization of cost equations n_eval___4/3 
* CE 9 is refined into CE [31,32] 
* CE 10 is refined into CE [33,34,35,36,37,38] 
* CE 11 is refined into CE [39,40,41] 


### Cost equations --> "Loop" of n_eval___4/3 
* CEs [32,34,35,36,37,38,40,41] --> Loop 25 
* CEs [31,33,39] --> Loop 26 

### Ranking functions of CR n_eval___4(A,B,C) 

#### Partial ranking functions of CR n_eval___4(A,B,C) 


### Specialization of cost equations n_eval___3_loop_cont/4 
* CE 7 is refined into CE [42,43] 
* CE 8 is refined into CE [44] 


### Cost equations --> "Loop" of n_eval___3_loop_cont/4 
* CEs [42] --> Loop 27 
* CEs [44] --> Loop 28 
* CEs [43] --> Loop 29 

### Ranking functions of CR n_eval___3_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR n_eval___3_loop_cont(A,B,C,D) 


### Specialization of cost equations n_eval___5/3 
* CE 2 is refined into CE [45,46,47,48,49] 
* CE 3 is refined into CE [50,51] 


### Cost equations --> "Loop" of n_eval___5/3 
* CEs [47,49,51] --> Loop 30 
* CEs [45,46,48,50] --> Loop 31 

### Ranking functions of CR n_eval___5(A,B,C) 

#### Partial ranking functions of CR n_eval___5(A,B,C) 


### Specialization of cost equations pyRinit/3 
* CE 1 is refined into CE [52,53] 


### Cost equations --> "Loop" of pyRinit/3 
* CEs [53] --> Loop 32 
* CEs [52] --> Loop 33 

### Ranking functions of CR pyRinit(A,B,C) 

#### Partial ranking functions of CR pyRinit(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of n_eval___3(A,B,C,D,E):
* Chain [[14],16]: 1*it(14)+0
  Such that:it(14) =< 2*B

  with precondition: [C=3,A>=0,B>=A+1,A+B>=2] 

* Chain [[14],15]: 1*it(14)+1
  Such that:it(14) =< 2*B-2*E

  with precondition: [C=4,A>=0,E>=A+1,A+E+2>=2*D,A+B>=2*E,3*D>=A+E+4] 

* Chain [16]: 0
  with precondition: [C=3,A>=0,B>=1,3*B>=2*A+2] 

* Chain [15]: 1
  with precondition: [C=4,B=E,A>=0,B>=A+1,A+B+2>=2*D,3*D>=A+B+4] 


#### Cost of chains of n_eval___2(A,B,C,D,E):
* Chain [[17]]...: 1*it(17)+0
  with precondition: [9*A>=4*B+16,B>=A+1,C>=2,3>=C] 

* Chain [[17],19]: 1*it(17)+1
  with precondition: [C=2,9*A>=4*B+16,B>=A+1,B>=D+1,B+D>=2*E,3*E>=B+D+1] 

* Chain [[17],18]: 1*it(17)+0
  with precondition: [C=3,9*A>=4*B+16,B>=A+1] 

* Chain [19]: 1
  with precondition: [C=2,A=D,9*A>=4*B+16,B>=A+1,A+B>=2*E,3*E>=A+B+1] 

* Chain [18]: 0
  with precondition: [C=3,2*B>=7,9*A>=4*B+16,2*B+1>=2*A] 


#### Cost of chains of n_eval___1(A,B,C):
* Chain [[20,21,22]]...: 5*it(20)+0
  with precondition: [2*A>=B+2,B>=A+1,C=3] 

* Chain [[20,21,22],24]...: 6*it(20)+1
  with precondition: [C=3,B>=A+1,2*B>=A+7,2*A>=B+2] 

* Chain [[20,21,22],23]: 6*aux(5)+0
  with precondition: [C=3,B>=A+1,2*A>=B+2] 

* Chain [24]...: 1*s(10)+1
  with precondition: [C=3,B>=A+1,2*B>=A+7,2*A>=B+2] 

* Chain [23]: 1*aux(5)+0
  with precondition: [C=3] 


#### Cost of chains of n_eval___4(A,B,C):
* Chain [26]: 1*aux(8)+0
  with precondition: [B>=A+1,3*A>=B+4] 

* Chain [25]...: 1*aux(9)+0
  with precondition: [B>=A+1,2*B>=A+7,3*A>=B+4] 


#### Cost of chains of n_eval___3_loop_cont(A,B,C,D):
* Chain [29]...: 1*s(33)+0
  with precondition: [A=4,C>=B+1,2*C>=B+7,3*B>=C+4] 

* Chain [28]: 0
  with precondition: [A=3] 

* Chain [27]: 1*s(34)+0
  with precondition: [A=4,C>=B+1,3*B>=C+4] 


#### Cost of chains of n_eval___5(A,B,C):
* Chain [31]: 1*s(35)+3*s(36)+1*s(37)+2
  Such that:s(35) =< A+B
s(37) =< B

  with precondition: [A>=0,B>=A+1,A+B>=2] 

* Chain [30]...: 3*s(40)+1*s(41)+2
  Such that:s(41) =< -A+B

  with precondition: [A>=0,B>=A+1,5*B>=A+25] 


#### Cost of chains of pyRinit(A,B,C):
* Chain [33]: 1*s(44)+1*s(45)+3*s(46)+4
  Such that:s(44) =< A+B
s(45) =< B

  with precondition: [A>=0,B>=A+1,A+B>=2] 

* Chain [32]...: 1*s(47)+3*s(48)+4
  Such that:s(47) =< -A+B

  with precondition: [A>=0,B>=A+1,5*B>=A+25] 


Closed-form bounds of pyRinit(A,B,C): 
-------------------------------------
* Chain [33] with precondition: [A>=0,B>=A+1,A+B>=2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [32]... with precondition: [A>=0,B>=A+1,5*B>=A+25] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of pyRinit(A,B,C): inf 
Asymptotic class: infinity 
* Total analysis performed in 393 ms.


-- stats
realtime 0:00.46
usertime 0.43
systime 0.01

