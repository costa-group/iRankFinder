WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval___2/5]
1. non_recursive  : [exit_location/1]
2. recursive  : [n_eval___1/3,n_eval___3/3]
3. non_recursive  : [n_eval___3_loop_cont/2]
4. non_recursive  : [n_eval___2_loop_cont/4]
5. recursive  : [n_eval___4/5]
6. non_recursive  : [n_eval___4_loop_cont/4]
7. non_recursive  : [n_eval___5/3]
8. non_recursive  : [n_start/3]
9. non_recursive  : [pyRinit/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval___2/5
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into n_eval___3/3
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_eval___2_loop_cont/4
5. SCC is partially evaluated into n_eval___4/5
6. SCC is partially evaluated into n_eval___4_loop_cont/4
7. SCC is partially evaluated into n_eval___5/3
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into pyRinit/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval___2/5 
* CE 6 is refined into CE [17] 
* CE 7 is refined into CE [18] 
* CE 5 is refined into CE [19] 


### Cost equations --> "Loop" of n_eval___2/5 
* CEs [19] --> Loop 17 
* CEs [17] --> Loop 18 
* CEs [18] --> Loop 19 

### Ranking functions of CR n_eval___2(A,B,C,D,E) 
* RF of phase [17]: [-A+B,A+B,B]

#### Partial ranking functions of CR n_eval___2(A,B,C,D,E) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    -A+B
    A+B
    B


### Specialization of cost equations n_eval___3/3 
* CE 11 is refined into CE [20] 
* CE 10 is refined into CE [21] 


### Cost equations --> "Loop" of n_eval___3/3 
* CEs [21] --> Loop 20 
* CEs [20] --> Loop 21 

### Ranking functions of CR n_eval___3(A,B,C) 
* RF of phase [20]: [A+1,B]

#### Partial ranking functions of CR n_eval___3(A,B,C) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    A+1
    B


### Specialization of cost equations n_eval___2_loop_cont/4 
* CE 8 is refined into CE [22] 
* CE 9 is refined into CE [23] 


### Cost equations --> "Loop" of n_eval___2_loop_cont/4 
* CEs [22] --> Loop 22 
* CEs [23] --> Loop 23 

### Ranking functions of CR n_eval___2_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR n_eval___2_loop_cont(A,B,C,D) 


### Specialization of cost equations n_eval___4/5 
* CE 12 is refined into CE [24] 
* CE 14 is refined into CE [25] 
* CE 13 is refined into CE [26] 


### Cost equations --> "Loop" of n_eval___4/5 
* CEs [26] --> Loop 24 
* CEs [24] --> Loop 25 
* CEs [25] --> Loop 26 

### Ranking functions of CR n_eval___4(A,B,C,D,E) 
* RF of phase [24]: [A,A-B,A+B]

#### Partial ranking functions of CR n_eval___4(A,B,C,D,E) 
* Partial RF of phase [24]:
  - RF of loop [24:1]:
    A
    A-B
    A+B


### Specialization of cost equations n_eval___4_loop_cont/4 
* CE 15 is refined into CE [27] 
* CE 16 is refined into CE [28] 


### Cost equations --> "Loop" of n_eval___4_loop_cont/4 
* CEs [27] --> Loop 27 
* CEs [28] --> Loop 28 

### Ranking functions of CR n_eval___4_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR n_eval___4_loop_cont(A,B,C,D) 


### Specialization of cost equations n_eval___5/3 
* CE 4 is refined into CE [29,30,31] 
* CE 2 is refined into CE [32,33,34] 
* CE 3 is refined into CE [35] 


### Cost equations --> "Loop" of n_eval___5/3 
* CEs [31] --> Loop 29 
* CEs [34] --> Loop 30 
* CEs [29,30] --> Loop 31 
* CEs [35] --> Loop 32 
* CEs [32,33] --> Loop 33 

### Ranking functions of CR n_eval___5(A,B,C) 

#### Partial ranking functions of CR n_eval___5(A,B,C) 


### Specialization of cost equations pyRinit/3 
* CE 1 is refined into CE [36,37,38] 


### Cost equations --> "Loop" of pyRinit/3 
* CEs [38] --> Loop 34 
* CEs [37] --> Loop 35 
* CEs [36] --> Loop 36 

### Ranking functions of CR pyRinit(A,B,C) 

#### Partial ranking functions of CR pyRinit(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of n_eval___2(A,B,C,D,E):
* Chain [[17],19]: 1*it(17)+0
  Such that:it(17) =< -A+B

  with precondition: [C=2,B>=A+1,A+B>=1] 

* Chain [[17],18]: 1*it(17)+1
  Such that:it(17) =< B-E

  with precondition: [C=3,A=D+1,A=E,2*A>=1,B>=A+1] 

* Chain [19]: 0
  with precondition: [C=2,B>=A,A+B>=0] 

* Chain [18]: 1
  with precondition: [C=3,B=A,B=D+1,B=E,2*B>=1] 


#### Cost of chains of n_eval___3(A,B,C):
* Chain [[20],21]: 2*it(20)+0
  Such that:it(20) =< A+1/2

  with precondition: [C=2,A+1=B,2*A>=1] 

* Chain [21]: 0
  with precondition: [C=2] 


#### Cost of chains of n_eval___2_loop_cont(A,B,C,D):
* Chain [23]: 0
  with precondition: [A=2] 

* Chain [22]: 2*s(3)+0
  Such that:s(3) =< B+1/2

  with precondition: [A=3] 


#### Cost of chains of n_eval___4(A,B,C,D,E):
* Chain [[24],26]: 1*it(24)+0
  Such that:it(24) =< A-B

  with precondition: [C=2,A>=B+1,A+B>=1] 

* Chain [[24],25]: 1*it(24)+1
  Such that:it(24) =< A-E

  with precondition: [C=3,B=D+1,B=E,2*B>=1,A>=B+1] 

* Chain [26]: 0
  with precondition: [C=2,A>=B,A+B>=0] 

* Chain [25]: 1
  with precondition: [C=3,B=A,B=D+1,B=E,2*B>=1] 


#### Cost of chains of n_eval___4_loop_cont(A,B,C,D):
* Chain [28]: 0
  with precondition: [A=2] 

* Chain [27]: 2*s(5)+0
  Such that:s(5) =< B+1/2

  with precondition: [A=3] 


#### Cost of chains of n_eval___5(A,B,C):
* Chain [33]: 1*s(6)+2*s(7)+2
  Such that:s(6) =< -A+B
s(7) =< A

  with precondition: [B>=A+1,A+B>=1] 

* Chain [32]: 2*s(8)+1
  Such that:s(8) =< A

  with precondition: [A=B,2*A>=1] 

* Chain [31]: 1*s(9)+2*s(10)+2
  Such that:s(10) =< A
s(9) =< A-B

  with precondition: [A>=B+1,A+B>=1] 

* Chain [30]: 1*s(11)+2*s(12)+2
  Such that:s(11) =< -A+B
s(12) =< A

  with precondition: [2*A>=1,B>=A+2] 

* Chain [29]: 1*s(13)+2*s(14)+2
  Such that:s(13) =< A-B
s(14) =< B

  with precondition: [2*B>=1,A>=B+2] 


#### Cost of chains of pyRinit(A,B,C):
* Chain [36]: 2*s(23)+3
  Such that:s(23) =< B

  with precondition: [A=B,2*A>=1] 

* Chain [35]: 2*s(26)+4*s(27)+4
  Such that:s(24) =< -A+B
s(25) =< A
s(26) =< s(24)
s(27) =< s(25)

  with precondition: [B>=A+1,A+B>=1] 

* Chain [34]: 2*s(28)+2*s(29)+2*s(31)+4
  Such that:s(28) =< A
s(30) =< A-B
s(29) =< B
s(31) =< s(30)

  with precondition: [A>=B+1,A+B>=1] 


Closed-form bounds of pyRinit(A,B,C): 
-------------------------------------
* Chain [36] with precondition: [A=B,2*A>=1] 
    - Upper bound: 2*B+3 
    - Complexity: n 
* Chain [35] with precondition: [B>=A+1,A+B>=1] 
    - Upper bound: nat(A)*4+4+ (-2*A+2*B) 
    - Complexity: n 
* Chain [34] with precondition: [A>=B+1,A+B>=1] 
    - Upper bound: 2*A-2*B+ (2*A+4+nat(B)*2) 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C): max([nat(B)*2,nat(A)*2+1+max([nat(-A+B)*2+nat(A)*2,nat(A-B)*2+nat(B)*2])])+3 
Asymptotic class: n 
* Total analysis performed in 209 ms.


-- stats
realtime 0:00.28
usertime 0.24
systime 0.00

