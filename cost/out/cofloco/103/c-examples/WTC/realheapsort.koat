WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_evalrealheapsortbb3in___29/9,n_evalrealheapsortbb4in___27/9]
1. recursive  : [n_evalrealheapsortbb3in___29_loop_cont/10,n_evalrealheapsortbb3in___31/9,n_evalrealheapsortbb4in___30/9,n_evalrealheapsortbb6in___26/9,n_evalrealheapsortbb6in___28/9]
2. non_recursive  : [exit_location/1]
3. recursive  : [n_evalrealheapsortbb10in___6/9,n_evalrealheapsortbb13in___3/9,n_evalrealheapsortbb13in___4/9,n_evalrealheapsortbb16in___8/9,n_evalrealheapsortbb9in___7/9]
4. recursive  : [n_evalrealheapsortbb10in___12/9,n_evalrealheapsortbb10in___22/9,n_evalrealheapsortbb13in___10/9,n_evalrealheapsortbb13in___11/9,n_evalrealheapsortbb13in___19/9,n_evalrealheapsortbb13in___20/9,n_evalrealheapsortbb13in___21/9,n_evalrealheapsortbb13in___5/9,n_evalrealheapsortbb13in___9/9,n_evalrealheapsortbb16in___1/9,n_evalrealheapsortbb16in___14/9,n_evalrealheapsortbb16in___17/9,n_evalrealheapsortbb16in___18/9,n_evalrealheapsortbb16in___2/9,n_evalrealheapsortbb16in___8_loop_cont/10,n_evalrealheapsortbb18in___16/9,n_evalrealheapsortbb9in___15/9,n_evalrealheapsortbb9in___23/9]
5. non_recursive  : [n_evalrealheapsortstop___32/5]
6. non_recursive  : [n_evalrealheapsortbb18in___13/5]
7. non_recursive  : [n_evalrealheapsortbb9in___23_loop_cont/6]
8. non_recursive  : [n_evalrealheapsortbb16in___24/5]
9. non_recursive  : [n_evalrealheapsortbb18in___25/5]
10. non_recursive  : [n_evalrealheapsortbb3in___31_loop_cont/6]
11. non_recursive  : [n_evalrealheapsortbb6in___33/5]
12. non_recursive  : [n_evalrealheapsortentryin___34/5]
13. non_recursive  : [n_evalrealheapsortstart/5]
14. non_recursive  : [pyRinit/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_evalrealheapsortbb3in___29/9
1. SCC is partially evaluated into n_evalrealheapsortbb3in___31/9
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_evalrealheapsortbb16in___8/9
4. SCC is partially evaluated into n_evalrealheapsortbb9in___23/9
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into n_evalrealheapsortbb9in___23_loop_cont/6
8. SCC is partially evaluated into n_evalrealheapsortbb16in___24/5
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into n_evalrealheapsortbb3in___31_loop_cont/6
11. SCC is partially evaluated into n_evalrealheapsortbb6in___33/5
12. SCC is partially evaluated into n_evalrealheapsortentryin___34/5
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into pyRinit/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalrealheapsortbb3in___29/9 
* CE 15 is refined into CE [63] 
* CE 18 is refined into CE [64] 
* CE 17 is refined into CE [65] 
* CE 16 is refined into CE [66] 


### Cost equations --> "Loop" of n_evalrealheapsortbb3in___29/9 
* CEs [66] --> Loop 36 
* CEs [63] --> Loop 37 
* CEs [64] --> Loop 38 
* CEs [65] --> Loop 39 

### Ranking functions of CR n_evalrealheapsortbb3in___29(A,B,C,D,E,F,G,H,I) 
* RF of phase [36]: [C]

#### Partial ranking functions of CR n_evalrealheapsortbb3in___29(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [36]:
  - RF of loop [36:1]:
    C


### Specialization of cost equations n_evalrealheapsortbb3in___31/9 
* CE 6 is refined into CE [67,68] 
* CE 8 is refined into CE [69,70] 
* CE 10 is refined into CE [71] 
* CE 5 is refined into CE [72] 
* CE 12 is refined into CE [73] 
* CE 7 is refined into CE [74,75] 
* CE 9 is refined into CE [76,77] 
* CE 11 is refined into CE [78] 


### Cost equations --> "Loop" of n_evalrealheapsortbb3in___31/9 
* CEs [74,75,76,77,78] --> Loop 40 
* CEs [69] --> Loop 41 
* CEs [70] --> Loop 42 
* CEs [68] --> Loop 43 
* CEs [71] --> Loop 44 
* CEs [72,73] --> Loop 45 
* CEs [67] --> Loop 46 

### Ranking functions of CR n_evalrealheapsortbb3in___31(A,B,C,D,E,F,G,H,I) 
* RF of phase [40]: [A-B-1,A-C-1]

#### Partial ranking functions of CR n_evalrealheapsortbb3in___31(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [40]:
  - RF of loop [40:1]:
    A-B-1
    A-C-1


### Specialization of cost equations n_evalrealheapsortbb16in___8/9 
* CE 60 is refined into CE [79] 
* CE 61 is refined into CE [80] 
* CE 56 is refined into CE [81] 
* CE 58 is refined into CE [82] 
* CE 62 is refined into CE [83] 
* CE 59 is refined into CE [84] 
* CE 57 is refined into CE [85] 


### Cost equations --> "Loop" of n_evalrealheapsortbb16in___8/9 
* CEs [84] --> Loop 47 
* CEs [85] --> Loop 48 
* CEs [79] --> Loop 49 
* CEs [80] --> Loop 50 
* CEs [81] --> Loop 51 
* CEs [82] --> Loop 52 
* CEs [83] --> Loop 53 

### Ranking functions of CR n_evalrealheapsortbb16in___8(A,B,C,D,E,F,G,H,I) 
* RF of phase [47,48]: [A/8-B/8-C/4-3/8,A/8-C/4-3/8]

#### Partial ranking functions of CR n_evalrealheapsortbb16in___8(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [47,48]:
  - RF of loop [47:1]:
    A/5-B/5-2/5*C-3/5
    A/5-B/5-2/5*D-3/5
    A/5-2/5*C-3/5
    A/5-2/5*D-3/5
  - RF of loop [48:1]:
    A/8-B/8-C/4-3/8
    A/8-B/8-D/4-3/8
    A/8-C/4-3/8
    A/8-D/4-3/8


### Specialization of cost equations n_evalrealheapsortbb9in___23/9 
* CE 25 is discarded (unfeasible) 
* CE 26 is discarded (unfeasible) 
* CE 27 is discarded (unfeasible) 
* CE 28 is discarded (unfeasible) 
* CE 29 is discarded (unfeasible) 
* CE 30 is discarded (unfeasible) 
* CE 31 is discarded (unfeasible) 
* CE 32 is discarded (unfeasible) 
* CE 20 is refined into CE [86] 
* CE 21 is refined into CE [87] 
* CE 22 is refined into CE [88] 
* CE 23 is refined into CE [89] 
* CE 24 is refined into CE [90] 
* CE 53 is refined into CE [91] 
* CE 41 is refined into CE [92,93] 
* CE 42 is refined into CE [94,95] 
* CE 43 is refined into CE [96,97] 
* CE 44 is refined into CE [98,99] 
* CE 45 is refined into CE [100] 
* CE 47 is refined into CE [101] 
* CE 51 is refined into CE [102] 
* CE 46 is refined into CE [103] 
* CE 33 is refined into CE [104,105] 
* CE 34 is refined into CE [106,107] 
* CE 35 is refined into CE [108,109] 
* CE 36 is refined into CE [110,111] 
* CE 37 is refined into CE [112,113,114,115] 
* CE 38 is refined into CE [116,117,118,119] 
* CE 39 is refined into CE [120,121,122,123] 
* CE 40 is refined into CE [124,125,126,127] 
* CE 48 is refined into CE [128] 
* CE 52 is refined into CE [129] 
* CE 49 is refined into CE [130] 
* CE 50 is refined into CE [131] 


### Cost equations --> "Loop" of n_evalrealheapsortbb9in___23/9 
* CEs [115,119,123,127] --> Loop 54 
* CEs [114,118,122,126] --> Loop 55 
* CEs [112] --> Loop 56 
* CEs [113] --> Loop 57 
* CEs [93] --> Loop 58 
* CEs [120] --> Loop 59 
* CEs [121] --> Loop 60 
* CEs [97] --> Loop 61 
* CEs [116] --> Loop 62 
* CEs [117] --> Loop 63 
* CEs [92,94,95,96,98,105,107,109,111] --> Loop 64 
* CEs [124] --> Loop 65 
* CEs [125] --> Loop 66 
* CEs [99] --> Loop 67 
* CEs [100,104] --> Loop 68 
* CEs [101,108] --> Loop 69 
* CEs [102] --> Loop 70 
* CEs [103,106] --> Loop 71 
* CEs [110,128] --> Loop 72 
* CEs [129] --> Loop 73 
* CEs [130] --> Loop 74 
* CEs [131] --> Loop 75 
* CEs [86] --> Loop 76 
* CEs [87,88,89,90,91] --> Loop 77 

### Ranking functions of CR n_evalrealheapsortbb9in___23(A,B,C,D,E,F,G,H,I) 
* RF of phase [54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75]: [A-B-3]

#### Partial ranking functions of CR n_evalrealheapsortbb9in___23(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75]:
  - RF of loop [54:1,55:1]:
    A-B-17
  - RF of loop [56:1,57:1]:
    A-B-15
  - RF of loop [58:1]:
    A-B-14
  - RF of loop [59:1,60:1]:
    A-B-13
  - RF of loop [61:1]:
    A-B-12
  - RF of loop [62:1,63:1]:
    A-B-11
  - RF of loop [64:1,65:1,66:1]:
    A-B-9
  - RF of loop [67:1]:
    A-B-8
  - RF of loop [68:1,69:1]:
    A-B-7
  - RF of loop [70:1]:
    A-B-6
  - RF of loop [71:1,72:1]:
    A-B-5
  - RF of loop [73:1]:
    A-B-4
  - RF of loop [74:1,75:1]:
    A-B-3


### Specialization of cost equations n_evalrealheapsortbb9in___23_loop_cont/6 
* CE 54 is refined into CE [132] 
* CE 55 is refined into CE [133] 


### Cost equations --> "Loop" of n_evalrealheapsortbb9in___23_loop_cont/6 
* CEs [132] --> Loop 78 
* CEs [133] --> Loop 79 

### Ranking functions of CR n_evalrealheapsortbb9in___23_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalrealheapsortbb9in___23_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations n_evalrealheapsortbb16in___24/5 
* CE 19 is refined into CE [134,135,136] 


### Cost equations --> "Loop" of n_evalrealheapsortbb16in___24/5 
* CEs [134,135,136] --> Loop 80 

### Ranking functions of CR n_evalrealheapsortbb16in___24(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalrealheapsortbb16in___24(A,B,C,D,E) 


### Specialization of cost equations n_evalrealheapsortbb3in___31_loop_cont/6 
* CE 14 is refined into CE [137] 
* CE 13 is refined into CE [138] 


### Cost equations --> "Loop" of n_evalrealheapsortbb3in___31_loop_cont/6 
* CEs [137] --> Loop 81 
* CEs [138] --> Loop 82 

### Ranking functions of CR n_evalrealheapsortbb3in___31_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalrealheapsortbb3in___31_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations n_evalrealheapsortbb6in___33/5 
* CE 4 is refined into CE [139,140,141,142,143,144] 


### Cost equations --> "Loop" of n_evalrealheapsortbb6in___33/5 
* CEs [139,140,141,142,143,144] --> Loop 83 

### Ranking functions of CR n_evalrealheapsortbb6in___33(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalrealheapsortbb6in___33(A,B,C,D,E) 


### Specialization of cost equations n_evalrealheapsortentryin___34/5 
* CE 2 is refined into CE [145] 
* CE 3 is refined into CE [146] 


### Cost equations --> "Loop" of n_evalrealheapsortentryin___34/5 
* CEs [145] --> Loop 84 
* CEs [146] --> Loop 85 

### Ranking functions of CR n_evalrealheapsortentryin___34(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalrealheapsortentryin___34(A,B,C,D,E) 


### Specialization of cost equations pyRinit/5 
* CE 1 is refined into CE [147,148] 


### Cost equations --> "Loop" of pyRinit/5 
* CEs [148] --> Loop 86 
* CEs [147] --> Loop 87 

### Ranking functions of CR pyRinit(A,B,C,D,E) 

#### Partial ranking functions of CR pyRinit(A,B,C,D,E) 


Computing Bounds
=====================================

#### Cost of chains of n_evalrealheapsortbb3in___29(A,B,C,D,E,F,G,H,I):
* Chain [[36],39]: 2*it(36)+1
  Such that:it(36) =< C

  with precondition: [E=2,A=F,B+1=G,D=I,0>=H,C>=1,2*H+1>=0,B>=2*C+1,A>=B+1] 

* Chain [[36],38]: 2*it(36)+0
  Such that:it(36) =< C

  with precondition: [E=3,C>=1,B>=2*C+1,A>=B+1] 

* Chain [[36],37]: 2*it(36)+2
  Such that:it(36) =< C-H

  with precondition: [E=4,A=F,B+1=G,D=I,H>=1,B>=2*C+1,C>=2*H+1,A>=B+1] 

* Chain [39]: 1
  with precondition: [E=2,I=D,A=F,B+1=G,C=H,0>=C,A>=3,B>=1,2*C+1>=0,A>=B+1,2*A+2*C>=B+4] 

* Chain [38]: 0
  with precondition: [E=3,A>=3,B>=1,2*C+1>=0,B>=2*C+1,A>=B+1,2*A+2*C>=B+4] 

* Chain [37]: 2
  with precondition: [E=4,I=D,A=F,B+1=G,C=H,C>=1,B>=2*C+1,A>=B+1] 


#### Cost of chains of n_evalrealheapsortbb3in___31(A,B,C,D,E,F,G,H,I):
* Chain [[40],46]: 5*it(40)+4*s(6)+4
  Such that:it(40) =< 1
aux(2) =< 3/2
s(7) =< it(40)*aux(2)
s(6) =< s(7)

  with precondition: [A=3,B=1,C=1,E=8,F=3,G=0,H=0,D=I] 

* Chain [[40],45]: 5*it(40)+4*s(6)+2*s(8)+2
  Such that:it(40) =< A-C
aux(3) =< A/2
s(8) =< aux(3)
s(7) =< it(40)*aux(3)
s(6) =< s(7)

  with precondition: [E=3,B=C,B>=1,A>=B+2] 

* Chain [[40],44]: 5*it(40)+4*s(6)+3
  Such that:it(40) =< -B+H
aux(2) =< H/2+1/2
s(7) =< it(40)*aux(2)
s(6) =< s(7)

  with precondition: [E=8,G=0,B=C,A=F,A=H+1,D=I,B>=1,A>=B+2] 

* Chain [[40],43]: 5*it(40)+4*s(6)+2*s(9)+4
  Such that:it(40) =< -B+F
aux(4) =< F/2
s(9) =< aux(4)
s(7) =< it(40)*aux(4)
s(6) =< s(7)

  with precondition: [E=8,G=0,B=C,A=F,D=I,0>=H,A>=4,B>=1,2*H+1>=0,A>=B+2] 

* Chain [[40],42]: 5*it(40)+4*s(6)+2*s(10)+5
  Such that:it(40) =< -B+F
aux(5) =< F/2
s(10) =< aux(5)
s(7) =< it(40)*aux(5)
s(6) =< s(7)

  with precondition: [E=8,G=0,B=C,A=F,D=I,B>=1,H>=1,A>=4*H+4,A>=B+2] 

* Chain [[40],41]: 5*it(40)+4*s(6)+5
  Such that:it(40) =< -B+F
aux(2) =< F/2
s(7) =< it(40)*aux(2)
s(6) =< s(7)

  with precondition: [E=8,G=0,B=C,A=F,D=I,B>=1,H>=1,A>=2*H+2,2*H+3>=A,A>=B+2] 

* Chain [45]: 2*s(8)+2
  Such that:s(8) =< B/2

  with precondition: [E=3,C=B,A>=3,C>=1,A>=C+1] 


#### Cost of chains of n_evalrealheapsortbb16in___8(A,B,C,D,E,F,G,H,I):
* Chain [[47,48],53]: 4*it(47)+4*it(48)+0
  Such that:it(47) =< A/5-B/5-2/5*D
aux(12) =< A/8-D/4
aux(14) =< A/4-B/4-D/4
aux(15) =< A/8-B/8-D/4
aux(16) =< 2/5*A-2/5*B-2/5*D
it(48) =< aux(15)
it(47) =< aux(16)
it(48) =< aux(16)
it(47) =< aux(15)
it(47) =< aux(14)
it(48) =< aux(14)
it(47) =< aux(12)
it(48) =< aux(12)

  with precondition: [E=3,C=D,B>=0,C>=3,A>=2*C+B+4] 

* Chain [[47,48],52]: 4*it(47)+4*it(48)+4
  Such that:it(47) =< -2/5*C-G/5+H/5
aux(10) =< -C/4-G/8+H/8
aux(12) =< -C/4+H/8
aux(17) =< -2/5*C+I/5
aux(18) =< -C/4+I/8
it(48) =< aux(18)
it(47) =< aux(17)
it(48) =< aux(17)
it(47) =< aux(10)
it(48) =< aux(10)
it(47) =< aux(18)
it(47) =< aux(12)
it(48) =< aux(12)

  with precondition: [E=5,C=D,A=F,B=G,A=H,B>=0,C>=3,I>=4*C+4,A>=B+I+2] 

* Chain [[47,48],51]: 4*it(47)+4*it(48)+4
  Such that:it(47) =< -2/5*C-G/5+H/5
aux(10) =< -C/4-G/8+H/8
aux(12) =< -C/4+H/8
aux(19) =< -2/5*C+I/5
aux(20) =< -C/4+I/8
it(48) =< aux(20)
it(47) =< aux(19)
it(48) =< aux(19)
it(47) =< aux(10)
it(48) =< aux(10)
it(47) =< aux(20)
it(47) =< aux(12)
it(48) =< aux(12)

  with precondition: [E=5,C=D,A=F,B=G,A=H,B>=0,C>=3,I>=4*C+3,A>=B+I+3] 

* Chain [[47,48],50]: 4*it(47)+4*it(48)+1
  Such that:it(47) =< A/5-2/5*D-G/5+1/5
aux(12) =< A/8-D/4
aux(21) =< A/8-D/4-G/8+1/8
aux(22) =< -2/5*D+2/5*I
aux(23) =< -D/4+I/4
it(48) =< aux(21)
it(47) =< aux(22)
it(48) =< aux(22)
it(47) =< aux(21)
it(47) =< aux(23)
it(48) =< aux(23)
it(47) =< aux(12)
it(48) =< aux(12)

  with precondition: [E=6,C=D,A=F,B+1=G,H=I,B>=0,C>=3,H>=2*C+1,A>=2*C+B+4,B+2*H+2>=A,A>=B+H+2] 

* Chain [[47,48],49]: 4*it(47)+4*it(48)+2
  Such that:it(47) =< -2/5*D+I/5+2/5
aux(12) =< -D/4+G/8+I/8+1/4
aux(10) =< -D/4+I/8+1/4
aux(24) =< -2/5*D+I/5
aux(25) =< -D/4+I/8
it(48) =< aux(25)
it(47) =< aux(24)
it(48) =< aux(24)
it(47) =< aux(10)
it(48) =< aux(10)
it(47) =< aux(25)
it(47) =< aux(12)
it(48) =< aux(12)

  with precondition: [E=7,C=D,A=F,B=G,A=2*H+B+3,A=B+I+2,B>=0,C>=3,A>=4*C+B+5] 

* Chain [53]: 0
  with precondition: [E=3,D=C,B>=0,D>=3,A>=B+6,A>=B+D+2] 

* Chain [52]: 4
  with precondition: [E=5,D=C,A=F,B=G,A=H,2*D+2=I,B>=0,D>=3,A>=2*D+B+4] 

* Chain [51]: 4
  with precondition: [E=5,D=C,A=F,B=G,A=H,2*D+1=I,B>=0,D>=3,A>=2*D+B+4] 

* Chain [50]: 1
  with precondition: [E=6,D=C,A=F,B+1=G,D=H,D=I,B>=0,D>=3,A>=B+6,B+2*D+2>=A,A>=B+D+2] 

* Chain [49]: 2
  with precondition: [E=7,C=D,A=F,C=H,2*C+1=I,B+2*C+3=A,G+2*C+3=A,C>=3,A>=2*C+3] 


#### Cost of chains of n_evalrealheapsortbb9in___23(A,B,C,D,E,F,G,H,I):
* Chain [[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],77]: 262*it(54)+32*s(24)+16*s(165)+16*s(166)+16*s(172)+16*s(173)+32*s(179)+16*s(180)+16*s(181)+7
  Such that:aux(54) =< A/5-B/5
aux(71) =< A-B
aux(72) =< 2*A-2*B
aux(73) =< A/8
s(24) =< aux(71)
s(24) =< aux(72)
s(24) =< aux(73)
it(54) =< aux(71)
it(54) =< aux(72)
aux(67) =< aux(54)* (5/4)-1/4
aux(60) =< aux(73)
aux(59) =< aux(54)
aux(62) =< aux(54)-2/5
aux(57) =< aux(54)-1/5
aux(56) =< it(54)*aux(54)
s(167) =< it(54)*aux(73)
aux(68) =< it(54)*aux(67)
aux(61) =< it(54)*aux(59)
s(174) =< it(54)*aux(60)
aux(63) =< it(54)*aux(62)
aux(58) =< it(54)*aux(57)
s(169) =< aux(56)* (5/8)
s(186) =< aux(68)* (8/5)
s(176) =< aux(61)* (5/8)
s(175) =< aux(63)* (5/8)
s(168) =< aux(58)* (5/8)
s(180) =< aux(61)
s(181) =< s(176)
s(180) =< s(186)
s(181) =< s(186)
s(180) =< s(176)
s(180) =< aux(68)
s(181) =< aux(68)
s(180) =< s(174)
s(181) =< s(174)
s(179) =< aux(61)
s(179) =< s(176)
s(179) =< s(174)
s(172) =< aux(61)
s(173) =< s(175)
s(172) =< aux(63)
s(173) =< aux(63)
s(172) =< s(176)
s(173) =< s(176)
s(172) =< s(175)
s(172) =< s(174)
s(173) =< s(174)
s(165) =< aux(56)
s(166) =< s(168)
s(165) =< aux(58)
s(166) =< aux(58)
s(165) =< s(169)
s(166) =< s(169)
s(165) =< s(168)
s(165) =< s(167)
s(166) =< s(167)

  with precondition: [C=0,E=3,B>=0,A>=B+4] 

* Chain [[54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],76]: 262*it(54)+16*s(165)+16*s(166)+16*s(172)+16*s(173)+32*s(179)+16*s(180)+16*s(181)+5
  Such that:aux(70) =< -B+G
aux(69) =< -B+G+1
aux(54) =< -B/5+G/5+1/5
aux(55) =< G/8+1/8
it(54) =< aux(69)
it(54) =< aux(70)
aux(67) =< aux(54)* (5/4)-1/4
aux(60) =< aux(55)
aux(59) =< aux(54)
aux(62) =< aux(54)-2/5
aux(57) =< aux(54)-1/5
aux(56) =< it(54)*aux(54)
s(167) =< it(54)*aux(55)
aux(68) =< it(54)*aux(67)
aux(61) =< it(54)*aux(59)
s(174) =< it(54)*aux(60)
aux(63) =< it(54)*aux(62)
aux(58) =< it(54)*aux(57)
s(169) =< aux(56)* (5/8)
s(186) =< aux(68)* (8/5)
s(176) =< aux(61)* (5/8)
s(175) =< aux(63)* (5/8)
s(168) =< aux(58)* (5/8)
s(180) =< aux(61)
s(181) =< s(176)
s(180) =< s(186)
s(181) =< s(186)
s(180) =< s(176)
s(180) =< aux(68)
s(181) =< aux(68)
s(180) =< s(174)
s(181) =< s(174)
s(179) =< aux(61)
s(179) =< s(176)
s(179) =< s(174)
s(172) =< aux(61)
s(173) =< s(175)
s(172) =< aux(63)
s(173) =< aux(63)
s(172) =< s(176)
s(173) =< s(176)
s(172) =< s(175)
s(172) =< s(174)
s(173) =< s(174)
s(165) =< aux(56)
s(166) =< s(168)
s(165) =< aux(58)
s(166) =< aux(58)
s(165) =< s(169)
s(166) =< s(169)
s(165) =< s(168)
s(165) =< s(167)
s(166) =< s(167)

  with precondition: [C=0,E=9,H=0,I=1,A=F,A=G+1,B>=0,A>=B+4] 

* Chain [77]: 16*s(24)+16*s(28)+7
  Such that:aux(26) =< A/4-B/4
aux(27) =< A/5-B/5
aux(28) =< A/8
aux(29) =< A/8-B/8
aux(30) =< 2/5*A-2/5*B
s(24) =< aux(27)
s(28) =< aux(29)
s(24) =< aux(30)
s(28) =< aux(30)
s(24) =< aux(29)
s(24) =< aux(26)
s(28) =< aux(26)
s(24) =< aux(28)
s(28) =< aux(28)

  with precondition: [C=0,E=3,B>=0,A>=B+3] 

* Chain [76]: 5
  with precondition: [C=0,E=9,H=0,I=1,B+3=A,B+3=F,B+2=G,B>=0] 


#### Cost of chains of n_evalrealheapsortbb9in___23_loop_cont(A,B,C,D,E,F):
* Chain [79]: 0
  with precondition: [A=3] 

* Chain [78]: 1
  with precondition: [A=9,D=0,E=1,B=C+1,B>=3] 


#### Cost of chains of n_evalrealheapsortbb16in___24(A,B,C,D,E):
* Chain [80]: 16*s(231)+16*s(232)+32*s(233)+262*s(234)+16*s(252)+16*s(253)+32*s(254)+16*s(255)+16*s(256)+16*s(257)+16*s(258)+262*s(263)+16*s(281)+16*s(282)+32*s(283)+16*s(284)+16*s(285)+16*s(286)+16*s(287)+8
  Such that:s(225) =< 2*A
s(226) =< A/4
s(228) =< 2/5*A
aux(78) =< A
aux(79) =< A/5
aux(80) =< A/8
s(231) =< aux(79)
s(232) =< aux(80)
s(231) =< s(228)
s(232) =< s(228)
s(231) =< aux(80)
s(231) =< s(226)
s(232) =< s(226)
s(233) =< aux(78)
s(233) =< s(225)
s(233) =< aux(80)
s(234) =< aux(78)
s(234) =< s(225)
s(235) =< aux(79)* (5/4)-1/4
s(236) =< aux(80)
s(237) =< aux(79)
s(238) =< aux(79)-2/5
s(239) =< aux(79)-1/5
s(240) =< s(234)*aux(79)
s(241) =< s(234)*aux(80)
s(242) =< s(234)*s(235)
s(243) =< s(234)*s(237)
s(244) =< s(234)*s(236)
s(245) =< s(234)*s(238)
s(246) =< s(234)*s(239)
s(247) =< s(240)* (5/8)
s(248) =< s(242)* (8/5)
s(249) =< s(243)* (5/8)
s(250) =< s(245)* (5/8)
s(251) =< s(246)* (5/8)
s(252) =< s(243)
s(253) =< s(249)
s(252) =< s(248)
s(253) =< s(248)
s(252) =< s(249)
s(252) =< s(242)
s(253) =< s(242)
s(252) =< s(244)
s(253) =< s(244)
s(254) =< s(243)
s(254) =< s(249)
s(254) =< s(244)
s(255) =< s(243)
s(256) =< s(250)
s(255) =< s(245)
s(256) =< s(245)
s(255) =< s(249)
s(256) =< s(249)
s(255) =< s(250)
s(255) =< s(244)
s(256) =< s(244)
s(257) =< s(240)
s(258) =< s(251)
s(257) =< s(246)
s(258) =< s(246)
s(257) =< s(247)
s(258) =< s(247)
s(257) =< s(251)
s(257) =< s(241)
s(258) =< s(241)
s(263) =< aux(78)
s(269) =< s(263)*aux(79)
s(270) =< s(263)*aux(80)
s(271) =< s(263)*s(235)
s(272) =< s(263)*s(237)
s(273) =< s(263)*s(236)
s(274) =< s(263)*s(238)
s(275) =< s(263)*s(239)
s(276) =< s(269)* (5/8)
s(277) =< s(271)* (8/5)
s(278) =< s(272)* (5/8)
s(279) =< s(274)* (5/8)
s(280) =< s(275)* (5/8)
s(281) =< s(272)
s(282) =< s(278)
s(281) =< s(277)
s(282) =< s(277)
s(281) =< s(278)
s(281) =< s(271)
s(282) =< s(271)
s(281) =< s(273)
s(282) =< s(273)
s(283) =< s(272)
s(283) =< s(278)
s(283) =< s(273)
s(284) =< s(272)
s(285) =< s(279)
s(284) =< s(274)
s(285) =< s(274)
s(284) =< s(278)
s(285) =< s(278)
s(284) =< s(279)
s(284) =< s(273)
s(285) =< s(273)
s(286) =< s(269)
s(287) =< s(280)
s(286) =< s(275)
s(287) =< s(275)
s(286) =< s(276)
s(287) =< s(276)
s(286) =< s(280)
s(286) =< s(270)
s(287) =< s(270)

  with precondition: [B=0,C=0,A>=3] 


#### Cost of chains of n_evalrealheapsortbb3in___31_loop_cont(A,B,C,D,E,F):
* Chain [82]: 0
  with precondition: [A=3] 

* Chain [81]: 16*s(294)+16*s(295)+32*s(296)+262*s(297)+16*s(315)+16*s(316)+32*s(317)+16*s(318)+16*s(319)+16*s(320)+16*s(321)+262*s(322)+16*s(335)+16*s(336)+32*s(337)+16*s(338)+16*s(339)+16*s(340)+16*s(341)+9
  Such that:s(291) =< B
s(288) =< 2*B
s(289) =< B/4
s(292) =< B/5
s(293) =< B/8
s(290) =< 2/5*B
s(294) =< s(292)
s(295) =< s(293)
s(294) =< s(290)
s(295) =< s(290)
s(294) =< s(293)
s(294) =< s(289)
s(295) =< s(289)
s(296) =< s(291)
s(296) =< s(288)
s(296) =< s(293)
s(297) =< s(291)
s(297) =< s(288)
s(298) =< s(292)* (5/4)-1/4
s(299) =< s(293)
s(300) =< s(292)
s(301) =< s(292)-2/5
s(302) =< s(292)-1/5
s(303) =< s(297)*s(292)
s(304) =< s(297)*s(293)
s(305) =< s(297)*s(298)
s(306) =< s(297)*s(300)
s(307) =< s(297)*s(299)
s(308) =< s(297)*s(301)
s(309) =< s(297)*s(302)
s(310) =< s(303)* (5/8)
s(311) =< s(305)* (8/5)
s(312) =< s(306)* (5/8)
s(313) =< s(308)* (5/8)
s(314) =< s(309)* (5/8)
s(315) =< s(306)
s(316) =< s(312)
s(315) =< s(311)
s(316) =< s(311)
s(315) =< s(312)
s(315) =< s(305)
s(316) =< s(305)
s(315) =< s(307)
s(316) =< s(307)
s(317) =< s(306)
s(317) =< s(312)
s(317) =< s(307)
s(318) =< s(306)
s(319) =< s(313)
s(318) =< s(308)
s(319) =< s(308)
s(318) =< s(312)
s(319) =< s(312)
s(318) =< s(313)
s(318) =< s(307)
s(319) =< s(307)
s(320) =< s(303)
s(321) =< s(314)
s(320) =< s(309)
s(321) =< s(309)
s(320) =< s(310)
s(321) =< s(310)
s(320) =< s(314)
s(320) =< s(304)
s(321) =< s(304)
s(322) =< s(291)
s(323) =< s(322)*s(292)
s(324) =< s(322)*s(293)
s(325) =< s(322)*s(298)
s(326) =< s(322)*s(300)
s(327) =< s(322)*s(299)
s(328) =< s(322)*s(301)
s(329) =< s(322)*s(302)
s(330) =< s(323)* (5/8)
s(331) =< s(325)* (8/5)
s(332) =< s(326)* (5/8)
s(333) =< s(328)* (5/8)
s(334) =< s(329)* (5/8)
s(335) =< s(326)
s(336) =< s(332)
s(335) =< s(331)
s(336) =< s(331)
s(335) =< s(332)
s(335) =< s(325)
s(336) =< s(325)
s(335) =< s(327)
s(336) =< s(327)
s(337) =< s(326)
s(337) =< s(332)
s(337) =< s(327)
s(338) =< s(326)
s(339) =< s(333)
s(338) =< s(328)
s(339) =< s(328)
s(338) =< s(332)
s(339) =< s(332)
s(338) =< s(333)
s(338) =< s(327)
s(339) =< s(327)
s(340) =< s(323)
s(341) =< s(334)
s(340) =< s(329)
s(341) =< s(329)
s(340) =< s(330)
s(341) =< s(330)
s(340) =< s(334)
s(340) =< s(324)
s(341) =< s(324)

  with precondition: [A=8,C=0,B>=3] 


#### Cost of chains of n_evalrealheapsortbb6in___33(A,B,C,D,E):
* Chain [83]: 5*s(342)+4*s(345)+16*s(352)+16*s(353)+32*s(354)+262*s(355)+16*s(373)+16*s(374)+32*s(375)+16*s(376)+16*s(377)+16*s(378)+16*s(379)+262*s(380)+16*s(393)+16*s(394)+32*s(395)+16*s(396)+16*s(397)+16*s(398)+16*s(399)+1073*s(400)+2*s(402)+6*s(403)+20*s(405)+64*s(416)+64*s(417)+128*s(418)+1048*s(419)+64*s(437)+64*s(438)+128*s(439)+64*s(440)+64*s(441)+64*s(442)+64*s(443)+64*s(457)+64*s(458)+128*s(459)+64*s(460)+64*s(461)+64*s(462)+64*s(463)+15
  Such that:s(342) =< 1
s(346) =< 3
s(347) =< 6
s(402) =< 1/2
s(343) =< 3/2
s(348) =< 3/4
s(349) =< 3/5
s(350) =< 3/8
s(351) =< 6/5
aux(85) =< A
aux(86) =< 2*A
aux(87) =< A/2
aux(88) =< A/4
aux(89) =< A/5
aux(90) =< A/8
aux(91) =< 2/5*A
s(400) =< aux(85)
s(352) =< s(349)
s(353) =< s(350)
s(352) =< s(351)
s(353) =< s(351)
s(352) =< s(350)
s(352) =< s(348)
s(353) =< s(348)
s(354) =< s(346)
s(354) =< s(347)
s(354) =< s(350)
s(355) =< s(346)
s(355) =< s(347)
s(356) =< s(349)* (5/4)-1/4
s(357) =< s(350)
s(358) =< s(349)
s(359) =< s(349)-2/5
s(360) =< s(349)-1/5
s(361) =< s(355)*s(349)
s(362) =< s(355)*s(350)
s(363) =< s(355)*s(356)
s(364) =< s(355)*s(358)
s(365) =< s(355)*s(357)
s(366) =< s(355)*s(359)
s(367) =< s(355)*s(360)
s(368) =< s(361)* (5/8)
s(369) =< s(363)* (8/5)
s(370) =< s(364)* (5/8)
s(371) =< s(366)* (5/8)
s(372) =< s(367)* (5/8)
s(373) =< s(364)
s(374) =< s(370)
s(373) =< s(369)
s(374) =< s(369)
s(373) =< s(370)
s(373) =< s(363)
s(374) =< s(363)
s(373) =< s(365)
s(374) =< s(365)
s(375) =< s(364)
s(375) =< s(370)
s(375) =< s(365)
s(376) =< s(364)
s(377) =< s(371)
s(376) =< s(366)
s(377) =< s(366)
s(376) =< s(370)
s(377) =< s(370)
s(376) =< s(371)
s(376) =< s(365)
s(377) =< s(365)
s(378) =< s(361)
s(379) =< s(372)
s(378) =< s(367)
s(379) =< s(367)
s(378) =< s(368)
s(379) =< s(368)
s(378) =< s(372)
s(378) =< s(362)
s(379) =< s(362)
s(380) =< s(346)
s(381) =< s(380)*s(349)
s(382) =< s(380)*s(350)
s(383) =< s(380)*s(356)
s(384) =< s(380)*s(358)
s(385) =< s(380)*s(357)
s(386) =< s(380)*s(359)
s(387) =< s(380)*s(360)
s(388) =< s(381)* (5/8)
s(389) =< s(383)* (8/5)
s(390) =< s(384)* (5/8)
s(391) =< s(386)* (5/8)
s(392) =< s(387)* (5/8)
s(393) =< s(384)
s(394) =< s(390)
s(393) =< s(389)
s(394) =< s(389)
s(393) =< s(390)
s(393) =< s(383)
s(394) =< s(383)
s(393) =< s(385)
s(394) =< s(385)
s(395) =< s(384)
s(395) =< s(390)
s(395) =< s(385)
s(396) =< s(384)
s(397) =< s(391)
s(396) =< s(386)
s(397) =< s(386)
s(396) =< s(390)
s(397) =< s(390)
s(396) =< s(391)
s(396) =< s(385)
s(397) =< s(385)
s(398) =< s(381)
s(399) =< s(392)
s(398) =< s(387)
s(399) =< s(387)
s(398) =< s(388)
s(399) =< s(388)
s(398) =< s(392)
s(398) =< s(382)
s(399) =< s(382)
s(344) =< s(342)*s(343)
s(345) =< s(344)
s(403) =< aux(87)
s(404) =< s(400)*aux(87)
s(405) =< s(404)
s(416) =< aux(89)
s(417) =< aux(90)
s(416) =< aux(91)
s(417) =< aux(91)
s(416) =< aux(90)
s(416) =< aux(88)
s(417) =< aux(88)
s(418) =< aux(85)
s(418) =< aux(86)
s(418) =< aux(90)
s(419) =< aux(85)
s(419) =< aux(86)
s(420) =< aux(89)* (5/4)-1/4
s(421) =< aux(90)
s(422) =< aux(89)
s(423) =< aux(89)-2/5
s(424) =< aux(89)-1/5
s(425) =< s(419)*aux(89)
s(426) =< s(419)*aux(90)
s(427) =< s(419)*s(420)
s(428) =< s(419)*s(422)
s(429) =< s(419)*s(421)
s(430) =< s(419)*s(423)
s(431) =< s(419)*s(424)
s(432) =< s(425)* (5/8)
s(433) =< s(427)* (8/5)
s(434) =< s(428)* (5/8)
s(435) =< s(430)* (5/8)
s(436) =< s(431)* (5/8)
s(437) =< s(428)
s(438) =< s(434)
s(437) =< s(433)
s(438) =< s(433)
s(437) =< s(434)
s(437) =< s(427)
s(438) =< s(427)
s(437) =< s(429)
s(438) =< s(429)
s(439) =< s(428)
s(439) =< s(434)
s(439) =< s(429)
s(440) =< s(428)
s(441) =< s(435)
s(440) =< s(430)
s(441) =< s(430)
s(440) =< s(434)
s(441) =< s(434)
s(440) =< s(435)
s(440) =< s(429)
s(441) =< s(429)
s(442) =< s(425)
s(443) =< s(436)
s(442) =< s(431)
s(443) =< s(431)
s(442) =< s(432)
s(443) =< s(432)
s(442) =< s(436)
s(442) =< s(426)
s(443) =< s(426)
s(445) =< s(400)*aux(89)
s(446) =< s(400)*aux(90)
s(447) =< s(400)*s(420)
s(448) =< s(400)*s(422)
s(449) =< s(400)*s(421)
s(450) =< s(400)*s(423)
s(451) =< s(400)*s(424)
s(452) =< s(445)* (5/8)
s(453) =< s(447)* (8/5)
s(454) =< s(448)* (5/8)
s(455) =< s(450)* (5/8)
s(456) =< s(451)* (5/8)
s(457) =< s(448)
s(458) =< s(454)
s(457) =< s(453)
s(458) =< s(453)
s(457) =< s(454)
s(457) =< s(447)
s(458) =< s(447)
s(457) =< s(449)
s(458) =< s(449)
s(459) =< s(448)
s(459) =< s(454)
s(459) =< s(449)
s(460) =< s(448)
s(461) =< s(455)
s(460) =< s(450)
s(461) =< s(450)
s(460) =< s(454)
s(461) =< s(454)
s(460) =< s(455)
s(460) =< s(449)
s(461) =< s(449)
s(462) =< s(445)
s(463) =< s(456)
s(462) =< s(451)
s(463) =< s(451)
s(462) =< s(452)
s(463) =< s(452)
s(462) =< s(456)
s(462) =< s(446)
s(463) =< s(446)

  with precondition: [B=1,A>=3] 


#### Cost of chains of n_evalrealheapsortentryin___34(A,B,C,D,E):
* Chain [85]: 1
  with precondition: [2>=A] 

* Chain [84]: 5*s(640)+2*s(643)+1073*s(656)+16*s(657)+16*s(658)+32*s(659)+262*s(660)+16*s(678)+16*s(679)+32*s(680)+16*s(681)+16*s(682)+16*s(683)+16*s(684)+262*s(685)+16*s(698)+16*s(699)+32*s(700)+16*s(701)+16*s(702)+16*s(703)+16*s(704)+4*s(706)+6*s(707)+20*s(709)+64*s(710)+64*s(711)+128*s(712)+1048*s(713)+64*s(731)+64*s(732)+128*s(733)+64*s(734)+64*s(735)+64*s(736)+64*s(737)+64*s(750)+64*s(751)+128*s(752)+64*s(753)+64*s(754)+64*s(755)+64*s(756)+16
  Such that:s(640) =< 1
s(641) =< 3
s(642) =< 6
s(643) =< 1/2
s(644) =< 3/2
s(645) =< 3/4
s(646) =< 3/5
s(647) =< 3/8
s(648) =< 6/5
s(649) =< A
s(650) =< 2*A
s(651) =< A/2
s(652) =< A/4
s(653) =< A/5
s(654) =< A/8
s(655) =< 2/5*A
s(656) =< s(649)
s(657) =< s(646)
s(658) =< s(647)
s(657) =< s(648)
s(658) =< s(648)
s(657) =< s(647)
s(657) =< s(645)
s(658) =< s(645)
s(659) =< s(641)
s(659) =< s(642)
s(659) =< s(647)
s(660) =< s(641)
s(660) =< s(642)
s(661) =< s(646)* (5/4)-1/4
s(662) =< s(647)
s(663) =< s(646)
s(664) =< s(646)-2/5
s(665) =< s(646)-1/5
s(666) =< s(660)*s(646)
s(667) =< s(660)*s(647)
s(668) =< s(660)*s(661)
s(669) =< s(660)*s(663)
s(670) =< s(660)*s(662)
s(671) =< s(660)*s(664)
s(672) =< s(660)*s(665)
s(673) =< s(666)* (5/8)
s(674) =< s(668)* (8/5)
s(675) =< s(669)* (5/8)
s(676) =< s(671)* (5/8)
s(677) =< s(672)* (5/8)
s(678) =< s(669)
s(679) =< s(675)
s(678) =< s(674)
s(679) =< s(674)
s(678) =< s(675)
s(678) =< s(668)
s(679) =< s(668)
s(678) =< s(670)
s(679) =< s(670)
s(680) =< s(669)
s(680) =< s(675)
s(680) =< s(670)
s(681) =< s(669)
s(682) =< s(676)
s(681) =< s(671)
s(682) =< s(671)
s(681) =< s(675)
s(682) =< s(675)
s(681) =< s(676)
s(681) =< s(670)
s(682) =< s(670)
s(683) =< s(666)
s(684) =< s(677)
s(683) =< s(672)
s(684) =< s(672)
s(683) =< s(673)
s(684) =< s(673)
s(683) =< s(677)
s(683) =< s(667)
s(684) =< s(667)
s(685) =< s(641)
s(686) =< s(685)*s(646)
s(687) =< s(685)*s(647)
s(688) =< s(685)*s(661)
s(689) =< s(685)*s(663)
s(690) =< s(685)*s(662)
s(691) =< s(685)*s(664)
s(692) =< s(685)*s(665)
s(693) =< s(686)* (5/8)
s(694) =< s(688)* (8/5)
s(695) =< s(689)* (5/8)
s(696) =< s(691)* (5/8)
s(697) =< s(692)* (5/8)
s(698) =< s(689)
s(699) =< s(695)
s(698) =< s(694)
s(699) =< s(694)
s(698) =< s(695)
s(698) =< s(688)
s(699) =< s(688)
s(698) =< s(690)
s(699) =< s(690)
s(700) =< s(689)
s(700) =< s(695)
s(700) =< s(690)
s(701) =< s(689)
s(702) =< s(696)
s(701) =< s(691)
s(702) =< s(691)
s(701) =< s(695)
s(702) =< s(695)
s(701) =< s(696)
s(701) =< s(690)
s(702) =< s(690)
s(703) =< s(686)
s(704) =< s(697)
s(703) =< s(692)
s(704) =< s(692)
s(703) =< s(693)
s(704) =< s(693)
s(703) =< s(697)
s(703) =< s(687)
s(704) =< s(687)
s(705) =< s(640)*s(644)
s(706) =< s(705)
s(707) =< s(651)
s(708) =< s(656)*s(651)
s(709) =< s(708)
s(710) =< s(653)
s(711) =< s(654)
s(710) =< s(655)
s(711) =< s(655)
s(710) =< s(654)
s(710) =< s(652)
s(711) =< s(652)
s(712) =< s(649)
s(712) =< s(650)
s(712) =< s(654)
s(713) =< s(649)
s(713) =< s(650)
s(714) =< s(653)* (5/4)-1/4
s(715) =< s(654)
s(716) =< s(653)
s(717) =< s(653)-2/5
s(718) =< s(653)-1/5
s(719) =< s(713)*s(653)
s(720) =< s(713)*s(654)
s(721) =< s(713)*s(714)
s(722) =< s(713)*s(716)
s(723) =< s(713)*s(715)
s(724) =< s(713)*s(717)
s(725) =< s(713)*s(718)
s(726) =< s(719)* (5/8)
s(727) =< s(721)* (8/5)
s(728) =< s(722)* (5/8)
s(729) =< s(724)* (5/8)
s(730) =< s(725)* (5/8)
s(731) =< s(722)
s(732) =< s(728)
s(731) =< s(727)
s(732) =< s(727)
s(731) =< s(728)
s(731) =< s(721)
s(732) =< s(721)
s(731) =< s(723)
s(732) =< s(723)
s(733) =< s(722)
s(733) =< s(728)
s(733) =< s(723)
s(734) =< s(722)
s(735) =< s(729)
s(734) =< s(724)
s(735) =< s(724)
s(734) =< s(728)
s(735) =< s(728)
s(734) =< s(729)
s(734) =< s(723)
s(735) =< s(723)
s(736) =< s(719)
s(737) =< s(730)
s(736) =< s(725)
s(737) =< s(725)
s(736) =< s(726)
s(737) =< s(726)
s(736) =< s(730)
s(736) =< s(720)
s(737) =< s(720)
s(738) =< s(656)*s(653)
s(739) =< s(656)*s(654)
s(740) =< s(656)*s(714)
s(741) =< s(656)*s(716)
s(742) =< s(656)*s(715)
s(743) =< s(656)*s(717)
s(744) =< s(656)*s(718)
s(745) =< s(738)* (5/8)
s(746) =< s(740)* (8/5)
s(747) =< s(741)* (5/8)
s(748) =< s(743)* (5/8)
s(749) =< s(744)* (5/8)
s(750) =< s(741)
s(751) =< s(747)
s(750) =< s(746)
s(751) =< s(746)
s(750) =< s(747)
s(750) =< s(740)
s(751) =< s(740)
s(750) =< s(742)
s(751) =< s(742)
s(752) =< s(741)
s(752) =< s(747)
s(752) =< s(742)
s(753) =< s(741)
s(754) =< s(748)
s(753) =< s(743)
s(754) =< s(743)
s(753) =< s(747)
s(754) =< s(747)
s(753) =< s(748)
s(753) =< s(742)
s(754) =< s(742)
s(755) =< s(738)
s(756) =< s(749)
s(755) =< s(744)
s(756) =< s(744)
s(755) =< s(745)
s(756) =< s(745)
s(755) =< s(749)
s(755) =< s(739)
s(756) =< s(739)

  with precondition: [A>=3] 


#### Cost of chains of pyRinit(A,B,C,D,E):
* Chain [87]: 3
  with precondition: [2>=A] 

* Chain [86]: 5*s(757)+2*s(760)+1073*s(773)+16*s(774)+16*s(775)+32*s(776)+262*s(777)+16*s(795)+16*s(796)+32*s(797)+16*s(798)+16*s(799)+16*s(800)+16*s(801)+262*s(802)+16*s(815)+16*s(816)+32*s(817)+16*s(818)+16*s(819)+16*s(820)+16*s(821)+4*s(823)+6*s(824)+20*s(826)+64*s(827)+64*s(828)+128*s(829)+1048*s(830)+64*s(848)+64*s(849)+128*s(850)+64*s(851)+64*s(852)+64*s(853)+64*s(854)+64*s(867)+64*s(868)+128*s(869)+64*s(870)+64*s(871)+64*s(872)+64*s(873)+18
  Such that:s(757) =< 1
s(758) =< 3
s(759) =< 6
s(760) =< 1/2
s(761) =< 3/2
s(762) =< 3/4
s(763) =< 3/5
s(764) =< 3/8
s(765) =< 6/5
s(766) =< A
s(767) =< 2*A
s(768) =< A/2
s(769) =< A/4
s(770) =< A/5
s(771) =< A/8
s(772) =< 2/5*A
s(773) =< s(766)
s(774) =< s(763)
s(775) =< s(764)
s(774) =< s(765)
s(775) =< s(765)
s(774) =< s(764)
s(774) =< s(762)
s(775) =< s(762)
s(776) =< s(758)
s(776) =< s(759)
s(776) =< s(764)
s(777) =< s(758)
s(777) =< s(759)
s(778) =< s(763)* (5/4)-1/4
s(779) =< s(764)
s(780) =< s(763)
s(781) =< s(763)-2/5
s(782) =< s(763)-1/5
s(783) =< s(777)*s(763)
s(784) =< s(777)*s(764)
s(785) =< s(777)*s(778)
s(786) =< s(777)*s(780)
s(787) =< s(777)*s(779)
s(788) =< s(777)*s(781)
s(789) =< s(777)*s(782)
s(790) =< s(783)* (5/8)
s(791) =< s(785)* (8/5)
s(792) =< s(786)* (5/8)
s(793) =< s(788)* (5/8)
s(794) =< s(789)* (5/8)
s(795) =< s(786)
s(796) =< s(792)
s(795) =< s(791)
s(796) =< s(791)
s(795) =< s(792)
s(795) =< s(785)
s(796) =< s(785)
s(795) =< s(787)
s(796) =< s(787)
s(797) =< s(786)
s(797) =< s(792)
s(797) =< s(787)
s(798) =< s(786)
s(799) =< s(793)
s(798) =< s(788)
s(799) =< s(788)
s(798) =< s(792)
s(799) =< s(792)
s(798) =< s(793)
s(798) =< s(787)
s(799) =< s(787)
s(800) =< s(783)
s(801) =< s(794)
s(800) =< s(789)
s(801) =< s(789)
s(800) =< s(790)
s(801) =< s(790)
s(800) =< s(794)
s(800) =< s(784)
s(801) =< s(784)
s(802) =< s(758)
s(803) =< s(802)*s(763)
s(804) =< s(802)*s(764)
s(805) =< s(802)*s(778)
s(806) =< s(802)*s(780)
s(807) =< s(802)*s(779)
s(808) =< s(802)*s(781)
s(809) =< s(802)*s(782)
s(810) =< s(803)* (5/8)
s(811) =< s(805)* (8/5)
s(812) =< s(806)* (5/8)
s(813) =< s(808)* (5/8)
s(814) =< s(809)* (5/8)
s(815) =< s(806)
s(816) =< s(812)
s(815) =< s(811)
s(816) =< s(811)
s(815) =< s(812)
s(815) =< s(805)
s(816) =< s(805)
s(815) =< s(807)
s(816) =< s(807)
s(817) =< s(806)
s(817) =< s(812)
s(817) =< s(807)
s(818) =< s(806)
s(819) =< s(813)
s(818) =< s(808)
s(819) =< s(808)
s(818) =< s(812)
s(819) =< s(812)
s(818) =< s(813)
s(818) =< s(807)
s(819) =< s(807)
s(820) =< s(803)
s(821) =< s(814)
s(820) =< s(809)
s(821) =< s(809)
s(820) =< s(810)
s(821) =< s(810)
s(820) =< s(814)
s(820) =< s(804)
s(821) =< s(804)
s(822) =< s(757)*s(761)
s(823) =< s(822)
s(824) =< s(768)
s(825) =< s(773)*s(768)
s(826) =< s(825)
s(827) =< s(770)
s(828) =< s(771)
s(827) =< s(772)
s(828) =< s(772)
s(827) =< s(771)
s(827) =< s(769)
s(828) =< s(769)
s(829) =< s(766)
s(829) =< s(767)
s(829) =< s(771)
s(830) =< s(766)
s(830) =< s(767)
s(831) =< s(770)* (5/4)-1/4
s(832) =< s(771)
s(833) =< s(770)
s(834) =< s(770)-2/5
s(835) =< s(770)-1/5
s(836) =< s(830)*s(770)
s(837) =< s(830)*s(771)
s(838) =< s(830)*s(831)
s(839) =< s(830)*s(833)
s(840) =< s(830)*s(832)
s(841) =< s(830)*s(834)
s(842) =< s(830)*s(835)
s(843) =< s(836)* (5/8)
s(844) =< s(838)* (8/5)
s(845) =< s(839)* (5/8)
s(846) =< s(841)* (5/8)
s(847) =< s(842)* (5/8)
s(848) =< s(839)
s(849) =< s(845)
s(848) =< s(844)
s(849) =< s(844)
s(848) =< s(845)
s(848) =< s(838)
s(849) =< s(838)
s(848) =< s(840)
s(849) =< s(840)
s(850) =< s(839)
s(850) =< s(845)
s(850) =< s(840)
s(851) =< s(839)
s(852) =< s(846)
s(851) =< s(841)
s(852) =< s(841)
s(851) =< s(845)
s(852) =< s(845)
s(851) =< s(846)
s(851) =< s(840)
s(852) =< s(840)
s(853) =< s(836)
s(854) =< s(847)
s(853) =< s(842)
s(854) =< s(842)
s(853) =< s(843)
s(854) =< s(843)
s(853) =< s(847)
s(853) =< s(837)
s(854) =< s(837)
s(855) =< s(773)*s(770)
s(856) =< s(773)*s(771)
s(857) =< s(773)*s(831)
s(858) =< s(773)*s(833)
s(859) =< s(773)*s(832)
s(860) =< s(773)*s(834)
s(861) =< s(773)*s(835)
s(862) =< s(855)* (5/8)
s(863) =< s(857)* (8/5)
s(864) =< s(858)* (5/8)
s(865) =< s(860)* (5/8)
s(866) =< s(861)* (5/8)
s(867) =< s(858)
s(868) =< s(864)
s(867) =< s(863)
s(868) =< s(863)
s(867) =< s(864)
s(867) =< s(857)
s(868) =< s(857)
s(867) =< s(859)
s(868) =< s(859)
s(869) =< s(858)
s(869) =< s(864)
s(869) =< s(859)
s(870) =< s(858)
s(871) =< s(865)
s(870) =< s(860)
s(871) =< s(860)
s(870) =< s(864)
s(871) =< s(864)
s(870) =< s(865)
s(870) =< s(859)
s(871) =< s(859)
s(872) =< s(855)
s(873) =< s(866)
s(872) =< s(861)
s(873) =< s(861)
s(872) =< s(862)
s(873) =< s(862)
s(872) =< s(866)
s(872) =< s(856)
s(873) =< s(856)

  with precondition: [A>=3] 


Closed-form bounds of pyRinit(A,B,C,D,E): 
-------------------------------------
* Chain [87] with precondition: [2>=A] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [86] with precondition: [A>=3] 
    - Upper bound: 2249*A+10368/5+ (16*A-32)*A+ (16*A-16)*A+3*A+10*A*A+64/5*A+144*A*A+8*A 
    - Complexity: n^2 

### Maximum cost of pyRinit(A,B,C,D,E): 10353/5+nat(A)*2249+nat(-2/5+nat(A/5))*80*nat(A)+nat(-1/5+nat(A/5))*80*nat(A)+nat(A/2)*6+nat(A/2)*20*nat(A)+nat(A/5)*64+nat(A/5)*720*nat(A)+nat(A/8)*64+3 
Asymptotic class: n^2 
* Total analysis performed in 4239 ms.


-- stats
realtime 0:04.59
usertime 4.52
systime 0.01

