WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_lbl101___10/13,n_lbl101___7/13,n_lbl121___8/13]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [n_stop___11/7]
3. non_recursive  : [n_lbl121___4/7]
4. non_recursive  : [n_lbl121___5/7]
5. non_recursive  : [n_lbl121___6/7]
6. non_recursive  : [n_lbl101___10_loop_cont/8]
7. non_recursive  : [n_lbl121___2/7]
8. non_recursive  : [n_lbl121___3/7]
9. non_recursive  : [n_lbl121___9/7]
10. non_recursive  : [n_lbl101___13/7]
11. non_recursive  : [n_lbl121___1/7]
12. non_recursive  : [n_lbl121___12/7]
13. non_recursive  : [n_start___14/7]
14. non_recursive  : [n_start0/7]
15. non_recursive  : [pyRinit/7]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_lbl101___10/13
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into n_lbl101___10_loop_cont/8
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into n_lbl101___13/7
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into n_lbl121___12/7
13. SCC is partially evaluated into n_start___14/7
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into pyRinit/7

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_lbl101___10/13 
* CE 12 is refined into CE [15] 
* CE 9 is refined into CE [16] 
* CE 11 is refined into CE [17] 
* CE 10 is refined into CE [18] 


### Cost equations --> "Loop" of n_lbl101___10/13 
* CEs [17] --> Loop 15 
* CEs [18] --> Loop 16 
* CEs [15] --> Loop 17 
* CEs [16] --> Loop 18 

### Ranking functions of CR n_lbl101___10(A,B,C,D,E,F,G,H,I,J,K,L,M) 

#### Partial ranking functions of CR n_lbl101___10(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* Partial RF of phase [15,16]:
  - RF of loop [15:1]:
    A/2-B/2 depends on loops [16:1] 
    -B/2+D/2 depends on loops [16:1] 
    -B/2+F/2 depends on loops [16:1] 
  - RF of loop [16:1]:
    D-3


### Specialization of cost equations n_lbl101___10_loop_cont/8 
* CE 14 is refined into CE [19] 
* CE 13 is refined into CE [20] 


### Cost equations --> "Loop" of n_lbl101___10_loop_cont/8 
* CEs [19] --> Loop 19 
* CEs [20] --> Loop 20 

### Ranking functions of CR n_lbl101___10_loop_cont(A,B,C,D,E,F,G,H) 

#### Partial ranking functions of CR n_lbl101___10_loop_cont(A,B,C,D,E,F,G,H) 


### Specialization of cost equations n_lbl101___13/7 
* CE 5 is refined into CE [21,22,23] 
* CE 6 is refined into CE [24] 


### Cost equations --> "Loop" of n_lbl101___13/7 
* CEs [21,22,23] --> Loop 21 
* CEs [24] --> Loop 22 

### Ranking functions of CR n_lbl101___13(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR n_lbl101___13(A,B,C,D,E,F,G) 


### Specialization of cost equations n_lbl121___12/7 
* CE 7 is refined into CE [25] 
* CE 8 is refined into CE [26] 


### Cost equations --> "Loop" of n_lbl121___12/7 
* CEs [25] --> Loop 23 
* CEs [26] --> Loop 24 

### Ranking functions of CR n_lbl121___12(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR n_lbl121___12(A,B,C,D,E,F,G) 


### Specialization of cost equations n_start___14/7 
* CE 2 is refined into CE [27,28] 
* CE 4 is refined into CE [29] 
* CE 3 is refined into CE [30,31] 


### Cost equations --> "Loop" of n_start___14/7 
* CEs [28] --> Loop 25 
* CEs [29] --> Loop 26 
* CEs [27] --> Loop 27 
* CEs [31] --> Loop 28 
* CEs [30] --> Loop 29 

### Ranking functions of CR n_start___14(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR n_start___14(A,B,C,D,E,F,G) 


### Specialization of cost equations pyRinit/7 
* CE 1 is refined into CE [32,33,34,35,36] 


### Cost equations --> "Loop" of pyRinit/7 
* CEs [36] --> Loop 30 
* CEs [35] --> Loop 31 
* CEs [34] --> Loop 32 
* CEs [33] --> Loop 33 
* CEs [32] --> Loop 34 

### Ranking functions of CR pyRinit(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR pyRinit(A,B,C,D,E,F,G) 


Computing Bounds
=====================================

#### Cost of chains of n_lbl101___10(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [[15,16],18]: 1*it(15)+3*it(16)+3
  Such that:aux(2) =< -B/2+D/2
aux(8) =< -B/2+D/2+1/2
aux(13) =< H
aux(26) =< D
it(16) =< aux(26)
aux(1) =< it(16)*aux(13)
it(15) =< aux(1)+aux(2)
it(15) =< aux(1)+aux(8)

  with precondition: [G=3,I=2,K=1,A=F,A=H,C=J,E=L,A=M,B>=4,D>=4,2*D>=B+2,A>=D] 

* Chain [[15,16],17]: 1*it(15)+3*it(16)+0
  Such that:aux(8) =< -5/8*B+5/4*D
aux(2) =< -B/2+D/2
aux(13) =< F
aux(27) =< D
it(16) =< aux(27)
aux(1) =< it(16)*aux(13)
it(15) =< aux(1)+aux(2)
it(15) =< aux(1)+aux(8)

  with precondition: [G=2,A=F,B>=4,D>=4,2*D>=B+2,A>=D] 

* Chain [18]: 3
  with precondition: [B=4,D=3,G=3,I=2,K=1,F=A,J=C,L=E,F=H,F=M,F>=3] 

* Chain [17]: 0
  with precondition: [G=2,F=A,B>=4,2*D>=B+2,F>=D] 


#### Cost of chains of n_lbl101___10_loop_cont(A,B,C,D,E,F,G,H):
* Chain [20]: 0
  with precondition: [A=2] 

* Chain [19]: 3
  with precondition: [A=3,C=2,E=1,B=G,B>=3] 


#### Cost of chains of n_lbl101___13(A,B,C,D,E,F,G):
* Chain [22]: 4
  with precondition: [A=2,B=2,D=2,F=2] 

* Chain [21]: 3*s(12)+1*s(14)+3*s(19)+1*s(21)+7
  Such that:aux(29) =< A
aux(30) =< A/2
s(9) =< D/2
aux(28) =< F
s(8) =< 5/4*F
s(19) =< aux(29)
s(20) =< s(19)*aux(29)
s(21) =< s(20)+aux(30)
s(12) =< aux(28)
s(13) =< s(12)*aux(28)
s(14) =< s(13)+s(9)
s(14) =< s(13)+s(8)

  with precondition: [B=2,D=A,D=F,D>=3] 


#### Cost of chains of n_lbl121___12(A,B,C,D,E,F,G):
* Chain [24]: 1
  with precondition: [A=0,B=1,D+1=0,F=0] 

* Chain [23]: 2
  with precondition: [A=1,B=1,D=0,F=1] 


#### Cost of chains of n_start___14(A,B,C,D,E,F,G):
* Chain [29]: 2
  with precondition: [A=0,F=0,C=B,E=D] 

* Chain [28]: 3
  with precondition: [A=1,F=1,C=B,E=D] 

* Chain [27]: 5
  with precondition: [A=2,F=2,C=B,E=D] 

* Chain [26]: 1
  with precondition: [F=A,C=B,E=D,0>=F+1] 

* Chain [25]: 6*s(27)+1*s(29)+1*s(32)+8
  Such that:s(26) =< 5/4*F
aux(31) =< F
aux(32) =< F/2
s(27) =< aux(31)
s(28) =< s(27)*aux(31)
s(29) =< s(28)+aux(32)
s(32) =< s(28)+aux(32)
s(32) =< s(28)+s(26)

  with precondition: [F=A,C=B,E=D,F>=3] 


#### Cost of chains of pyRinit(A,B,C,D,E,F,G):
* Chain [34]: 4
  with precondition: [A=0] 

* Chain [33]: 5
  with precondition: [A=1] 

* Chain [32]: 7
  with precondition: [A=2] 

* Chain [31]: 3
  with precondition: [0>=A+1] 

* Chain [30]: 6*s(36)+1*s(38)+1*s(39)+10
  Such that:s(34) =< A
s(35) =< A/2
s(33) =< 5/4*A
s(36) =< s(34)
s(37) =< s(36)*s(34)
s(38) =< s(37)+s(35)
s(39) =< s(37)+s(35)
s(39) =< s(37)+s(33)

  with precondition: [A>=3] 


Closed-form bounds of pyRinit(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [34] with precondition: [A=0] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [33] with precondition: [A=1] 
    - Upper bound: 5 
    - Complexity: constant 
* Chain [32] with precondition: [A=2] 
    - Upper bound: 7 
    - Complexity: constant 
* Chain [31] with precondition: [0>=A+1] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [30] with precondition: [A>=3] 
    - Upper bound: 6*A+10+2*A*A+A 
    - Complexity: n^2 

### Maximum cost of pyRinit(A,B,C,D,E,F,G): max([4,nat(A)*6+7+nat(A)*2*nat(A)+nat(A/2)*2])+3 
Asymptotic class: n^2 
* Total analysis performed in 567 ms.


-- stats
realtime 0:00.65
usertime 0.60
systime 0.01

