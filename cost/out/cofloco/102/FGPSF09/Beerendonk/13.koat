WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval___2/3]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [n_eval___2_loop_cont/2]
3. non_recursive  : [n_eval___1/3]
4. non_recursive  : [n_eval___3/3]
5. non_recursive  : [n_start/3]
6. non_recursive  : [pyRinit/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval___2/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_eval___1/3
4. SCC is partially evaluated into n_eval___3/3
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into pyRinit/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval___2/3 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 


### Cost equations --> "Loop" of n_eval___2/3 
* CEs [8] --> Loop 7 
* CEs [7] --> Loop 8 

### Ranking functions of CR n_eval___2(A,B,C) 
* RF of phase [7]: [A]

#### Partial ranking functions of CR n_eval___2(A,B,C) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    A


### Specialization of cost equations n_eval___1/3 
* CE 4 is refined into CE [9] 


### Cost equations --> "Loop" of n_eval___1/3 
* CEs [9] --> Loop 9 

### Ranking functions of CR n_eval___1(A,B,C) 

#### Partial ranking functions of CR n_eval___1(A,B,C) 


### Specialization of cost equations n_eval___3/3 
* CE 2 is refined into CE [10] 
* CE 3 is refined into CE [11] 


### Cost equations --> "Loop" of n_eval___3/3 
* CEs [10] --> Loop 10 
* CEs [11] --> Loop 11 

### Ranking functions of CR n_eval___3(A,B,C) 

#### Partial ranking functions of CR n_eval___3(A,B,C) 


### Specialization of cost equations pyRinit/3 
* CE 1 is refined into CE [12,13] 


### Cost equations --> "Loop" of pyRinit/3 
* CEs [13] --> Loop 12 
* CEs [12] --> Loop 13 

### Ranking functions of CR pyRinit(A,B,C) 

#### Partial ranking functions of CR pyRinit(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of n_eval___2(A,B,C):
* Chain [[7],8]: 1*it(7)+0
  Such that:it(7) =< A

  with precondition: [C=2,A>=1,B>=A+1] 

* Chain [8]: 0
  with precondition: [C=2,A>=0,B>=A+1] 


#### Cost of chains of n_eval___1(A,B,C):
* Chain [9]: 1*s(2)+1
  Such that:s(2) =< A

  with precondition: [B=A,B>=1] 


#### Cost of chains of n_eval___3(A,B,C):
* Chain [11]: 1*s(3)+1
  Such that:s(3) =< A

  with precondition: [A>=1,B>=A] 

* Chain [10]: 1*s(4)+2
  Such that:s(4) =< B

  with precondition: [B>=1,A>=B+1] 


#### Cost of chains of pyRinit(A,B,C):
* Chain [13]: 1*s(5)+3
  Such that:s(5) =< A

  with precondition: [A>=1,B>=A] 

* Chain [12]: 1*s(6)+4
  Such that:s(6) =< B

  with precondition: [B>=1,A>=B+1] 


Closed-form bounds of pyRinit(A,B,C): 
-------------------------------------
* Chain [13] with precondition: [A>=1,B>=A] 
    - Upper bound: A+3 
    - Complexity: n 
* Chain [12] with precondition: [B>=1,A>=B+1] 
    - Upper bound: B+4 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C): max([B+1,A])+3 
Asymptotic class: n 
* Total analysis performed in 62 ms.


-- stats
realtime 0:00.14
usertime 0.10
systime 0.00

