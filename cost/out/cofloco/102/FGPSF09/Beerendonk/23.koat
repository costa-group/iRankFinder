WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval1___3/4,n_eval2___1/4]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [n_eval1___3_loop_cont/2]
3. recursive  : [n_eval2___2/7]
4. non_recursive  : [n_eval2___2_loop_cont/5]
5. non_recursive  : [n_eval2___4/4]
6. non_recursive  : [n_eval1___5/4]
7. non_recursive  : [n_start/4]
8. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval1___3/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_eval2___2/7
4. SCC is partially evaluated into n_eval2___2_loop_cont/5
5. SCC is partially evaluated into n_eval2___4/4
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval1___3/4 
* CE 5 is refined into CE [11] 
* CE 4 is refined into CE [12] 


### Cost equations --> "Loop" of n_eval1___3/4 
* CEs [12] --> Loop 11 
* CEs [11] --> Loop 12 

### Ranking functions of CR n_eval1___3(A,B,C,D) 
* RF of phase [11]: [A-B,A-C]

#### Partial ranking functions of CR n_eval1___3(A,B,C,D) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    A-B
    A-C


### Specialization of cost equations n_eval2___2/7 
* CE 6 is refined into CE [13] 
* CE 8 is refined into CE [14] 
* CE 7 is refined into CE [15] 


### Cost equations --> "Loop" of n_eval2___2/7 
* CEs [15] --> Loop 13 
* CEs [13] --> Loop 14 
* CEs [14] --> Loop 15 

### Ranking functions of CR n_eval2___2(A,B,C,D,E,F,G) 
* RF of phase [13]: [-B+C]

#### Partial ranking functions of CR n_eval2___2(A,B,C,D,E,F,G) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    -B+C


### Specialization of cost equations n_eval2___2_loop_cont/5 
* CE 9 is refined into CE [16] 
* CE 10 is refined into CE [17] 


### Cost equations --> "Loop" of n_eval2___2_loop_cont/5 
* CEs [16] --> Loop 16 
* CEs [17] --> Loop 17 

### Ranking functions of CR n_eval2___2_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR n_eval2___2_loop_cont(A,B,C,D,E) 


### Specialization of cost equations n_eval2___4/4 
* CE 2 is refined into CE [18] 
* CE 3 is refined into CE [19,20,21] 


### Cost equations --> "Loop" of n_eval2___4/4 
* CEs [18] --> Loop 18 
* CEs [19,20,21] --> Loop 19 

### Ranking functions of CR n_eval2___4(A,B,C,D) 

#### Partial ranking functions of CR n_eval2___4(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [22,23] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [23] --> Loop 20 
* CEs [22] --> Loop 21 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_eval1___3(A,B,C,D):
* Chain [[11],12]: 2*it(11)+0
  Such that:it(11) =< A-B

  with precondition: [D=2,A>=B+1,B>=C] 

* Chain [12]: 0
  with precondition: [D=2] 


#### Cost of chains of n_eval2___2(A,B,C,D,E,F,G):
* Chain [[13],15]: 1*it(13)+0
  Such that:it(13) =< -B+C

  with precondition: [D=2,A>=B+1,C>=B+1] 

* Chain [[13],14]: 1*it(13)+1
  Such that:it(13) =< C-F

  with precondition: [D=3,A=E+1,B=F,B=G,A>=B+1,C>=B+1] 

* Chain [15]: 0
  with precondition: [D=2,A>=B+1,C>=B] 

* Chain [14]: 1
  with precondition: [D=3,C=B,A=E+1,C=F,C=G,A>=C+1] 


#### Cost of chains of n_eval2___2_loop_cont(A,B,C,D,E):
* Chain [17]: 0
  with precondition: [A=2] 

* Chain [16]: 2*s(3)+0
  Such that:s(3) =< B-C

  with precondition: [A=3] 


#### Cost of chains of n_eval2___4(A,B,C,D):
* Chain [19]: 2*s(4)+2*s(5)+2*s(7)+2
  Such that:s(7) =< A-B
s(5) =< A-C
aux(1) =< -B+C
s(4) =< aux(1)

  with precondition: [A>=B+1,C>=B+1] 

* Chain [18]: 2*s(8)+1
  Such that:s(8) =< A-B

  with precondition: [A>=B+1,B>=C] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [21]: 2*s(9)+2*s(10)+2*s(12)+5
  Such that:s(9) =< A-B
s(10) =< A-C
s(11) =< -B+C
s(12) =< s(11)

  with precondition: [A>=B+1,C>=B+1] 

* Chain [20]: 2*s(13)+4
  Such that:s(13) =< A-B

  with precondition: [A>=B+1,B>=C] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [21] with precondition: [A>=B+1,C>=B+1] 
    - Upper bound: 2*A-4*B+2*C+5+nat(A-C)*2 
    - Complexity: n 
* Chain [20] with precondition: [A>=B+1,B>=C] 
    - Upper bound: 2*A-2*B+4 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C,D): 2*A-2*B+4+ (nat(-B+C)*2+1+nat(A-C)*2) 
Asymptotic class: n 
* Total analysis performed in 187 ms.


-- stats
realtime 0:00.29
usertime 0.22
systime 0.01

