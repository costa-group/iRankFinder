WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_eval___2/4]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [n_eval___2_loop_cont/2]
3. recursive  : [n_eval___3/7]
4. recursive  : [n_eval___1/4]
5. non_recursive  : [n_eval___1_loop_cont/2]
6. non_recursive  : [n_eval___3_loop_cont/5]
7. recursive  : [n_eval___4/7]
8. non_recursive  : [n_eval___4_loop_cont/5]
9. non_recursive  : [n_eval___5/4]
10. non_recursive  : [n_start/4]
11. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_eval___2/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_eval___3/7
4. SCC is partially evaluated into n_eval___1/4
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into n_eval___3_loop_cont/5
7. SCC is partially evaluated into n_eval___4/7
8. SCC is partially evaluated into n_eval___4_loop_cont/5
9. SCC is partially evaluated into n_eval___5/4
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_eval___2/4 
* CE 6 is refined into CE [21] 
* CE 5 is refined into CE [22] 


### Cost equations --> "Loop" of n_eval___2/4 
* CEs [22] --> Loop 20 
* CEs [21] --> Loop 21 

### Ranking functions of CR n_eval___2(A,B,C,D) 
* RF of phase [20]: [-A+C,-B+C]

#### Partial ranking functions of CR n_eval___2(A,B,C,D) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    -A+C
    -B+C


### Specialization of cost equations n_eval___3/7 
* CE 7 is refined into CE [23] 
* CE 9 is refined into CE [24] 
* CE 8 is refined into CE [25] 


### Cost equations --> "Loop" of n_eval___3/7 
* CEs [25] --> Loop 22 
* CEs [23] --> Loop 23 
* CEs [24] --> Loop 24 

### Ranking functions of CR n_eval___3(A,B,C,D,E,F,G) 
* RF of phase [22]: [A-B]

#### Partial ranking functions of CR n_eval___3(A,B,C,D,E,F,G) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    A-B


### Specialization of cost equations n_eval___1/4 
* CE 20 is refined into CE [26] 
* CE 19 is refined into CE [27] 


### Cost equations --> "Loop" of n_eval___1/4 
* CEs [27] --> Loop 25 
* CEs [26] --> Loop 26 

### Ranking functions of CR n_eval___1(A,B,C,D) 
* RF of phase [25]: [-A+C,-B+C]

#### Partial ranking functions of CR n_eval___1(A,B,C,D) 
* Partial RF of phase [25]:
  - RF of loop [25:1]:
    -A+C
    -B+C


### Specialization of cost equations n_eval___3_loop_cont/5 
* CE 10 is refined into CE [28] 
* CE 11 is refined into CE [29] 


### Cost equations --> "Loop" of n_eval___3_loop_cont/5 
* CEs [28] --> Loop 27 
* CEs [29] --> Loop 28 

### Ranking functions of CR n_eval___3_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR n_eval___3_loop_cont(A,B,C,D,E) 


### Specialization of cost equations n_eval___4/7 
* CE 13 is refined into CE [30] 
* CE 12 is refined into CE [31] 
* CE 15 is refined into CE [32] 
* CE 14 is refined into CE [33] 


### Cost equations --> "Loop" of n_eval___4/7 
* CEs [33] --> Loop 29 
* CEs [30] --> Loop 30 
* CEs [31] --> Loop 31 
* CEs [32] --> Loop 32 

### Ranking functions of CR n_eval___4(A,B,C,D,E,F,G) 
* RF of phase [29]: [A-B]

#### Partial ranking functions of CR n_eval___4(A,B,C,D,E,F,G) 
* Partial RF of phase [29]:
  - RF of loop [29:1]:
    A-B


### Specialization of cost equations n_eval___4_loop_cont/5 
* CE 17 is refined into CE [34,35,36] 
* CE 16 is refined into CE [37] 
* CE 18 is refined into CE [38] 


### Cost equations --> "Loop" of n_eval___4_loop_cont/5 
* CEs [34,35,36] --> Loop 33 
* CEs [37] --> Loop 34 
* CEs [38] --> Loop 35 

### Ranking functions of CR n_eval___4_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR n_eval___4_loop_cont(A,B,C,D,E) 


### Specialization of cost equations n_eval___5/4 
* CE 3 is refined into CE [39,40,41] 
* CE 4 is refined into CE [42,43,44,45,46] 
* CE 2 is refined into CE [47] 


### Cost equations --> "Loop" of n_eval___5/4 
* CEs [47] --> Loop 36 
* CEs [39,40,41,42,43,44,45,46] --> Loop 37 

### Ranking functions of CR n_eval___5(A,B,C,D) 

#### Partial ranking functions of CR n_eval___5(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [48,49] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [49] --> Loop 38 
* CEs [48] --> Loop 39 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_eval___2(A,B,C,D):
* Chain [[20],21]: 1*it(20)+0
  Such that:it(20) =< -B+C

  with precondition: [D=2,B>=A,C>=B+1] 

* Chain [21]: 0
  with precondition: [D=2,B>=A,C>=B] 


#### Cost of chains of n_eval___3(A,B,C,D,E,F,G):
* Chain [[22],24]: 1*it(22)+0
  Such that:it(22) =< A-B

  with precondition: [D=2,A>=B+1,C>=B+1] 

* Chain [[22],23]: 1*it(22)+1
  Such that:it(22) =< A-F

  with precondition: [D=3,B=E,B=F,C=G+1,A>=B+1,C>=B+1] 

* Chain [24]: 0
  with precondition: [D=2] 

* Chain [23]: 1
  with precondition: [D=3,A=B,A=E,A=F,C=G+1,C>=A+1] 


#### Cost of chains of n_eval___1(A,B,C,D):
* Chain [[25],26]: 1*it(25)+0
  Such that:it(25) =< -A+C

  with precondition: [D=2,A=B,C>=A+1] 

* Chain [26]: 0
  with precondition: [D=2] 


#### Cost of chains of n_eval___3_loop_cont(A,B,C,D,E):
* Chain [28]: 0
  with precondition: [A=2] 

* Chain [27]: 1*s(4)+0
  Such that:s(4) =< -B+D

  with precondition: [A=3] 


#### Cost of chains of n_eval___4(A,B,C,D,E,F,G):
* Chain [[29],32]: 1*it(29)+0
  Such that:it(29) =< A-B

  with precondition: [D=2,A>=B+1] 

* Chain [[29],31]: 1*it(29)+1
  Such that:it(29) =< A-F

  with precondition: [D=3,B=E,B=F,C=G+1,A>=B+1,C>=B+1] 

* Chain [[29],30]: 1*it(29)+1
  Such that:it(29) =< A-E

  with precondition: [D=4,B=F,C=G,C>=B+1,E>=B,A>=E+2] 

* Chain [32]: 0
  with precondition: [D=2,A>=B] 

* Chain [31]: 1
  with precondition: [D=3,B=A,B=E,B=F,C=G+1,C>=B+1] 

* Chain [30]: 1
  with precondition: [D=4,A=E+1,B=F,C=G,A>=B+1,C>=B+1] 


#### Cost of chains of n_eval___4_loop_cont(A,B,C,D,E):
* Chain [35]: 0
  with precondition: [A=2] 

* Chain [34]: 1*s(6)+0
  Such that:s(6) =< -B+D

  with precondition: [A=3] 

* Chain [33]: 2*s(7)+1*s(8)+1*s(10)+1
  Such that:s(8) =< -B+D
s(10) =< -C+D
aux(1) =< B-C
s(7) =< aux(1)

  with precondition: [A=4] 


#### Cost of chains of n_eval___5(A,B,C,D):
* Chain [37]: 9*s(11)+2*s(12)+5*s(14)+1*s(19)+3
  Such that:s(19) =< -A+C+2
aux(4) =< -A+C
aux(5) =< A-B
aux(6) =< -B+C
s(12) =< aux(4)
s(11) =< aux(5)
s(14) =< aux(6)

  with precondition: [A>=B+1] 

* Chain [36]: 1*s(28)+1
  Such that:s(28) =< -B+C

  with precondition: [B>=A,C>=B+1] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [39]: 1*s(29)+3
  Such that:s(29) =< -B+C

  with precondition: [B>=A,C>=B+1] 

* Chain [38]: 1*s(30)+2*s(34)+9*s(35)+5*s(36)+5
  Such that:s(31) =< -A+C
s(30) =< -A+C+2
s(32) =< A-B
s(33) =< -B+C
s(34) =< s(31)
s(35) =< s(32)
s(36) =< s(33)

  with precondition: [A>=B+1] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [39] with precondition: [B>=A,C>=B+1] 
    - Upper bound: -B+C+3 
    - Complexity: n 
* Chain [38] with precondition: [A>=B+1] 
    - Upper bound: 9*A-9*B+ (nat(-A+C)*2+5+nat(-B+C)*5+nat(-A+C+2)) 
    - Complexity: n 

### Maximum cost of pyRinit(A,B,C,D): nat(-A+C)*2+2+nat(-B+C)*4+nat(-A+C+2)+nat(A-B)*9+ (nat(-B+C)+3) 
Asymptotic class: n 
* Total analysis performed in 340 ms.


-- stats
realtime 0:00.44
usertime 0.38
systime 0.01

