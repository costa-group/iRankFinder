WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_evalspeedpldi4bb2in___4/5,n_evalspeedpldi4bb5in___2/5]
1. non_recursive  : [exit_location/1]
2. recursive  : [n_evalspeedpldi4bb2in___1/5,n_evalspeedpldi4bb5in___3/5]
3. non_recursive  : [n_evalspeedpldi4stop___7/3]
4. non_recursive  : [n_evalspeedpldi4bb5in___3_loop_cont/4]
5. non_recursive  : [n_evalspeedpldi4bb2in___4_loop_cont/4]
6. non_recursive  : [n_evalspeedpldi4bb5in___5/3]
7. non_recursive  : [n_evalspeedpldi4bb2in___6/3]
8. non_recursive  : [n_evalspeedpldi4bb5in___8/3]
9. non_recursive  : [n_evalspeedpldi4entryin___9/3]
10. non_recursive  : [n_evalspeedpldi4start/3]
11. non_recursive  : [pyRinit/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_evalspeedpldi4bb2in___4/5
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into n_evalspeedpldi4bb5in___3/5
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into n_evalspeedpldi4bb5in___3_loop_cont/4
5. SCC is partially evaluated into n_evalspeedpldi4bb2in___4_loop_cont/4
6. SCC is partially evaluated into n_evalspeedpldi4bb5in___5/3
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into n_evalspeedpldi4entryin___9/3
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into pyRinit/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalspeedpldi4bb2in___4/5 
* CE 8 is refined into CE [18] 
* CE 9 is refined into CE [19] 
* CE 6 is refined into CE [20] 
* CE 7 is refined into CE [21] 


### Cost equations --> "Loop" of n_evalspeedpldi4bb2in___4/5 
* CEs [21] --> Loop 18 
* CEs [18] --> Loop 19 
* CEs [19] --> Loop 20 
* CEs [20] --> Loop 21 

### Ranking functions of CR n_evalspeedpldi4bb2in___4(A,B,C,D,E) 
* RF of phase [18]: [-A+B,B-1]

#### Partial ranking functions of CR n_evalspeedpldi4bb2in___4(A,B,C,D,E) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    -A+B
    B-1


### Specialization of cost equations n_evalspeedpldi4bb5in___3/5 
* CE 15 is refined into CE [22] 
* CE 14 is refined into CE [23] 
* CE 13 is refined into CE [24] 


### Cost equations --> "Loop" of n_evalspeedpldi4bb5in___3/5 
* CEs [24] --> Loop 22 
* CEs [22] --> Loop 23 
* CEs [23] --> Loop 24 

### Ranking functions of CR n_evalspeedpldi4bb5in___3(A,B,C,D,E) 
* RF of phase [22]: [B]

#### Partial ranking functions of CR n_evalspeedpldi4bb5in___3(A,B,C,D,E) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    B


### Specialization of cost equations n_evalspeedpldi4bb5in___3_loop_cont/4 
* CE 17 is refined into CE [25] 
* CE 16 is refined into CE [26] 


### Cost equations --> "Loop" of n_evalspeedpldi4bb5in___3_loop_cont/4 
* CEs [25] --> Loop 25 
* CEs [26] --> Loop 26 

### Ranking functions of CR n_evalspeedpldi4bb5in___3_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR n_evalspeedpldi4bb5in___3_loop_cont(A,B,C,D) 


### Specialization of cost equations n_evalspeedpldi4bb2in___4_loop_cont/4 
* CE 10 is refined into CE [27,28,29] 
* CE 11 is refined into CE [30] 
* CE 12 is refined into CE [31] 


### Cost equations --> "Loop" of n_evalspeedpldi4bb2in___4_loop_cont/4 
* CEs [27,28,29] --> Loop 27 
* CEs [30] --> Loop 28 
* CEs [31] --> Loop 29 

### Ranking functions of CR n_evalspeedpldi4bb2in___4_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR n_evalspeedpldi4bb2in___4_loop_cont(A,B,C,D) 


### Specialization of cost equations n_evalspeedpldi4bb5in___5/3 
* CE 5 is refined into CE [32,33,34,35,36] 


### Cost equations --> "Loop" of n_evalspeedpldi4bb5in___5/3 
* CEs [32,33,34,35,36] --> Loop 30 

### Ranking functions of CR n_evalspeedpldi4bb5in___5(A,B,C) 

#### Partial ranking functions of CR n_evalspeedpldi4bb5in___5(A,B,C) 


### Specialization of cost equations n_evalspeedpldi4entryin___9/3 
* CE 4 is refined into CE [37] 
* CE 2 is refined into CE [38] 
* CE 3 is refined into CE [39] 


### Cost equations --> "Loop" of n_evalspeedpldi4entryin___9/3 
* CEs [37] --> Loop 31 
* CEs [38] --> Loop 32 
* CEs [39] --> Loop 33 

### Ranking functions of CR n_evalspeedpldi4entryin___9(A,B,C) 

#### Partial ranking functions of CR n_evalspeedpldi4entryin___9(A,B,C) 


### Specialization of cost equations pyRinit/3 
* CE 1 is refined into CE [40,41,42] 


### Cost equations --> "Loop" of pyRinit/3 
* CEs [42] --> Loop 34 
* CEs [41] --> Loop 35 
* CEs [40] --> Loop 36 

### Ranking functions of CR pyRinit(A,B,C) 

#### Partial ranking functions of CR pyRinit(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of n_evalspeedpldi4bb2in___4(A,B,C,D,E):
* Chain [[18],21]: 2*it(18)+2
  Such that:it(18) =< -A+B

  with precondition: [C=2,A>=1,B>=2*A] 

* Chain [[18],20]: 2*it(18)+0
  Such that:it(18) =< -A+B

  with precondition: [C=3,A>=1,B>=A+1] 

* Chain [[18],19]: 2*it(18)+1
  Such that:it(18) =< -A+B

  with precondition: [C=4,A=D,E>=0,A>=E+2,B>=A+E+1] 

* Chain [21]: 2
  with precondition: [C=2,B=A,B>=1] 

* Chain [20]: 0
  with precondition: [C=3,A>=1,B>=1] 

* Chain [19]: 1
  with precondition: [C=4,A=D,B=E+1,B>=1,A>=B+1] 


#### Cost of chains of n_evalspeedpldi4bb5in___3(A,B,C,D,E):
* Chain [[22],24]: 2*it(22)+1
  Such that:it(22) =< B

  with precondition: [C=2,B>=1,A>=B+2] 

* Chain [[22],23]: 2*it(22)+0
  Such that:it(22) =< B

  with precondition: [C=3,B>=1,A>=B+2] 

* Chain [24]: 1
  with precondition: [B=0,C=2,A>=2] 

* Chain [23]: 0
  with precondition: [C=3] 


#### Cost of chains of n_evalspeedpldi4bb5in___3_loop_cont(A,B,C,D):
* Chain [26]: 0
  with precondition: [A=2] 

* Chain [25]: 0
  with precondition: [A=3] 


#### Cost of chains of n_evalspeedpldi4bb2in___4_loop_cont(A,B,C,D):
* Chain [29]: 0
  with precondition: [A=2] 

* Chain [28]: 0
  with precondition: [A=3] 

* Chain [27]: 4*s(3)+1
  Such that:aux(1) =< C
s(3) =< aux(1)

  with precondition: [A=4] 


#### Cost of chains of n_evalspeedpldi4bb5in___5(A,B,C):
* Chain [30]: 10*s(5)+4*s(8)+3
  Such that:s(7) =< B
aux(3) =< -A+B
s(5) =< aux(3)
s(8) =< s(7)

  with precondition: [A>=1,B>=1] 


#### Cost of chains of n_evalspeedpldi4entryin___9(A,B,C):
* Chain [33]: 1
  with precondition: [0>=A] 

* Chain [32]: 10*s(14)+4*s(15)+6
  Such that:s(13) =< -2*A+B
s(12) =< -A+B
s(14) =< s(13)
s(15) =< s(12)

  with precondition: [A>=1,B>=A+1] 

* Chain [31]: 1
  with precondition: [A>=B] 


#### Cost of chains of pyRinit(A,B,C):
* Chain [36]: 3
  with precondition: [0>=A] 

* Chain [35]: 10*s(18)+4*s(19)+8
  Such that:s(16) =< -2*A+B
s(17) =< -A+B
s(18) =< s(16)
s(19) =< s(17)

  with precondition: [A>=1,B>=A+1] 

* Chain [34]: 3
  with precondition: [A>=B] 


Closed-form bounds of pyRinit(A,B,C): 
-------------------------------------
* Chain [36] with precondition: [0>=A] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [35] with precondition: [A>=1,B>=A+1] 
    - Upper bound: -4*A+4*B+8+nat(-2*A+B)*10 
    - Complexity: n 
* Chain [34] with precondition: [A>=B] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of pyRinit(A,B,C): nat(-A+B)*4+5+nat(-2*A+B)*10+3 
Asymptotic class: n 
* Total analysis performed in 185 ms.


-- stats
realtime 0:00.23
usertime 0.21
systime 0.00

