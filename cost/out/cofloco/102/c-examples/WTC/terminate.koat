WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [n_evalterminatebb1in___2/7]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [n_evalterminatestop___1/4]
3. non_recursive  : [n_evalterminatebb1in___2_loop_cont/5]
4. non_recursive  : [n_evalterminatebb1in___3/4]
5. non_recursive  : [n_evalterminatestart/4]
6. non_recursive  : [pyRinit/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into n_evalterminatebb1in___2/7
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into n_evalterminatebb1in___2_loop_cont/5
4. SCC is partially evaluated into n_evalterminatebb1in___3/4
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into pyRinit/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalterminatebb1in___2/7 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 6 is refined into CE [13] 
* CE 5 is refined into CE [14] 


### Cost equations --> "Loop" of n_evalterminatebb1in___2/7 
* CEs [14] --> Loop 11 
* CEs [11] --> Loop 12 
* CEs [12] --> Loop 13 
* CEs [13] --> Loop 14 

### Ranking functions of CR n_evalterminatebb1in___2(A,B,C,D,E,F,G) 
* RF of phase [11]: [A/2-B/2-C/2+101/2,2/3*A-B/3-C/3+2/3,-B-C+202]

#### Partial ranking functions of CR n_evalterminatebb1in___2(A,B,C,D,E,F,G) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    A/2-B/2-C/2+101/2
    2/3*A-B/3-C/3+2/3
    -B-C+202


### Specialization of cost equations n_evalterminatebb1in___2_loop_cont/5 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


### Cost equations --> "Loop" of n_evalterminatebb1in___2_loop_cont/5 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

### Ranking functions of CR n_evalterminatebb1in___2_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR n_evalterminatebb1in___2_loop_cont(A,B,C,D,E) 


### Specialization of cost equations n_evalterminatebb1in___3/4 
* CE 4 is refined into CE [17] 
* CE 3 is refined into CE [18] 
* CE 2 is refined into CE [19,20,21,22] 


### Cost equations --> "Loop" of n_evalterminatebb1in___3/4 
* CEs [17] --> Loop 17 
* CEs [18] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [20] --> Loop 20 
* CEs [19,22] --> Loop 21 

### Ranking functions of CR n_evalterminatebb1in___3(A,B,C,D) 

#### Partial ranking functions of CR n_evalterminatebb1in___3(A,B,C,D) 


### Specialization of cost equations pyRinit/4 
* CE 1 is refined into CE [23,24,25,26] 


### Cost equations --> "Loop" of pyRinit/4 
* CEs [26] --> Loop 22 
* CEs [25] --> Loop 23 
* CEs [23,24] --> Loop 24 

### Ranking functions of CR pyRinit(A,B,C,D) 

#### Partial ranking functions of CR pyRinit(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of n_evalterminatebb1in___2(A,B,C,D,E,F,G):
* Chain [[11],14]: 1*it(11)+1
  Such that:it(11) =< A/2-B/2-C/2+101/2

  with precondition: [D=2,100>=B,101>=C,A>=101] 

* Chain [[11],13]: 1*it(11)+1
  Such that:it(11) =< 2/3*A-B/3-C/3+2/3

  with precondition: [D=2,100>=B,101>=C,A+1>=B,A>=C] 

* Chain [[11],12]: 1*it(11)+0
  Such that:it(11) =< 2/3*A-B/3-C/3+2/3

  with precondition: [D=3,100>=B,101>=C,A+1>=B,A>=C] 

* Chain [14]: 1
  with precondition: [D=2,101>=C,B>=101,A+1>=B] 

* Chain [13]: 1
  with precondition: [D=2,101>=C,C>=A+1,A+1>=B] 

* Chain [12]: 0
  with precondition: [D=3,101>=C,A+1>=B] 


#### Cost of chains of n_evalterminatebb1in___2_loop_cont(A,B,C,D,E):
* Chain [16]: 0
  with precondition: [A=2] 

* Chain [15]: 0
  with precondition: [A=3] 


#### Cost of chains of n_evalterminatebb1in___3(A,B,C,D):
* Chain [21]: 1*s(4)+2*s(5)+2
  Such that:s(4) =< A/2-B/2-C/2+99/2
aux(1) =< 2/3*A-B/3-C/3
s(5) =< aux(1)

  with precondition: [100>=B,A>=C] 

* Chain [20]: 2
  with precondition: [100>=B,C>=101,A>=C] 

* Chain [19]: 2
  with precondition: [100>=B,B+1>=A,A>=C] 

* Chain [18]: 1
  with precondition: [B>=101] 

* Chain [17]: 1
  with precondition: [C>=A+1] 


#### Cost of chains of pyRinit(A,B,C,D):
* Chain [24]: 1*s(10)+2*s(12)+4
  Such that:s(10) =< -A/2+B/2-C/2+99/2
s(11) =< -A/3+2/3*B-C/3
s(12) =< s(11)

  with precondition: [100>=A,B>=C] 

* Chain [23]: 3
  with precondition: [A>=101] 

* Chain [22]: 3
  with precondition: [C>=B+1] 


Closed-form bounds of pyRinit(A,B,C,D): 
-------------------------------------
* Chain [24] with precondition: [100>=A,B>=C] 
    - Upper bound: nat(-A/2+B/2-C/2+99/2)+4+nat(-A/3+2/3*B-C/3)*2 
    - Complexity: n 
* Chain [23] with precondition: [A>=101] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [22] with precondition: [C>=B+1] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of pyRinit(A,B,C,D): nat(-A/2+B/2-C/2+99/2)+1+nat(-A/3+2/3*B-C/3)*2+3 
Asymptotic class: n 
* Total analysis performed in 162 ms.


-- stats
realtime 0:00.23
usertime 0.19
systime 0.00

