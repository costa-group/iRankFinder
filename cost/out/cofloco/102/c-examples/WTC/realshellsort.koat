MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [n_evalrealshellsortstop___14/6]
1. non_recursive  : [n_evalrealshellsortbb8in___15/6]
2. recursive  : [n_evalrealshellsortbb3in___7/11,n_evalrealshellsortbb4in___6/11]
3. recursive  : [n_evalrealshellsortbb3in___10/11,n_evalrealshellsortbb3in___7_loop_cont/12,n_evalrealshellsortbb4in___8/11,n_evalrealshellsortbb6in___11/11]
4. recursive  : [n_evalrealshellsortbb6in___2/11,n_evalrealshellsortbb7in___1/11,n_evalrealshellsortbb8in___4/11]
5. recursive  : [n_evalrealshellsortbb3in___12/11,n_evalrealshellsortbb6in___11_loop_cont/12,n_evalrealshellsortbb7in___9/11,n_evalrealshellsortbb8in___4_loop_cont/12]
6. non_recursive  : [exit_location/1]
7. non_recursive  : [n_evalrealshellsortbb8in___3/6]
8. non_recursive  : [n_evalrealshellsortbb8in___5/6]
9. non_recursive  : [n_evalrealshellsortbb3in___12_loop_cont/7]
10. non_recursive  : [n_evalrealshellsortbb6in___13/6]
11. non_recursive  : [n_evalrealshellsortbb8in___16/6]
12. non_recursive  : [n_evalrealshellsortbb8in___17/6]
13. non_recursive  : [n_evalrealshellsortentryin___18/6]
14. non_recursive  : [n_evalrealshellsortstart/6]
15. non_recursive  : [pyRinit/6]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into n_evalrealshellsortbb3in___7/11
3. SCC is partially evaluated into n_evalrealshellsortbb6in___11/11
4. SCC is partially evaluated into n_evalrealshellsortbb8in___4/11
5. SCC is partially evaluated into n_evalrealshellsortbb3in___12/11
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into n_evalrealshellsortbb3in___12_loop_cont/7
10. SCC is partially evaluated into n_evalrealshellsortbb6in___13/6
11. SCC is partially evaluated into n_evalrealshellsortbb8in___16/6
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into n_evalrealshellsortentryin___18/6
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into pyRinit/6

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations n_evalrealshellsortbb3in___7/11 
* CE 32 is refined into CE [33] 
* CE 29 is refined into CE [34] 
* CE 31 is refined into CE [35] 
* CE 30 is refined into CE [36] 


### Cost equations --> "Loop" of n_evalrealshellsortbb3in___7/11 
* CEs [36] --> Loop 29 
* CEs [33] --> Loop 30 
* CEs [34] --> Loop 31 
* CEs [35] --> Loop 32 

### Ranking functions of CR n_evalrealshellsortbb3in___7(A,B,C,D,E,F,G,H,I,J,K) 

#### Partial ranking functions of CR n_evalrealshellsortbb3in___7(A,B,C,D,E,F,G,H,I,J,K) 


### Specialization of cost equations n_evalrealshellsortbb6in___11/11 
* CE 23 is refined into CE [37] 
* CE 22 is refined into CE [38,39] 
* CE 24 is refined into CE [40] 
* CE 19 is refined into CE [41] 
* CE 20 is refined into CE [42] 
* CE 21 is refined into CE [43,44,45,46] 


### Cost equations --> "Loop" of n_evalrealshellsortbb6in___11/11 
* CEs [46] --> Loop 33 
* CEs [45] --> Loop 34 
* CEs [44] --> Loop 35 
* CEs [43] --> Loop 36 
* CEs [41] --> Loop 37 
* CEs [42] --> Loop 38 
* CEs [37] --> Loop 39 
* CEs [38,40] --> Loop 40 
* CEs [39] --> Loop 41 

### Ranking functions of CR n_evalrealshellsortbb6in___11(A,B,C,D,E,F,G,H,I,J,K) 

#### Partial ranking functions of CR n_evalrealshellsortbb6in___11(A,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [33,34,35,36,37,38]:
  - RF of loop [34:1,35:1,36:1,37:1,38:1]:
    A-C depends on loops [33:1] 
  - RF of loop [36:1]:
    2*B-C depends on loops [33:1] 
  - RF of loop [37:1]:
    B-C depends on loops [33:1] 


### Specialization of cost equations n_evalrealshellsortbb8in___4/11 
* CE 25 is refined into CE [47] 
* CE 28 is refined into CE [48] 
* CE 27 is refined into CE [49] 
* CE 26 is refined into CE [50] 


### Cost equations --> "Loop" of n_evalrealshellsortbb8in___4/11 
* CEs [50] --> Loop 42 
* CEs [47] --> Loop 43 
* CEs [48] --> Loop 44 
* CEs [49] --> Loop 45 

### Ranking functions of CR n_evalrealshellsortbb8in___4(A,B,C,D,E,F,G,H,I,J,K) 
* RF of phase [42]: [2*B-1]

#### Partial ranking functions of CR n_evalrealshellsortbb8in___4(A,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [42]:
  - RF of loop [42:1]:
    2*B-1


### Specialization of cost equations n_evalrealshellsortbb3in___12/11 
* CE 11 is refined into CE [51,52] 
* CE 12 is refined into CE [53,54] 
* CE 9 is refined into CE [55,56,57,58,59] 
* CE 8 is refined into CE [60,61,62] 
* CE 13 is refined into CE [63,64,65] 
* CE 14 is refined into CE [66] 
* CE 10 is refined into CE [67,68,69] 


### Cost equations --> "Loop" of n_evalrealshellsortbb3in___12/11 
* CEs [69] --> Loop 46 
* CEs [68] --> Loop 47 
* CEs [67] --> Loop 48 
* CEs [51] --> Loop 49 
* CEs [53] --> Loop 50 
* CEs [56,57] --> Loop 51 
* CEs [60,61,63,66] --> Loop 52 
* CEs [55] --> Loop 53 
* CEs [52] --> Loop 54 
* CEs [54] --> Loop 55 
* CEs [58,59] --> Loop 56 
* CEs [62,64,65] --> Loop 57 

### Ranking functions of CR n_evalrealshellsortbb3in___12(A,B,C,D,E,F,G,H,I,J,K) 
* RF of phase [48]: [B-1]

#### Partial ranking functions of CR n_evalrealshellsortbb3in___12(A,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [48]:
  - RF of loop [48:1]:
    B-1


### Specialization of cost equations n_evalrealshellsortbb3in___12_loop_cont/7 
* CE 17 is refined into CE [70] 
* CE 16 is refined into CE [71] 
* CE 18 is refined into CE [72] 
* CE 15 is refined into CE [73] 


### Cost equations --> "Loop" of n_evalrealshellsortbb3in___12_loop_cont/7 
* CEs [70] --> Loop 58 
* CEs [71] --> Loop 59 
* CEs [72] --> Loop 60 
* CEs [73] --> Loop 61 

### Ranking functions of CR n_evalrealshellsortbb3in___12_loop_cont(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR n_evalrealshellsortbb3in___12_loop_cont(A,B,C,D,E,F,G) 


### Specialization of cost equations n_evalrealshellsortbb6in___13/6 
* CE 7 is refined into CE [74,75,76,77,78,79,80,81,82,83,84,85] 


### Cost equations --> "Loop" of n_evalrealshellsortbb6in___13/6 
* CEs [78,79,80,81,82,83,84,85] --> Loop 62 
* CEs [74,75,76,77] --> Loop 63 

### Ranking functions of CR n_evalrealshellsortbb6in___13(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalrealshellsortbb6in___13(A,B,C,D,E,F) 


### Specialization of cost equations n_evalrealshellsortbb8in___16/6 
* CE 5 is refined into CE [86,87] 
* CE 6 is refined into CE [88] 


### Cost equations --> "Loop" of n_evalrealshellsortbb8in___16/6 
* CEs [86] --> Loop 64 
* CEs [88] --> Loop 65 
* CEs [87] --> Loop 66 

### Ranking functions of CR n_evalrealshellsortbb8in___16(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalrealshellsortbb8in___16(A,B,C,D,E,F) 


### Specialization of cost equations n_evalrealshellsortentryin___18/6 
* CE 3 is refined into CE [89,90,91] 
* CE 2 is refined into CE [92] 
* CE 4 is refined into CE [93] 


### Cost equations --> "Loop" of n_evalrealshellsortentryin___18/6 
* CEs [90] --> Loop 67 
* CEs [92] --> Loop 68 
* CEs [89] --> Loop 69 
* CEs [93] --> Loop 70 
* CEs [91] --> Loop 71 

### Ranking functions of CR n_evalrealshellsortentryin___18(A,B,C,D,E,F) 

#### Partial ranking functions of CR n_evalrealshellsortentryin___18(A,B,C,D,E,F) 


### Specialization of cost equations pyRinit/6 
* CE 1 is refined into CE [94,95,96,97,98] 


### Cost equations --> "Loop" of pyRinit/6 
* CEs [98] --> Loop 72 
* CEs [97] --> Loop 73 
* CEs [96] --> Loop 74 
* CEs [95] --> Loop 75 
* CEs [94] --> Loop 76 

### Ranking functions of CR pyRinit(A,B,C,D,E,F) 

#### Partial ranking functions of CR pyRinit(A,B,C,D,E,F) 


Computing Bounds
=====================================

#### Cost of chains of n_evalrealshellsortbb3in___7(A,B,C,D,E,F,G,H,I,J,K):
* Chain [[29]]...: 2*it(29)+0
  with precondition: [A>=C+1,C>=1,E>=B,B+E>=0,F>=2,3>=F] 

* Chain [[29],32]: 2*it(29)+1
  with precondition: [F=2,A=G,B=H,C+1=I,D=J,C>=1,K>=0,A>=C+1,B>=K+1,E>=B+K] 

* Chain [[29],31]: 2*it(29)+2
  with precondition: [F=2,A=G,B=H,C+1=I,D=J,C>=1,E>=B,K>=B,A>=C+1,B+E>=0] 

* Chain [[29],30]: 2*it(29)+0
  with precondition: [F=3,C>=1,E>=B,A>=C+1,B+E>=0] 

* Chain [32]: 1
  with precondition: [F=2,J=D,A=G,B=H,C+1=I,E=K,C>=1,E>=0,A>=C+1,B>=E+1] 

* Chain [31]: 2
  with precondition: [F=2,J=D,A=G,B=H,C+1=I,E=K,C>=1,E>=B,A>=C+1,B+E>=0] 

* Chain [30]: 0
  with precondition: [F=3,C>=1,E>=0,A>=C+1] 


#### Cost of chains of n_evalrealshellsortbb6in___11(A,B,C,D,E,F,G,H,I,J,K):
* Chain [[33,34,35,36,37,38]]...: 24*it(33)+0
  with precondition: [A>=C+1,C>=1,E>=0,F>=3,4>=F] 

* Chain [[33,34,35,36,37,38],41]...: 26*it(33)+3
  with precondition: [F=3,C>=1,E>=0,A>=2*B+1,A>=C+1] 

* Chain [[33,34,35,36,37,38],40]: 25*aux(3)+0
  with precondition: [F=3,C>=1,E>=0,A>=C+1] 

* Chain [[33,34,35,36,37,38],39]: 24*it(33)+1
  with precondition: [F=4,C>=1,E>=0,I>=1,K>=0,A>=C+1,I>=G] 

* Chain [40]: 1*aux(3)+0
  with precondition: [F=3] 

* Chain [39]: 1
  with precondition: [F=4,H=B,J=D,A=G,C=I,E=K,C>=1,E>=0,C>=A] 


#### Cost of chains of n_evalrealshellsortbb8in___4(A,B,C,D,E,F,G,H,I,J,K):
* Chain [[42],45]: 3*it(42)+1
  Such that:it(42) =< 2*B

  with precondition: [F=6,0>=A,B>=1,C>=0,E>=0] 

* Chain [[42],44]: 3*it(42)+0
  Such that:it(42) =< 2*B

  with precondition: [F=3,0>=A,B>=1,C>=0,E>=0] 

* Chain [45]: 1
  with precondition: [B=0,F=6,C>=0,E>=0,C>=A] 

* Chain [44]: 0
  with precondition: [F=3,B>=0,C>=0,E>=0,C>=A] 

* Chain [43]: 2
  with precondition: [F=5,I=0,K=0,A=G,B=H,A>=1,B>=1,E>=0,C>=A] 


#### Cost of chains of n_evalrealshellsortbb3in___12(A,B,C,D,E,F,G,H,I,J,K):
* Chain [[46,47]]...: 57*it(46)+0
  with precondition: [A>=2,B>=1,C=0,E=0] 

* Chain [[46,47],[48],53]: 57*it(46)+4*it([[48],53])+5*s(23)+0
  Such that:it([[48],53]) =< 1

  with precondition: [C=0,E=0,F=6,A>=2,B>=1] 

* Chain [[46,47],[48],52]: 85*it(46)+3*it([[48],52])+8*s(28)+0
  Such that:it([[48],52]) =< 1

  with precondition: [C=0,E=0,F=3,A>=2,B>=1] 

* Chain [[46,47],57]...: 58*aux(18)+0
  with precondition: [C=0,E=0,F=3,A>=2,B>=1] 

* Chain [[46,47],56]...: 58*aux(19)+0
  with precondition: [C=0,E=0,F=6,A>=2,B>=1] 

* Chain [[46,47],55]...: 81*it(46)+2
  with precondition: [C=0,E=0,F=7,0>=H,A>=2,B>=1,I>=1,K>=0,I>=G] 

* Chain [[46,47],54]...: 81*it(46)+2
  with precondition: [C=0,E=0,F=8,H=0,A>=2,B>=1,I>=1,K>=0,I>=G] 

* Chain [[46,47],53]: 57*it(46)+4
  with precondition: [C=0,E=0,F=6,A>=2,B>=1] 

* Chain [[46,47],52]: 85*it(46)+3*it([52])+3*s(40)+0
  Such that:it([52]) =< 1

  with precondition: [C=0,E=0,F=3,A>=2,B>=1] 

* Chain [[46,47],51]: 58*aux(26)+0
  with precondition: [C=0,E=0,F=6,A>=2,B>=1] 

* Chain [[46,47],50]: 81*it(46)+3
  with precondition: [C=0,E=0,F=7,0>=H,A>=2,B>=1,I>=1,K>=0,I>=G] 

* Chain [[46,47],49]: 81*it(46)+3
  with precondition: [C=0,E=0,F=8,H=0,A>=2,B>=1,I>=1,K>=0,I>=G] 

* Chain [57]...: 1*aux(18)+0
  with precondition: [C=0,E=0,F=3,A>=2,B>=1] 

* Chain [56]...: 1*aux(19)+0
  with precondition: [C=0,E=0,F=6,A>=2,B>=1] 

* Chain [55]...: 24*s(38)+2
  with precondition: [C=0,E=0,F=7,0>=H,A>=2,B>=1,I>=1,K>=0,I>=G] 

* Chain [54]...: 24*s(39)+2
  with precondition: [C=0,E=0,F=8,H=0,A>=2,B>=1,I>=1,K>=0,I>=G] 

* Chain [52]: 3*s(24)+28*s(25)+3
  Such that:s(24) =< B

  with precondition: [C=0,E=0,F=3,A>=1,B>=1] 

* Chain [51]: 1*aux(26)+0
  with precondition: [C=0,E=0,F=6,A>=2,B>=1] 

* Chain [50]: 24*s(45)+3
  with precondition: [C=0,E=0,F=7,0>=H,A>=2,B>=1,I>=1,K>=0,I>=G] 

* Chain [49]: 24*s(46)+3
  with precondition: [C=0,E=0,F=8,H=0,A>=2,B>=1,I>=1,K>=0,I>=G] 


#### Cost of chains of n_evalrealshellsortbb3in___12_loop_cont(A,B,C,D,E,F,G):
* Chain [61]: 0
  with precondition: [A=3] 

* Chain [60]: 0
  with precondition: [A=6] 

* Chain [59]: 1
  with precondition: [A=7,0>=C,D>=1,F>=0,D>=B] 

* Chain [58]: 1
  with precondition: [A=8,C=0,D>=1,F>=0,D>=B] 


#### Cost of chains of n_evalrealshellsortbb6in___13(A,B,C,D,E,F):
* Chain [63]: 3*s(73)+6*s(75)+212*s(76)+4
  Such that:s(74) =< 1
s(73) =< B
s(75) =< s(74)

  with precondition: [C=0,B>=1,A>=2*B,2*B+1>=A] 

* Chain [62]...: 1*aux(35)+0
  with precondition: [C=0,B>=1,A>=2*B,2*B+1>=A] 


#### Cost of chains of n_evalrealshellsortbb8in___16(A,B,C,D,E,F):
* Chain [66]...: 1*s(88)+1
  with precondition: [B>=1,A>=2*B,2*B+1>=A] 

* Chain [65]: 1
  with precondition: [A=1,B=0] 

* Chain [64]: 3*s(90)+6*s(91)+212*s(92)+5
  Such that:s(89) =< 1
s(90) =< B
s(91) =< s(89)

  with precondition: [B>=1,A>=2*B,2*B+1>=A] 


#### Cost of chains of n_evalrealshellsortentryin___18(A,B,C,D,E,F):
* Chain [71]...: 1*s(93)+2
  with precondition: [A>=2] 

* Chain [70]: 2
  with precondition: [A=0] 

* Chain [69]: 2
  with precondition: [A=1] 

* Chain [68]: 2
  with precondition: [0>=A+1] 

* Chain [67]: 3*s(95)+6*s(96)+212*s(97)+6
  Such that:s(94) =< 1
s(95) =< A/2
s(96) =< s(94)

  with precondition: [A>=2] 


#### Cost of chains of pyRinit(A,B,C,D,E,F):
* Chain [76]: 4
  with precondition: [A=0] 

* Chain [75]: 4
  with precondition: [A=1] 

* Chain [74]: 4
  with precondition: [0>=A+1] 

* Chain [73]: 3*s(99)+6*s(100)+212*s(101)+8
  Such that:s(98) =< 1
s(99) =< A/2
s(100) =< s(98)

  with precondition: [A>=2] 

* Chain [72]...: 1*s(102)+4
  with precondition: [A>=2] 


Closed-form bounds of pyRinit(A,B,C,D,E,F): 
-------------------------------------
* Chain [76] with precondition: [A=0] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [75] with precondition: [A=1] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [74] with precondition: [0>=A+1] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [73] with precondition: [A>=2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [72]... with precondition: [A>=2] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of pyRinit(A,B,C,D,E,F): inf 
Asymptotic class: infinity 
* Total analysis performed in 1603 ms.


-- stats
realtime 0:01.76
usertime 1.68
systime 0.02

