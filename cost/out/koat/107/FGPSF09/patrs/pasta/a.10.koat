WORST_CASE(?, O(n^1))

Initial complexity problem:
1:	T:
		(Comp: ?, Cost: 1)    pyRinit(Ar_0, Ar_1) -> Com_1(n_start(Ar_0, Ar_1))
		(Comp: ?, Cost: 1)    n_eval___1(Ar_0, Ar_1) -> Com_1(n_eval___1(Ar_0 + 1, Ar_1)) [ -Ar_0 + Ar_1 >= 0 /\ -Ar_0 + Ar_1 - 1 >= 0 ]
		(Comp: ?, Cost: 1)    n_eval___2(Ar_0, Ar_1) -> Com_1(n_eval___2(Ar_0, Ar_1 + 1)) [ Ar_0 - Ar_1 >= 0 /\ Ar_0 - Ar_1 - 1 >= 0 ]
		(Comp: ?, Cost: 1)    n_eval___3(Ar_0, Ar_1) -> Com_1(n_eval___1(Ar_0 + 1, Ar_1)) [ -Ar_0 + Ar_1 - 1 >= 0 ]
		(Comp: ?, Cost: 1)    n_eval___3(Ar_0, Ar_1) -> Com_1(n_eval___2(Ar_0, Ar_1 + 1)) [ Ar_0 - Ar_1 - 1 >= 0 ]
		(Comp: ?, Cost: 1)    n_start(Ar_0, Ar_1) -> Com_1(n_eval___3(Ar_0, Ar_1))
		(Comp: 1, Cost: 0)    koat_start(Ar_0, Ar_1) -> Com_1(pyRinit(Ar_0, Ar_1)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(Comp: 1, Cost: 1)    pyRinit(Ar_0, Ar_1) -> Com_1(n_start(Ar_0, Ar_1))
		(Comp: ?, Cost: 1)    n_eval___1(Ar_0, Ar_1) -> Com_1(n_eval___1(Ar_0 + 1, Ar_1)) [ -Ar_0 + Ar_1 >= 0 /\ -Ar_0 + Ar_1 - 1 >= 0 ]
		(Comp: ?, Cost: 1)    n_eval___2(Ar_0, Ar_1) -> Com_1(n_eval___2(Ar_0, Ar_1 + 1)) [ Ar_0 - Ar_1 >= 0 /\ Ar_0 - Ar_1 - 1 >= 0 ]
		(Comp: 1, Cost: 1)    n_eval___3(Ar_0, Ar_1) -> Com_1(n_eval___1(Ar_0 + 1, Ar_1)) [ -Ar_0 + Ar_1 - 1 >= 0 ]
		(Comp: 1, Cost: 1)    n_eval___3(Ar_0, Ar_1) -> Com_1(n_eval___2(Ar_0, Ar_1 + 1)) [ Ar_0 - Ar_1 - 1 >= 0 ]
		(Comp: 1, Cost: 1)    n_start(Ar_0, Ar_1) -> Com_1(n_eval___3(Ar_0, Ar_1))
		(Comp: 1, Cost: 0)    koat_start(Ar_0, Ar_1) -> Com_1(pyRinit(Ar_0, Ar_1)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

A polynomial rank function with
	Pol(n_eval___2) = V_1 - V_2 + 1
	Pol(n_eval___1) = -V_1 + V_2 + 1
and size complexities
	S("koat_start(Ar_0, Ar_1) -> Com_1(pyRinit(Ar_0, Ar_1)) [ 0 <= 0 ]", 0-0) = Ar_0
	S("koat_start(Ar_0, Ar_1) -> Com_1(pyRinit(Ar_0, Ar_1)) [ 0 <= 0 ]", 0-1) = Ar_1
	S("n_start(Ar_0, Ar_1) -> Com_1(n_eval___3(Ar_0, Ar_1))", 0-0) = Ar_0
	S("n_start(Ar_0, Ar_1) -> Com_1(n_eval___3(Ar_0, Ar_1))", 0-1) = Ar_1
	S("n_eval___3(Ar_0, Ar_1) -> Com_1(n_eval___2(Ar_0, Ar_1 + 1)) [ Ar_0 - Ar_1 - 1 >= 0 ]", 0-0) = Ar_0
	S("n_eval___3(Ar_0, Ar_1) -> Com_1(n_eval___2(Ar_0, Ar_1 + 1)) [ Ar_0 - Ar_1 - 1 >= 0 ]", 0-1) = Ar_1 + 1
	S("n_eval___3(Ar_0, Ar_1) -> Com_1(n_eval___1(Ar_0 + 1, Ar_1)) [ -Ar_0 + Ar_1 - 1 >= 0 ]", 0-0) = Ar_0 + 1
	S("n_eval___3(Ar_0, Ar_1) -> Com_1(n_eval___1(Ar_0 + 1, Ar_1)) [ -Ar_0 + Ar_1 - 1 >= 0 ]", 0-1) = Ar_1
	S("n_eval___2(Ar_0, Ar_1) -> Com_1(n_eval___2(Ar_0, Ar_1 + 1)) [ Ar_0 - Ar_1 >= 0 /\\ Ar_0 - Ar_1 - 1 >= 0 ]", 0-0) = Ar_0
	S("n_eval___2(Ar_0, Ar_1) -> Com_1(n_eval___2(Ar_0, Ar_1 + 1)) [ Ar_0 - Ar_1 >= 0 /\\ Ar_0 - Ar_1 - 1 >= 0 ]", 0-1) = ?
	S("n_eval___1(Ar_0, Ar_1) -> Com_1(n_eval___1(Ar_0 + 1, Ar_1)) [ -Ar_0 + Ar_1 >= 0 /\\ -Ar_0 + Ar_1 - 1 >= 0 ]", 0-0) = ?
	S("n_eval___1(Ar_0, Ar_1) -> Com_1(n_eval___1(Ar_0 + 1, Ar_1)) [ -Ar_0 + Ar_1 >= 0 /\\ -Ar_0 + Ar_1 - 1 >= 0 ]", 0-1) = Ar_1
	S("pyRinit(Ar_0, Ar_1) -> Com_1(n_start(Ar_0, Ar_1))", 0-0) = Ar_0
	S("pyRinit(Ar_0, Ar_1) -> Com_1(n_start(Ar_0, Ar_1))", 0-1) = Ar_1
orients the transitions
	n_eval___2(Ar_0, Ar_1) -> Com_1(n_eval___2(Ar_0, Ar_1 + 1)) [ Ar_0 - Ar_1 >= 0 /\ Ar_0 - Ar_1 - 1 >= 0 ]
	n_eval___1(Ar_0, Ar_1) -> Com_1(n_eval___1(Ar_0 + 1, Ar_1)) [ -Ar_0 + Ar_1 >= 0 /\ -Ar_0 + Ar_1 - 1 >= 0 ]
weakly and the transitions
	n_eval___2(Ar_0, Ar_1) -> Com_1(n_eval___2(Ar_0, Ar_1 + 1)) [ Ar_0 - Ar_1 >= 0 /\ Ar_0 - Ar_1 - 1 >= 0 ]
	n_eval___1(Ar_0, Ar_1) -> Com_1(n_eval___1(Ar_0 + 1, Ar_1)) [ -Ar_0 + Ar_1 >= 0 /\ -Ar_0 + Ar_1 - 1 >= 0 ]
strictly and produces the following problem:
3:	T:
		(Comp: 1, Cost: 1)                      pyRinit(Ar_0, Ar_1) -> Com_1(n_start(Ar_0, Ar_1))
		(Comp: 2*Ar_0 + 2*Ar_1 + 4, Cost: 1)    n_eval___1(Ar_0, Ar_1) -> Com_1(n_eval___1(Ar_0 + 1, Ar_1)) [ -Ar_0 + Ar_1 >= 0 /\ -Ar_0 + Ar_1 - 1 >= 0 ]
		(Comp: 2*Ar_0 + 2*Ar_1 + 4, Cost: 1)    n_eval___2(Ar_0, Ar_1) -> Com_1(n_eval___2(Ar_0, Ar_1 + 1)) [ Ar_0 - Ar_1 >= 0 /\ Ar_0 - Ar_1 - 1 >= 0 ]
		(Comp: 1, Cost: 1)                      n_eval___3(Ar_0, Ar_1) -> Com_1(n_eval___1(Ar_0 + 1, Ar_1)) [ -Ar_0 + Ar_1 - 1 >= 0 ]
		(Comp: 1, Cost: 1)                      n_eval___3(Ar_0, Ar_1) -> Com_1(n_eval___2(Ar_0, Ar_1 + 1)) [ Ar_0 - Ar_1 - 1 >= 0 ]
		(Comp: 1, Cost: 1)                      n_start(Ar_0, Ar_1) -> Com_1(n_eval___3(Ar_0, Ar_1))
		(Comp: 1, Cost: 0)                      koat_start(Ar_0, Ar_1) -> Com_1(pyRinit(Ar_0, Ar_1)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

Complexity upper bound 4*Ar_0 + 4*Ar_1 + 12

Time: 0.060 sec (SMT: 0.048 sec)

-- stats
realtime 0:00.07
usertime 0.04
systime 0.02

