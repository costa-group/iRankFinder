WORST_CASE(?, O(n^2))

Initial complexity problem:
1:	T:
		(Comp: ?, Cost: 1)    pyRinit(Ar_0, Ar_1) -> Com_1(n_l0(Ar_0, Ar_1))
		(Comp: ?, Cost: 1)    n_l0(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0, Ar_1))
		(Comp: ?, Cost: 1)    n_l1___2(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0 - 1, Ar_0 + Ar_1)) [ Ar_0 - 1 >= 0 ]
		(Comp: ?, Cost: 1)    n_l1___2(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1)) [ -Ar_0 >= 0 ]
		(Comp: ?, Cost: 1)    n_l2___1(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1 - 1)) [ -Ar_0 >= 0 /\ Ar_1 - 1 >= 0 ]
		(Comp: 1, Cost: 0)    koat_start(Ar_0, Ar_1) -> Com_1(pyRinit(Ar_0, Ar_1)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(Comp: 1, Cost: 1)    pyRinit(Ar_0, Ar_1) -> Com_1(n_l0(Ar_0, Ar_1))
		(Comp: 1, Cost: 1)    n_l0(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0, Ar_1))
		(Comp: ?, Cost: 1)    n_l1___2(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0 - 1, Ar_0 + Ar_1)) [ Ar_0 - 1 >= 0 ]
		(Comp: ?, Cost: 1)    n_l1___2(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1)) [ -Ar_0 >= 0 ]
		(Comp: ?, Cost: 1)    n_l2___1(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1 - 1)) [ -Ar_0 >= 0 /\ Ar_1 - 1 >= 0 ]
		(Comp: 1, Cost: 0)    koat_start(Ar_0, Ar_1) -> Com_1(pyRinit(Ar_0, Ar_1)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

A polynomial rank function with
	Pol(pyRinit) = 1
	Pol(n_l0) = 1
	Pol(n_l1___2) = 1
	Pol(n_l2___1) = 0
	Pol(koat_start) = 1
orients all transitions weakly and the transition
	n_l1___2(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1)) [ -Ar_0 >= 0 ]
strictly and produces the following problem:
3:	T:
		(Comp: 1, Cost: 1)    pyRinit(Ar_0, Ar_1) -> Com_1(n_l0(Ar_0, Ar_1))
		(Comp: 1, Cost: 1)    n_l0(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0, Ar_1))
		(Comp: ?, Cost: 1)    n_l1___2(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0 - 1, Ar_0 + Ar_1)) [ Ar_0 - 1 >= 0 ]
		(Comp: 1, Cost: 1)    n_l1___2(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1)) [ -Ar_0 >= 0 ]
		(Comp: ?, Cost: 1)    n_l2___1(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1 - 1)) [ -Ar_0 >= 0 /\ Ar_1 - 1 >= 0 ]
		(Comp: 1, Cost: 0)    koat_start(Ar_0, Ar_1) -> Com_1(pyRinit(Ar_0, Ar_1)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

A polynomial rank function with
	Pol(pyRinit) = V_1
	Pol(n_l0) = V_1
	Pol(n_l1___2) = V_1
	Pol(n_l2___1) = V_1
	Pol(koat_start) = V_1
orients all transitions weakly and the transition
	n_l1___2(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0 - 1, Ar_0 + Ar_1)) [ Ar_0 - 1 >= 0 ]
strictly and produces the following problem:
4:	T:
		(Comp: 1, Cost: 1)       pyRinit(Ar_0, Ar_1) -> Com_1(n_l0(Ar_0, Ar_1))
		(Comp: 1, Cost: 1)       n_l0(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0, Ar_1))
		(Comp: Ar_0, Cost: 1)    n_l1___2(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0 - 1, Ar_0 + Ar_1)) [ Ar_0 - 1 >= 0 ]
		(Comp: 1, Cost: 1)       n_l1___2(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1)) [ -Ar_0 >= 0 ]
		(Comp: ?, Cost: 1)       n_l2___1(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1 - 1)) [ -Ar_0 >= 0 /\ Ar_1 - 1 >= 0 ]
		(Comp: 1, Cost: 0)       koat_start(Ar_0, Ar_1) -> Com_1(pyRinit(Ar_0, Ar_1)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

A polynomial rank function with
	Pol(n_l2___1) = V_2
and size complexities
	S("koat_start(Ar_0, Ar_1) -> Com_1(pyRinit(Ar_0, Ar_1)) [ 0 <= 0 ]", 0-0) = Ar_0
	S("koat_start(Ar_0, Ar_1) -> Com_1(pyRinit(Ar_0, Ar_1)) [ 0 <= 0 ]", 0-1) = Ar_1
	S("n_l2___1(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1 - 1)) [ -Ar_0 >= 0 /\\ Ar_1 - 1 >= 0 ]", 0-0) = Ar_0
	S("n_l2___1(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1 - 1)) [ -Ar_0 >= 0 /\\ Ar_1 - 1 >= 0 ]", 0-1) = Ar_1 + Ar_0 + Ar_0^2
	S("n_l1___2(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1)) [ -Ar_0 >= 0 ]", 0-0) = Ar_0
	S("n_l1___2(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1)) [ -Ar_0 >= 0 ]", 0-1) = Ar_1 + Ar_0 + Ar_0^2
	S("n_l1___2(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0 - 1, Ar_0 + Ar_1)) [ Ar_0 - 1 >= 0 ]", 0-0) = Ar_0
	S("n_l1___2(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0 - 1, Ar_0 + Ar_1)) [ Ar_0 - 1 >= 0 ]", 0-1) = Ar_0 + Ar_1 + Ar_0^2
	S("n_l0(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0, Ar_1))", 0-0) = Ar_0
	S("n_l0(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0, Ar_1))", 0-1) = Ar_1
	S("pyRinit(Ar_0, Ar_1) -> Com_1(n_l0(Ar_0, Ar_1))", 0-0) = Ar_0
	S("pyRinit(Ar_0, Ar_1) -> Com_1(n_l0(Ar_0, Ar_1))", 0-1) = Ar_1
orients the transitions
	n_l2___1(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1 - 1)) [ -Ar_0 >= 0 /\ Ar_1 - 1 >= 0 ]
weakly and the transition
	n_l2___1(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1 - 1)) [ -Ar_0 >= 0 /\ Ar_1 - 1 >= 0 ]
strictly and produces the following problem:
5:	T:
		(Comp: 1, Cost: 1)                       pyRinit(Ar_0, Ar_1) -> Com_1(n_l0(Ar_0, Ar_1))
		(Comp: 1, Cost: 1)                       n_l0(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0, Ar_1))
		(Comp: Ar_0, Cost: 1)                    n_l1___2(Ar_0, Ar_1) -> Com_1(n_l1___2(Ar_0 - 1, Ar_0 + Ar_1)) [ Ar_0 - 1 >= 0 ]
		(Comp: 1, Cost: 1)                       n_l1___2(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1)) [ -Ar_0 >= 0 ]
		(Comp: Ar_1 + Ar_0 + Ar_0^2, Cost: 1)    n_l2___1(Ar_0, Ar_1) -> Com_1(n_l2___1(Ar_0, Ar_1 - 1)) [ -Ar_0 >= 0 /\ Ar_1 - 1 >= 0 ]
		(Comp: 1, Cost: 0)                       koat_start(Ar_0, Ar_1) -> Com_1(pyRinit(Ar_0, Ar_1)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

Complexity upper bound 2*Ar_0 + Ar_1 + Ar_0^2 + 3

Time: 0.086 sec (SMT: 0.073 sec)

-- stats
realtime 0:00.09
usertime 0.07
systime 0.01

