WORST_CASE(?, O(n^1))

Initial complexity problem:
1:	T:
		(Comp: ?, Cost: 1)    pyRinit(Ar_0, Ar_1, Ar_2) -> Com_1(n_start(Ar_0, Ar_1, Ar_2))
		(Comp: ?, Cost: 1)    n_eval___1(Ar_0, Ar_1, Ar_2) -> Com_1(n_eval___1(Ar_2, Ar_1 - 1, Ar_0 + 1)) [ -Ar_2 + 101 >= 0 /\ -Ar_0 + Ar_1 + 1 >= 0 /\ Ar_1 - Ar_2 >= 0 /\ -Ar_0 + 100 >= 0 ]
		(Comp: ?, Cost: 1)    n_eval___2(Ar_0, Ar_1, Ar_2) -> Com_1(n_eval___1(Ar_2, Ar_1 - 1, Ar_0 + 1)) [ Ar_1 - Ar_2 >= 0 /\ -Ar_0 + 100 >= 0 ]
		(Comp: ?, Cost: 1)    n_start(Ar_0, Ar_1, Ar_2) -> Com_1(n_eval___2(Ar_0, Ar_1, Ar_2))
		(Comp: 1, Cost: 0)    koat_start(Ar_0, Ar_1, Ar_2) -> Com_1(pyRinit(Ar_0, Ar_1, Ar_2)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(Comp: 1, Cost: 1)    pyRinit(Ar_0, Ar_1, Ar_2) -> Com_1(n_start(Ar_0, Ar_1, Ar_2))
		(Comp: ?, Cost: 1)    n_eval___1(Ar_0, Ar_1, Ar_2) -> Com_1(n_eval___1(Ar_2, Ar_1 - 1, Ar_0 + 1)) [ -Ar_2 + 101 >= 0 /\ -Ar_0 + Ar_1 + 1 >= 0 /\ Ar_1 - Ar_2 >= 0 /\ -Ar_0 + 100 >= 0 ]
		(Comp: 1, Cost: 1)    n_eval___2(Ar_0, Ar_1, Ar_2) -> Com_1(n_eval___1(Ar_2, Ar_1 - 1, Ar_0 + 1)) [ Ar_1 - Ar_2 >= 0 /\ -Ar_0 + 100 >= 0 ]
		(Comp: 1, Cost: 1)    n_start(Ar_0, Ar_1, Ar_2) -> Com_1(n_eval___2(Ar_0, Ar_1, Ar_2))
		(Comp: 1, Cost: 0)    koat_start(Ar_0, Ar_1, Ar_2) -> Com_1(pyRinit(Ar_0, Ar_1, Ar_2)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

A polynomial rank function with
	Pol(pyRinit) = -V_1 + 2*V_2 - V_3 - 1
	Pol(n_start) = -V_1 + 2*V_2 - V_3 - 1
	Pol(n_eval___1) = -V_1 + 2*V_2 - V_3 + 2
	Pol(n_eval___2) = -V_1 + 2*V_2 - V_3 - 1
	Pol(koat_start) = -V_1 + 2*V_2 - V_3 - 1
orients all transitions weakly and the transition
	n_eval___1(Ar_0, Ar_1, Ar_2) -> Com_1(n_eval___1(Ar_2, Ar_1 - 1, Ar_0 + 1)) [ -Ar_2 + 101 >= 0 /\ -Ar_0 + Ar_1 + 1 >= 0 /\ Ar_1 - Ar_2 >= 0 /\ -Ar_0 + 100 >= 0 ]
strictly and produces the following problem:
3:	T:
		(Comp: 1, Cost: 1)                           pyRinit(Ar_0, Ar_1, Ar_2) -> Com_1(n_start(Ar_0, Ar_1, Ar_2))
		(Comp: Ar_0 + 2*Ar_1 + Ar_2 + 1, Cost: 1)    n_eval___1(Ar_0, Ar_1, Ar_2) -> Com_1(n_eval___1(Ar_2, Ar_1 - 1, Ar_0 + 1)) [ -Ar_2 + 101 >= 0 /\ -Ar_0 + Ar_1 + 1 >= 0 /\ Ar_1 - Ar_2 >= 0 /\ -Ar_0 + 100 >= 0 ]
		(Comp: 1, Cost: 1)                           n_eval___2(Ar_0, Ar_1, Ar_2) -> Com_1(n_eval___1(Ar_2, Ar_1 - 1, Ar_0 + 1)) [ Ar_1 - Ar_2 >= 0 /\ -Ar_0 + 100 >= 0 ]
		(Comp: 1, Cost: 1)                           n_start(Ar_0, Ar_1, Ar_2) -> Com_1(n_eval___2(Ar_0, Ar_1, Ar_2))
		(Comp: 1, Cost: 0)                           koat_start(Ar_0, Ar_1, Ar_2) -> Com_1(pyRinit(Ar_0, Ar_1, Ar_2)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

Complexity upper bound Ar_0 + 2*Ar_1 + Ar_2 + 4

Time: 0.069 sec (SMT: 0.060 sec)

-- stats
realtime 0:00.07
usertime 0.05
systime 0.02

