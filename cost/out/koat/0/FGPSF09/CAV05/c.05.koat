WORST_CASE(?, O(n^1))

Initial complexity problem:
1:	T:
		(Comp: ?, Cost: 1)    eval(Ar_0, Ar_1) -> Com_1(eval(Ar_0 - Ar_1, Ar_1)) [ Ar_0 >= Ar_1 + 1 /\ Ar_0 >= 1 /\ Ar_1 >= 1 ]
		(Comp: ?, Cost: 1)    eval(Ar_0, Ar_1) -> Com_1(eval(Ar_0 - Ar_1, Ar_1)) [ Ar_1 >= Ar_0 + 1 /\ Ar_0 >= 1 /\ Ar_1 >= 1 /\ Ar_0 >= Ar_1 + 1 ]
		(Comp: ?, Cost: 1)    eval(Ar_0, Ar_1) -> Com_1(eval(Ar_0, Ar_1 - Ar_0)) [ Ar_0 >= Ar_1 + 1 /\ Ar_0 >= 1 /\ Ar_1 >= 1 /\ Ar_1 >= Ar_0 ]
		(Comp: ?, Cost: 1)    eval(Ar_0, Ar_1) -> Com_1(eval(Ar_0, Ar_1 - Ar_0)) [ Ar_1 >= Ar_0 + 1 /\ Ar_0 >= 1 /\ Ar_1 >= 1 /\ Ar_1 >= Ar_0 ]
		(Comp: ?, Cost: 1)    start(Ar_0, Ar_1) -> Com_1(eval(Ar_0, Ar_1))
		(Comp: 1, Cost: 0)    koat_start(Ar_0, Ar_1) -> Com_1(start(Ar_0, Ar_1)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transitions from problem 1:
	eval(Ar_0, Ar_1) -> Com_1(eval(Ar_0 - Ar_1, Ar_1)) [ Ar_1 >= Ar_0 + 1 /\ Ar_0 >= 1 /\ Ar_1 >= 1 /\ Ar_0 >= Ar_1 + 1 ]
	eval(Ar_0, Ar_1) -> Com_1(eval(Ar_0, Ar_1 - Ar_0)) [ Ar_0 >= Ar_1 + 1 /\ Ar_0 >= 1 /\ Ar_1 >= 1 /\ Ar_1 >= Ar_0 ]
We thus obtain the following problem:
2:	T:
		(Comp: ?, Cost: 1)    eval(Ar_0, Ar_1) -> Com_1(eval(Ar_0, Ar_1 - Ar_0)) [ Ar_1 >= Ar_0 + 1 /\ Ar_0 >= 1 /\ Ar_1 >= 1 /\ Ar_1 >= Ar_0 ]
		(Comp: ?, Cost: 1)    eval(Ar_0, Ar_1) -> Com_1(eval(Ar_0 - Ar_1, Ar_1)) [ Ar_0 >= Ar_1 + 1 /\ Ar_0 >= 1 /\ Ar_1 >= 1 ]
		(Comp: ?, Cost: 1)    start(Ar_0, Ar_1) -> Com_1(eval(Ar_0, Ar_1))
		(Comp: 1, Cost: 0)    koat_start(Ar_0, Ar_1) -> Com_1(start(Ar_0, Ar_1)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 2 produces the following problem:
3:	T:
		(Comp: ?, Cost: 1)    eval(Ar_0, Ar_1) -> Com_1(eval(Ar_0, Ar_1 - Ar_0)) [ Ar_1 >= Ar_0 + 1 /\ Ar_0 >= 1 /\ Ar_1 >= 1 /\ Ar_1 >= Ar_0 ]
		(Comp: ?, Cost: 1)    eval(Ar_0, Ar_1) -> Com_1(eval(Ar_0 - Ar_1, Ar_1)) [ Ar_0 >= Ar_1 + 1 /\ Ar_0 >= 1 /\ Ar_1 >= 1 ]
		(Comp: 1, Cost: 1)    start(Ar_0, Ar_1) -> Com_1(eval(Ar_0, Ar_1))
		(Comp: 1, Cost: 0)    koat_start(Ar_0, Ar_1) -> Com_1(start(Ar_0, Ar_1)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval) = V_1 + V_2
	Pol(start) = V_1 + V_2
	Pol(koat_start) = V_1 + V_2
orients all transitions weakly and the transitions
	eval(Ar_0, Ar_1) -> Com_1(eval(Ar_0 - Ar_1, Ar_1)) [ Ar_0 >= Ar_1 + 1 /\ Ar_0 >= 1 /\ Ar_1 >= 1 ]
	eval(Ar_0, Ar_1) -> Com_1(eval(Ar_0, Ar_1 - Ar_0)) [ Ar_1 >= Ar_0 + 1 /\ Ar_0 >= 1 /\ Ar_1 >= 1 /\ Ar_1 >= Ar_0 ]
strictly and produces the following problem:
4:	T:
		(Comp: Ar_0 + Ar_1, Cost: 1)    eval(Ar_0, Ar_1) -> Com_1(eval(Ar_0, Ar_1 - Ar_0)) [ Ar_1 >= Ar_0 + 1 /\ Ar_0 >= 1 /\ Ar_1 >= 1 /\ Ar_1 >= Ar_0 ]
		(Comp: Ar_0 + Ar_1, Cost: 1)    eval(Ar_0, Ar_1) -> Com_1(eval(Ar_0 - Ar_1, Ar_1)) [ Ar_0 >= Ar_1 + 1 /\ Ar_0 >= 1 /\ Ar_1 >= 1 ]
		(Comp: 1, Cost: 1)              start(Ar_0, Ar_1) -> Com_1(eval(Ar_0, Ar_1))
		(Comp: 1, Cost: 0)              koat_start(Ar_0, Ar_1) -> Com_1(start(Ar_0, Ar_1)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

Complexity upper bound 2*Ar_0 + 2*Ar_1 + 1

Time: 0.037 sec (SMT: 0.036 sec)
