WORST_CASE(?, O(n^1))

Initial complexity problem:
1:	T:
		(Comp: ?, Cost: 1)    start(Ar_0) -> Com_1(a(Ar_0)) [ Ar_0 >= 1 ]
		(Comp: ?, Cost: 1)    start(Ar_0) -> Com_1(a(Ar_0)) [ Ar_0 >= 2 ]
		(Comp: ?, Cost: 1)    start(Ar_0) -> Com_1(a(Ar_0)) [ Ar_0 >= 4 ]
		(Comp: ?, Cost: 1)    a(Ar_0) -> Com_1(a(Fresh_1)) [ 2*Fresh_1 >= 2 /\ Ar_0 = 2*Fresh_1 ]
		(Comp: ?, Cost: 1)    a(Ar_0) -> Com_1(a(Fresh_0)) [ 2*Fresh_0 >= 1 /\ Ar_0 = 2*Fresh_0 + 1 ]
		(Comp: 1, Cost: 0)    koat_start(Ar_0) -> Com_1(start(Ar_0)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(Comp: 1, Cost: 1)    start(Ar_0) -> Com_1(a(Ar_0)) [ Ar_0 >= 1 ]
		(Comp: 1, Cost: 1)    start(Ar_0) -> Com_1(a(Ar_0)) [ Ar_0 >= 2 ]
		(Comp: 1, Cost: 1)    start(Ar_0) -> Com_1(a(Ar_0)) [ Ar_0 >= 4 ]
		(Comp: ?, Cost: 1)    a(Ar_0) -> Com_1(a(Fresh_1)) [ 2*Fresh_1 >= 2 /\ Ar_0 = 2*Fresh_1 ]
		(Comp: ?, Cost: 1)    a(Ar_0) -> Com_1(a(Fresh_0)) [ 2*Fresh_0 >= 1 /\ Ar_0 = 2*Fresh_0 + 1 ]
		(Comp: 1, Cost: 0)    koat_start(Ar_0) -> Com_1(start(Ar_0)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

A polynomial rank function with
	Pol(start) = 2*V_1
	Pol(a) = 2*V_1
	Pol(koat_start) = 2*V_1
orients all transitions weakly and the transitions
	a(Ar_0) -> Com_1(a(Fresh_1)) [ 2*Fresh_1 >= 2 /\ Ar_0 = 2*Fresh_1 ]
	a(Ar_0) -> Com_1(a(Fresh_0)) [ 2*Fresh_0 >= 1 /\ Ar_0 = 2*Fresh_0 + 1 ]
strictly and produces the following problem:
3:	T:
		(Comp: 1, Cost: 1)         start(Ar_0) -> Com_1(a(Ar_0)) [ Ar_0 >= 1 ]
		(Comp: 1, Cost: 1)         start(Ar_0) -> Com_1(a(Ar_0)) [ Ar_0 >= 2 ]
		(Comp: 1, Cost: 1)         start(Ar_0) -> Com_1(a(Ar_0)) [ Ar_0 >= 4 ]
		(Comp: 2*Ar_0, Cost: 1)    a(Ar_0) -> Com_1(a(Fresh_1)) [ 2*Fresh_1 >= 2 /\ Ar_0 = 2*Fresh_1 ]
		(Comp: 2*Ar_0, Cost: 1)    a(Ar_0) -> Com_1(a(Fresh_0)) [ 2*Fresh_0 >= 1 /\ Ar_0 = 2*Fresh_0 + 1 ]
		(Comp: 1, Cost: 0)         koat_start(Ar_0) -> Com_1(start(Ar_0)) [ 0 <= 0 ]
	start location:	koat_start
	leaf cost:	0

Complexity upper bound 4*Ar_0 + 3

Time: 0.030 sec (SMT: 0.028 sec)
